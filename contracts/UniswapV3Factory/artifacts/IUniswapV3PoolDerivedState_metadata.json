{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint32[]",
						"name": "secondsAgos",
						"type": "uint32[]"
					}
				],
				"name": "observe",
				"outputs": [
					{
						"internalType": "int56[]",
						"name": "tickCumulatives",
						"type": "int56[]"
					},
					{
						"internalType": "uint160[]",
						"name": "secondsPerLiquidityCumulativeX128s",
						"type": "uint160[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					}
				],
				"name": "snapshotCumulativesInside",
				"outputs": [
					{
						"internalType": "int56",
						"name": "tickCumulativeInside",
						"type": "int56"
					},
					{
						"internalType": "uint160",
						"name": "secondsPerLiquidityInsideX128",
						"type": "uint160"
					},
					{
						"internalType": "uint32",
						"name": "secondsInside",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"observe(uint32[])": {
					"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
					"params": {
						"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
					},
					"returns": {
						"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
						"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
					}
				},
				"snapshotCumulativesInside(int24,int24)": {
					"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
					"params": {
						"tickLower": "The lower tick of the range",
						"tickUpper": "The upper tick of the range"
					},
					"returns": {
						"secondsInside": "The snapshot of seconds per liquidity for the range",
						"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
						"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
					}
				}
			},
			"title": "Pool state that is not stored",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"observe(uint32[])": {
					"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
				},
				"snapshotCumulativesInside(int24,int24)": {
					"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
				}
			},
			"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/UniswapV3Factory/UniswapV3Factory_Output.sol": "IUniswapV3PoolDerivedState"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100000
		},
		"remappings": []
	},
	"sources": {
		"contracts/UniswapV3Factory/UniswapV3Factory_Output.sol": {
			"keccak256": "0x9c734aa3853162d134cbdf34affb212b4a98c5aaa226fe9e7f4df59e93fd7d20",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://575ec954c9afd35b901b7a49d105e429f8fb6ecd0e41ec5dca1f1748d8c74bc9",
				"dweb:/ipfs/QmU4EJFwa3veamkMEocYS2tQV3wPgY952Mba639SDqk63j"
			]
		}
	},
	"version": 1
}