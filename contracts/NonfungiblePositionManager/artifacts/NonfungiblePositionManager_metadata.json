{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_factory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_WETH9",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenDescriptor_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Collect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "DecreaseLiquidity",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "IncreaseLiquidity",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PERMIT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "WETH9",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "baseURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint128",
								"name": "amount0Max",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "amount1Max",
								"type": "uint128"
							}
						],
						"internalType": "struct INonfungiblePositionManager.CollectParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "collect",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token0",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token1",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceX96",
						"type": "uint160"
					}
				],
				"name": "createAndInitializePoolIfNecessary",
				"outputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "liquidity",
								"type": "uint128"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "decreaseLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount0Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "increaseLiquidity",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "token0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "token1",
								"type": "address"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "int24",
								"name": "tickLower",
								"type": "int24"
							},
							{
								"internalType": "int24",
								"name": "tickUpper",
								"type": "int24"
							},
							{
								"internalType": "uint256",
								"name": "amount0Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct INonfungiblePositionManager.MintParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "positions",
				"outputs": [
					{
						"internalType": "uint96",
						"name": "nonce",
						"type": "uint96"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token0",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token1",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					},
					{
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					},
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside0LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside1LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed0",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed1",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "refundETH",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermitAllowed",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermitAllowedIfNecessary",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermitIfNecessary",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountMinimum",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "sweepToken",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "tokenByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "tokenOfOwnerByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount0Owed",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1Owed",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "uniswapV3MintCallback",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountMinimum",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "unwrapWETH9",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"returns": {
						"_0": "The domain seperator used in encoding of permit signature"
					}
				},
				"approve(address,uint256)": {
					"details": "See {IERC721-approve}."
				},
				"balanceOf(address)": {
					"details": "See {IERC721-balanceOf}."
				},
				"baseURI()": {
					"details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
				},
				"burn(uint256)": {
					"params": {
						"tokenId": "The ID of the token that is being burned"
					}
				},
				"collect((uint256,address,uint128,uint128))": {
					"params": {
						"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
					},
					"returns": {
						"amount0": "The amount of fees collected in token0",
						"amount1": "The amount of fees collected in token1"
					}
				},
				"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
					"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
					"params": {
						"fee": "The fee amount of the v3 pool for the specified token pair",
						"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
						"token0": "The contract address of token0 of the pool",
						"token1": "The contract address of token1 of the pool"
					},
					"returns": {
						"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
					}
				},
				"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
					"params": {
						"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
					},
					"returns": {
						"amount0": "The amount of token0 accounted to the position's tokens owed",
						"amount1": "The amount of token1 accounted to the position's tokens owed"
					}
				},
				"getApproved(uint256)": {
					"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
				},
				"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
					"params": {
						"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
					},
					"returns": {
						"amount0": "The amount of token0 to acheive resulting liquidity",
						"amount1": "The amount of token1 to acheive resulting liquidity",
						"liquidity": "The new liquidity amount as a result of the increase"
					}
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC721-isApprovedForAll}."
				},
				"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
					"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
					"params": {
						"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
					},
					"returns": {
						"amount0": "The amount of token0",
						"amount1": "The amount of token1",
						"liquidity": "The amount of liquidity for this position",
						"tokenId": "The ID of the token that represents the minted position"
					}
				},
				"multicall(bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				},
				"name()": {
					"details": "See {IERC721Metadata-name}."
				},
				"ownerOf(uint256)": {
					"details": "See {IERC721-ownerOf}."
				},
				"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"params": {
						"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"spender": "The account that is being approved",
						"tokenId": "The ID of the token that is being approved for spending",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
					}
				},
				"positions(uint256)": {
					"details": "Throws if the token ID is not valid.",
					"params": {
						"tokenId": "The ID of the token that represents the position"
					},
					"returns": {
						"fee": "The fee associated with the pool",
						"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
						"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
						"liquidity": "The liquidity of the position",
						"nonce": "The nonce for permits",
						"operator": "The address that is approved for spending",
						"tickLower": "The lower end of the tick range for the position",
						"tickUpper": "The higher end of the tick range for the position",
						"token0": "The address of the token0 for a specific pool",
						"token1": "The address of the token1 for a specific pool",
						"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
						"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
					}
				},
				"refundETH()": {
					"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
					"params": {
						"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
						"value": "The amount that can be spent of token"
					}
				},
				"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
					"params": {
						"expiry": "The timestamp at which the permit is no longer valid",
						"nonce": "The current nonce of the owner",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
					}
				},
				"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
					"params": {
						"expiry": "The timestamp at which the permit is no longer valid",
						"nonce": "The current nonce of the owner",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
					}
				},
				"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
					"params": {
						"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
						"value": "The amount that can be spent of token"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC721-setApprovalForAll}."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
				},
				"sweepToken(address,uint256,address)": {
					"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
					"params": {
						"amountMinimum": "The minimum amount of token required for a transfer",
						"recipient": "The destination address of the token",
						"token": "The contract address of the token which will be transferred to `recipient`"
					}
				},
				"symbol()": {
					"details": "See {IERC721Metadata-symbol}."
				},
				"tokenByIndex(uint256)": {
					"details": "See {IERC721Enumerable-tokenByIndex}."
				},
				"tokenOfOwnerByIndex(address,uint256)": {
					"details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
				},
				"totalSupply()": {
					"details": "See {IERC721Enumerable-totalSupply}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC721-transferFrom}."
				},
				"uniswapV3MintCallback(uint256,uint256,bytes)": {
					"details": "In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.",
					"params": {
						"amount0Owed": "The amount of token0 due to the pool for the minted liquidity",
						"amount1Owed": "The amount of token1 due to the pool for the minted liquidity",
						"data": "Any data passed through by the caller via the IUniswapV3PoolActions#mint call"
					}
				},
				"unwrapWETH9(uint256,address)": {
					"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
					"params": {
						"amountMinimum": "The minimum amount of WETH9 to unwrap",
						"recipient": "The address receiving ETH"
					}
				}
			},
			"stateVariables": {
				"_nextId": {
					"details": "The ID of the next token that will be minted. Skips 0"
				},
				"_nextPoolId": {
					"details": "The ID of the next pool that is used for the first time. Skips 0"
				},
				"_poolIdToPoolKey": {
					"details": "Pool keys by pool ID, to save on SSTOREs for position data"
				},
				"_poolIds": {
					"details": "IDs of pools assigned by this contract"
				},
				"_positions": {
					"details": "The token ID position data"
				},
				"_tokenDescriptor": {
					"details": "The address of the token descriptor contract, which handles generating token URIs for position tokens"
				}
			},
			"title": "NFT positions",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Collect(uint256,address,uint256,uint256)": {
					"notice": "Emitted when tokens are collected for a position NFT"
				},
				"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
					"notice": "Emitted when liquidity is decreased for a position NFT"
				},
				"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
					"notice": "Emitted when liquidity is increased for a position NFT"
				}
			},
			"kind": "user",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"notice": "The domain separator used in the permit signature"
				},
				"PERMIT_TYPEHASH()": {
					"notice": "The permit typehash used in the permit signature"
				},
				"burn(uint256)": {
					"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
				},
				"collect((uint256,address,uint128,uint128))": {
					"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
				},
				"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
					"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
				},
				"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
					"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
				},
				"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
					"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
				},
				"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
					"notice": "Creates a new position wrapped in a NFT"
				},
				"multicall(bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				},
				"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Approve of a specific token ID for spending by spender via signature"
				},
				"positions(uint256)": {
					"notice": "Returns the position information associated with a given token ID."
				},
				"refundETH()": {
					"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
				},
				"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend a given token from `msg.sender`"
				},
				"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
				},
				"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
				},
				"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend a given token from `msg.sender`"
				},
				"sweepToken(address,uint256,address)": {
					"notice": "Transfers the full amount of a token held by this contract to recipient"
				},
				"uniswapV3MintCallback(uint256,uint256,bytes)": {
					"notice": "Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint."
				},
				"unwrapWETH9(uint256,address)": {
					"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
				}
			},
			"notice": "Wraps Uniswap V3 positions in the ERC721 non-fungible token interface",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NonfungiblePositionManager/NonfungiblePositionManager.sol": "NonfungiblePositionManager"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100000
		},
		"remappings": []
	},
	"sources": {
		"contracts/NonfungiblePositionManager/Address.sol": {
			"keccak256": "0x879206469c96d8a2434bb9498089894a537f03b575dab17d88cacce0df20fce2",
			"license": "MIT",
			"urls": [
				"bzz-raw://4efdaffa276de32bf4ed17c220cddcc20b91e60cd6e67267dd5db203eb60fade",
				"dweb:/ipfs/QmSKrAqLzhMtG7mAdPd2FNi463HZr7XGYMXsAnHwZcenk6"
			]
		},
		"contracts/NonfungiblePositionManager/BlockTimestamp.sol": {
			"keccak256": "0x1aa66f71234064a0c0976f62233f2edbd69554e5ad817dc97f318bc8e11f4da6",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b3a40450e9d6b0f9cb91b40ffd6215612505bd74e7d954529958f4edc6ee7b93",
				"dweb:/ipfs/QmewsUCHK5N5KhNtqEwK8JgsXFADyFBrQRS5HoDWM5gi3b"
			]
		},
		"contracts/NonfungiblePositionManager/CallbackValidation.sol": {
			"keccak256": "0x1e5aad4fae80f588e31d55a691ad677ddb65dfbd3a0753e02c7b3f722e33b1d6",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a5aa11a1c307f5b8b0264e890808c36c41f303ec7441a22e9f2aaee046f44bce",
				"dweb:/ipfs/QmbsGgFNqQPwQo5hXEey7P9Uq8JYvHnVtrmsHSmWQiDMLR"
			]
		},
		"contracts/NonfungiblePositionManager/ChainId.sol": {
			"keccak256": "0x19478399e251074e5c8835eccedca8d3c223479d025e75cd3730131c1f65bdac",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://21cf1f666bb74f1a4180324a4254918cf28d68236a1828140e7e6b21d4bfe857",
				"dweb:/ipfs/QmcTVMseerQiMm2cS5gQ3SEx9kprpyMgWCbiD9VL2kKS2u"
			]
		},
		"contracts/NonfungiblePositionManager/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"contracts/NonfungiblePositionManager/ERC165.sol": {
			"keccak256": "0x234cdf2c3efd5f0dc17d32fe65d33c21674ca17de1e945eb60ac1076d7152d96",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd196df6ec4549923b4581fcb4be3d05237b5221067410d0bc34cb76d4174441",
				"dweb:/ipfs/Qmf2vFVgbfpD4FvAhQXkprg9sKSX3TXKRdbQTSjJVEmzWj"
			]
		},
		"contracts/NonfungiblePositionManager/ERC721.sol": {
			"keccak256": "0xa851dc0f65d9f81305d1edb13f0c743b2dfc08bbd7ea46c4a024537e48b81c11",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d2fa38010b6d75434aa3f64db7a5ac45a24f313bb09c6a97f749e0e899846c8",
				"dweb:/ipfs/Qmevr34BjT1zCLoVhoGwmLqY9KHiNos4b8WtF3R7866Bbb"
			]
		},
		"contracts/NonfungiblePositionManager/ERC721Permit.sol": {
			"keccak256": "0xa69487da199048e891dfdfdaa1de7baa9c0e47396ca55427f85cb260961ff7a9",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a8feb751ead5533546cc581b85d8ab0d10fa231c1308c462d19ea736f69ab6e6",
				"dweb:/ipfs/QmdsZtYKrpFW2QcLGjgSWFPjmqbH53vQpyNcwpMaz6KByt"
			]
		},
		"contracts/NonfungiblePositionManager/EnumerableMap.sol": {
			"keccak256": "0x2114555153edb5f273008b3d34205f511db9af06b88f752e4c280dd612c4c549",
			"license": "MIT",
			"urls": [
				"bzz-raw://8779df50f4f716c6adaa5f61880c572abb2b37197d690d6aad32e52a32d5f382",
				"dweb:/ipfs/QmVuZMGNFEo4gm1QB55gnCwCTc7XC5npkmgdfeJUgHbMiL"
			]
		},
		"contracts/NonfungiblePositionManager/EnumerableSet.sol": {
			"keccak256": "0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f",
			"license": "MIT",
			"urls": [
				"bzz-raw://ccafc1afbcbf54559beea9c029d0b7656c56a185813c5fa74c4ea3eb4b608419",
				"dweb:/ipfs/QmTKwdbenDfNwmwRVh8VKtA6mhFK2AyTFRoJF3BqLB81KM"
			]
		},
		"contracts/NonfungiblePositionManager/FixedPoint128.sol": {
			"keccak256": "0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://2ba88933f16cd2df398e19c6ad227268f83c03081b70d243c97116d2ed9bc241",
				"dweb:/ipfs/QmTUGxdh8snzEM9VrTSS47StCg9VVWvvLJtJeNnMTFY4xb"
			]
		},
		"contracts/NonfungiblePositionManager/FixedPoint96.sol": {
			"keccak256": "0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://186d3b528866065a5856f96d2aeec698efa99f8da913e9adf34f8cc296cc993d",
				"dweb:/ipfs/QmUAiMvtAQp8c9dy57bqJYzG7hkb1uChiPaQmt264skoqP"
			]
		},
		"contracts/NonfungiblePositionManager/FullMath.sol": {
			"keccak256": "0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc5a6ae776be3e7dcbd23d49ffbc9d792fed0ddf4b111ebb64b9bb2133ec263e",
				"dweb:/ipfs/QmbAUtWqvipzEARQpFpkzYKBELy3qeW5WXnZxHFU84sxG7"
			]
		},
		"contracts/NonfungiblePositionManager/IERC1271.sol": {
			"keccak256": "0xfafb0a232f7410fa2fbcae4627e357dfa8f43a58dea6ba796d8bf5523c5c7b89",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://f3877e40332b89fc7a14fa3266b4a2bd154725c322816a8985eabfbaeb6ab372",
				"dweb:/ipfs/QmVj7tjRKWdW9H6vhP2JTDgt82Pk8sGHEJHtJJwPqmgrRi"
			]
		},
		"contracts/NonfungiblePositionManager/IERC165.sol": {
			"keccak256": "0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea",
				"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa"
			]
		},
		"contracts/NonfungiblePositionManager/IERC20.sol": {
			"keccak256": "0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76",
			"license": "MIT",
			"urls": [
				"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b",
				"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU"
			]
		},
		"contracts/NonfungiblePositionManager/IERC20Permit.sol": {
			"keccak256": "0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2",
				"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn"
			]
		},
		"contracts/NonfungiblePositionManager/IERC20PermitAllowed.sol": {
			"keccak256": "0x8c4c1b8e724e0a78cb691d703dd37cd91b8bd6600537fb227807a194025a792d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://783be851155842a02cdb0483c3a69ecc0e7ae8545f65cec1d4aeb355b2026a7d",
				"dweb:/ipfs/QmZNBQosTjpGNKB3Eo2K6Zzye7FYiLVoEki5iPB2Y69jz2"
			]
		},
		"contracts/NonfungiblePositionManager/IERC721.sol": {
			"keccak256": "0x95b70ea40a54f0ae3ea29ec57931d2463768943cd0a6b0083dcb3906f22f5432",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0f1294f9df253b2af0692a578de607c922707f08e5d46bc32a6cf3586b8f0bb",
				"dweb:/ipfs/QmQ1HKG8RJ8RQdBsFzV55WtB7f5vEd7kQud6yHjiGtdQyX"
			]
		},
		"contracts/NonfungiblePositionManager/IERC721Enumerable.sol": {
			"keccak256": "0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f",
			"license": "MIT",
			"urls": [
				"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4",
				"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r"
			]
		},
		"contracts/NonfungiblePositionManager/IERC721Metadata.sol": {
			"keccak256": "0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573",
			"license": "MIT",
			"urls": [
				"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1",
				"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb"
			]
		},
		"contracts/NonfungiblePositionManager/IERC721Permit.sol": {
			"keccak256": "0x1ab7080a29e4fb35ebc21ef1f2e78a96171c0eb4166b8f7b6dc1d56ccc78a0fc",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://9b7d1e41b6470d01b2a2368a1da0bfa817a80b89e8b57ae59f9316cd4a92b358",
				"dweb:/ipfs/QmVn39i4ZXUcGbmt41tbzR9izbfkHH7rt93PnVxwhLZPB6"
			]
		},
		"contracts/NonfungiblePositionManager/IERC721Receiver.sol": {
			"keccak256": "0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8a7fd1043372336ecccdbcbcf4962c6df8958dc9c7c7f8361fc2b3dd23570cc",
				"dweb:/ipfs/QmYHKgZxnanBfu7Q8ZicVhDDuB7XRGxuwvmCjfQQ1E5j39"
			]
		},
		"contracts/NonfungiblePositionManager/IMulticall.sol": {
			"keccak256": "0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016",
				"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD"
			]
		},
		"contracts/NonfungiblePositionManager/INonfungiblePositionManager.sol": {
			"keccak256": "0xf2de920cb6c0be517b6f02c151b657e56aa4685d413df9d903d763ebc7dadcb1",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://eaa67d9f1e025ea7eeef34e7951c3c35d3af6e8f5e3bf392c01189e8be38e535",
				"dweb:/ipfs/QmYFDVPZ4YeLHezcjhgUWLHWMMMCmDqxd3F94vwjjHmfPp"
			]
		},
		"contracts/NonfungiblePositionManager/INonfungibleTokenPositionDescriptor.sol": {
			"keccak256": "0xbd38c547a9922f146b5d2d4c67bef2e05c38962c485adc6dc51b5f524f04e3c6",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://86b44688ad9ea1e521aa44acdfec4a52de7013b93faeffc3a950648401190be1",
				"dweb:/ipfs/QmRN26kHnipgVy2G479W9h8wSy28wkTsWrFLg6QafZwEr9"
			]
		},
		"contracts/NonfungiblePositionManager/IPeripheryImmutableState.sol": {
			"keccak256": "0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f",
				"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127"
			]
		},
		"contracts/NonfungiblePositionManager/IPeripheryPayments.sol": {
			"keccak256": "0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407",
				"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp"
			]
		},
		"contracts/NonfungiblePositionManager/IPoolInitializer.sol": {
			"keccak256": "0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f",
				"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu"
			]
		},
		"contracts/NonfungiblePositionManager/ISelfPermit.sol": {
			"keccak256": "0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678",
				"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3Factory.sol": {
			"keccak256": "0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2",
				"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3MintCallback.sol": {
			"keccak256": "0x27a9725b8f831a92d16380860c3d348a0b926a7f01b34a54ea6eea78cbdbcd6a",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://7c37ca742c643ca4ba6baadff72b8450c6e340a30f7fea0863dba74030a9bbc7",
				"dweb:/ipfs/QmeKBR6a7tQSX85Q7Lb2wrAWSEFqhC4tTmLo4SzcN3kFmp"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3Pool.sol": {
			"keccak256": "0xa3fb68245ed4df4df4d47f9111243a7f7476e1b61649198b8874e0257dae1308",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://56a7cb26aab70bf78ecbc3e170a794964ebd74d14f64c36831e2b8efc65e40ec",
				"dweb:/ipfs/QmbyWRfTkRCtB9zyQsLY2kWp6HSPR9zdS45ZzXSn539LQi"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3PoolActions.sol": {
			"keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
				"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
				"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3PoolEvents.sol": {
			"keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
				"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
				"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3PoolOwnerActions.sol": {
			"keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
				"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
			]
		},
		"contracts/NonfungiblePositionManager/IUniswapV3PoolState.sol": {
			"keccak256": "0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f",
				"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg"
			]
		},
		"contracts/NonfungiblePositionManager/IWETH9.sol": {
			"keccak256": "0x8bf953d721c6cf0e9cbc9132b8ab963c4894e536f12c5d3bb113ecee55e08781",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8f45ae8e6d0a3cda8d640dc8294f8bc6f7e4419699cdd3f52fd423bde51e3126",
				"dweb:/ipfs/QmZC2Sw3ZM21Tb65gkVWBKMvsZiQwitX1W8dVwcdox2ZAX"
			]
		},
		"contracts/NonfungiblePositionManager/LiquidityAmounts.sol": {
			"keccak256": "0xb5e995e63eccea1cabddcaca9ed9a4cae50f0371fc04dc4eb3a076820285d08c",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://fd8295d73d12c331ce6c3a5aeb60507e0d80aaa07f231d122ca455a5f6473d72",
				"dweb:/ipfs/QmS4vDa84y4fXTwrea8Txj2hyTshcBehPck4PtEeRBsouW"
			]
		},
		"contracts/NonfungiblePositionManager/LiquidityManagement.sol": {
			"keccak256": "0x2f0ee3b3bca849866bdfad13f7fbcf73ce5631c1a2a3617cab53b81947d5b649",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://948197268f234b3912c144deadca9da8a18f34eeab8c5dcee098a0d5da778033",
				"dweb:/ipfs/QmPhkc8jXwvnGWS9fZYc8NBeFM7Jk2sdp3mtXnqpk5AUNr"
			]
		},
		"contracts/NonfungiblePositionManager/Multicall.sol": {
			"keccak256": "0x1d85a59873de873f4c93f6dcde9cacbf9881c23d50f1e714989e9bc6f78b8c70",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6908de11fb73a4efe5c77e15c28a066f11f1586ce81144ca1322afa07e383e55",
				"dweb:/ipfs/QmUX4zNfQvxkeYiL2Wku8XZFwhPsjUXRKLgAkCoVAJuzHk"
			]
		},
		"contracts/NonfungiblePositionManager/NonfungiblePositionManager.sol": {
			"keccak256": "0xe2ca3c3b3ad2448e4d060296f599f01ff4f79526c8856ad959c5ddc87ab80530",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b41d3df915a808e05fedb16d925a9710fc7fe932eb98f78a2de13df55460b62b",
				"dweb:/ipfs/QmQYBY3rNbjw6uDYEqkp36THLD7zd2SF8U6AQoAY7aVXVy"
			]
		},
		"contracts/NonfungiblePositionManager/PeripheryImmutableState.sol": {
			"keccak256": "0xf139c1e7a8d09eca8fdcc55b2df1b0c4202e0ebd9048da959e971d180d2fb1a8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8c96a41c7934e90f9d807e2b5847e60a6c80c30c782bcff442997143fe88cddd",
				"dweb:/ipfs/QmSyt8SZgz2LUUKNCz1hfpNbeFwqe5YVsmWH1swPeNsaMK"
			]
		},
		"contracts/NonfungiblePositionManager/PeripheryPayments.sol": {
			"keccak256": "0x12fa3b0947a69e42efd71418ab86aadab6df8122f8cca76d7aa57dd5bde76cc0",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://77447f91f40537912969538f8de75174d89e1189d791a6008822ec4f2d05a420",
				"dweb:/ipfs/QmbWcKqdz691GCHktjm6mw7rrZgLmeyGp4N2a9uUXfJHge"
			]
		},
		"contracts/NonfungiblePositionManager/PeripheryValidation.sol": {
			"keccak256": "0xc736bab599912d6212e8414ee4ba7af0c1e08ff6aa11caa85f5f6e07f7d421c3",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://06f6c13a86900c71fa486fc029a59d1b7eb96162bb42885b5f845d995294893e",
				"dweb:/ipfs/QmUcBxMsmncw9n6eXhzzwSasGBvBGKH5FT8HSrAxrsXV4A"
			]
		},
		"contracts/NonfungiblePositionManager/PoolAddress.sol": {
			"keccak256": "0x03817bb8cedc281e26ca28124adda283c6e011896223f7828f1160d0fb01bc8d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://4701272f168a3a67af0f22cfd01dd81e8288f05ccb6bdc48bad75f6a494eb2ce",
				"dweb:/ipfs/QmcYTo3UQ8QAJ435h82zAYK7gWZXHAvFQHpE7aqqVKqiPZ"
			]
		},
		"contracts/NonfungiblePositionManager/PoolInitializer.sol": {
			"keccak256": "0x4481b0900af37ac8f3898836a7e0e9751a5e015a6fbe77501593c444e100c876",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://24cd528ea3f8d41141be8e5e5573ca9f6720c4b31809554a59bee20be9b8ce10",
				"dweb:/ipfs/QmZ3zQFWbjc7zgHb5sMoZph3SwZy5JCzX1PacPf8QKTDqV"
			]
		},
		"contracts/NonfungiblePositionManager/PositionKey.sol": {
			"keccak256": "0x1ef2fea641b75575e8e7621b90b23a8144fd22cb7013d82a592a72ab2af9527f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://5832baa9cccf9763fec921077daf760f6bf90605063e4ddbf21807e09d502b5f",
				"dweb:/ipfs/QmSdbgqjSnFCtBc6xkNCzff4f6KpBqjZ1LJJc6ZA9FboEJ"
			]
		},
		"contracts/NonfungiblePositionManager/SafeMath.sol": {
			"keccak256": "0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f",
				"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K"
			]
		},
		"contracts/NonfungiblePositionManager/SelfPermit.sol": {
			"keccak256": "0xe75c7821d962d5464bca64f42e14a9fee9ded77791281d6475ce90165df8f96d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://76c286657c1d8e0bea91611beade06be4de74686034bd051855be5e731a220c5",
				"dweb:/ipfs/QmQ1VtZ8QNfhrhgMpKPDTesiE5h5FDTuz5NueQ2VSnXkdA"
			]
		},
		"contracts/NonfungiblePositionManager/Strings.sol": {
			"keccak256": "0x08e38e034333372aea8cb1b8846085b7fbab42c6b77a0af464d2c6827827c4f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://22746e9348187309fb4fbd3f79f6ad88787103eac10f24bd18f67257fafdd8ad",
				"dweb:/ipfs/QmSLXfXg8b27Xstq58DFGvCpqgtTqpfrGbLMq19PtEKQJS"
			]
		},
		"contracts/NonfungiblePositionManager/TickMath.sol": {
			"keccak256": "0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a",
				"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8"
			]
		},
		"contracts/NonfungiblePositionManager/TransferHelper.sol": {
			"keccak256": "0xef483909ab4fe061f97e2e055accd2edc77b241421256981fd77b4dc0591bad6",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://7c309cf4c70587c692d36617ad860a96e0c9245d3bfbd62ecf5ca7f55c6511b5",
				"dweb:/ipfs/QmQovogbupQ2NUFy7yqx8af2ZKSxjpWGadfneitumAJxtL"
			]
		}
	},
	"version": 1
}