{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_factory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_WETH9",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "WETH9",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "path",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"name": "quoteExactInput",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenIn",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOut",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					},
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceLimitX96",
						"type": "uint160"
					}
				],
				"name": "quoteExactInputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "path",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"name": "quoteExactOutput",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenIn",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOut",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					},
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceLimitX96",
						"type": "uint160"
					}
				],
				"name": "quoteExactOutputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "amount0Delta",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "amount1Delta",
						"type": "int256"
					},
					{
						"internalType": "bytes",
						"name": "path",
						"type": "bytes"
					}
				],
				"name": "uniswapV3SwapCallback",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute the swap and check the amounts in the callback.",
			"kind": "dev",
			"methods": {
				"quoteExactInput(bytes,uint256)": {
					"params": {
						"amountIn": "The amount of the first token to swap",
						"path": "The path of the swap, i.e. each token pair and the pool fee"
					},
					"returns": {
						"amountOut": "The amount of the last token that would be received"
					}
				},
				"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
					"params": {
						"amountIn": "The desired input amount",
						"fee": "The fee of the token pool to consider for the pair",
						"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
						"tokenIn": "The token being swapped in",
						"tokenOut": "The token being swapped out"
					},
					"returns": {
						"amountOut": "The amount of `tokenOut` that would be received"
					}
				},
				"quoteExactOutput(bytes,uint256)": {
					"params": {
						"amountOut": "The amount of the last token to receive",
						"path": "The path of the swap, i.e. each token pair and the pool fee"
					},
					"returns": {
						"amountIn": "The amount of first token required to be paid"
					}
				},
				"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
					"params": {
						"amountOut": "The desired output amount",
						"fee": "The fee of the token pool to consider for the pair",
						"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
						"tokenIn": "The token being swapped in",
						"tokenOut": "The token being swapped out"
					},
					"returns": {
						"amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
					}
				},
				"uniswapV3SwapCallback(int256,int256,bytes)": {
					"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
					"params": {
						"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
						"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
						"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
					}
				}
			},
			"stateVariables": {
				"amountOutCached": {
					"details": "Transient storage variable used to check a safety condition in exact output swaps."
				}
			},
			"title": "Provides quotes for swaps",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"quoteExactInput(bytes,uint256)": {
					"notice": "Returns the amount out received for a given exact input swap without executing the swap"
				},
				"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
					"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
				},
				"quoteExactOutput(bytes,uint256)": {
					"notice": "Returns the amount in required for a given exact output swap without executing the swap"
				},
				"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
					"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
				},
				"uniswapV3SwapCallback(int256,int256,bytes)": {
					"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
				}
			},
			"notice": "Allows getting the expected amount out or amount in for a given swap without executing the swap",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Quoter/Quoter.sol": "Quoter"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100000
		},
		"remappings": []
	},
	"sources": {
		"contracts/Quoter/BytesLib.sol": {
			"keccak256": "0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc",
				"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH"
			]
		},
		"contracts/Quoter/CallbackValidation.sol": {
			"keccak256": "0x1e5aad4fae80f588e31d55a691ad677ddb65dfbd3a0753e02c7b3f722e33b1d6",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a5aa11a1c307f5b8b0264e890808c36c41f303ec7441a22e9f2aaee046f44bce",
				"dweb:/ipfs/QmbsGgFNqQPwQo5hXEey7P9Uq8JYvHnVtrmsHSmWQiDMLR"
			]
		},
		"contracts/Quoter/IPeripheryImmutableState.sol": {
			"keccak256": "0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f",
				"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127"
			]
		},
		"contracts/Quoter/IQuoter.sol": {
			"keccak256": "0xabe1e7831b0e4c3fe78ab89b5dd46d75d05e74d21ebd19b898f3605f455b39d8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://7bace6abd0dd8fe9038ea95336107b7f40adefed93f347a1d726eefe46a27c85",
				"dweb:/ipfs/QmYsCNTJPU87a8todV5NCvZyMzzx8EaJCrEKKeywSnPBDd"
			]
		},
		"contracts/Quoter/IUniswapV3Pool.sol": {
			"keccak256": "0xa3fb68245ed4df4df4d47f9111243a7f7476e1b61649198b8874e0257dae1308",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://56a7cb26aab70bf78ecbc3e170a794964ebd74d14f64c36831e2b8efc65e40ec",
				"dweb:/ipfs/QmbyWRfTkRCtB9zyQsLY2kWp6HSPR9zdS45ZzXSn539LQi"
			]
		},
		"contracts/Quoter/IUniswapV3PoolActions.sol": {
			"keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
				"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
			]
		},
		"contracts/Quoter/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
				"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
			]
		},
		"contracts/Quoter/IUniswapV3PoolEvents.sol": {
			"keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
				"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
			]
		},
		"contracts/Quoter/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
				"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
			]
		},
		"contracts/Quoter/IUniswapV3PoolOwnerActions.sol": {
			"keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
				"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
			]
		},
		"contracts/Quoter/IUniswapV3PoolState.sol": {
			"keccak256": "0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f",
				"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg"
			]
		},
		"contracts/Quoter/IUniswapV3SwapCallback.sol": {
			"keccak256": "0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652",
				"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"
			]
		},
		"contracts/Quoter/Path.sol": {
			"keccak256": "0xd18f02aff3aa26f895ba187bedfbe10d9f8be2b198dcd8a2284c4d89f4743005",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://5833c03271b577f9fd01eb1ac606864352deeef8c2ff6a119f5e0e8e6b8d9fcb",
				"dweb:/ipfs/QmcNj8LwgdkcyQKSr8VUDnFcW2yaV6wbqYnE5xrw3rVGFk"
			]
		},
		"contracts/Quoter/PeripheryImmutableState.sol": {
			"keccak256": "0xf139c1e7a8d09eca8fdcc55b2df1b0c4202e0ebd9048da959e971d180d2fb1a8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8c96a41c7934e90f9d807e2b5847e60a6c80c30c782bcff442997143fe88cddd",
				"dweb:/ipfs/QmSyt8SZgz2LUUKNCz1hfpNbeFwqe5YVsmWH1swPeNsaMK"
			]
		},
		"contracts/Quoter/PoolAddress.sol": {
			"keccak256": "0x03817bb8cedc281e26ca28124adda283c6e011896223f7828f1160d0fb01bc8d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://4701272f168a3a67af0f22cfd01dd81e8288f05ccb6bdc48bad75f6a494eb2ce",
				"dweb:/ipfs/QmcYTo3UQ8QAJ435h82zAYK7gWZXHAvFQHpE7aqqVKqiPZ"
			]
		},
		"contracts/Quoter/Quoter.sol": {
			"keccak256": "0x54a75cdb51c3ed0a1e70afe1d22acf7f3e30cfe5adbdab6a78c50a989727aab5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://7d33081d70bf08a2d697d2c11b493eadada770d9dc59d8439e6b81c8fb3c1f69",
				"dweb:/ipfs/QmX2zytRibiRHvQ1xjJA5Dz1Kx51MyTf3NujuGZi33gt6A"
			]
		},
		"contracts/Quoter/SafeCast.sol": {
			"keccak256": "0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869",
				"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU"
			]
		},
		"contracts/Quoter/TickMath.sol": {
			"keccak256": "0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a",
				"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8"
			]
		}
	},
	"version": 1
}