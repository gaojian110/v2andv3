{
	"id": "302c072c2f223650a9577a2081ea73b3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Quoter/Quoter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport './SafeCast.sol';\nimport './TickMath.sol';\nimport './IUniswapV3SwapCallback.sol';\n\nimport './IQuoter.sol';\nimport './PeripheryImmutableState.sol';\nimport './Path.sol';\nimport './PoolAddress.sol';\nimport './CallbackValidation.sol';\n\n/// @title Provides quotes for swaps\n/// @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\n/// @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\n/// the swap and check the amounts in the callback.\ncontract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {\n    using Path for bytes;\n    using SafeCast for uint256;\n\n    /// @dev Transient storage variable used to check a safety condition in exact output swaps.\n    uint256 private amountOutCached;\n\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\n\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) private view returns (IUniswapV3Pool) {\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\n    }\n\n    /// @inheritdoc IUniswapV3SwapCallback\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes memory path\n    ) external view override {\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\n        (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\n\n        (bool isExactInput, uint256 amountToPay, uint256 amountReceived) =\n            amount0Delta > 0\n                ? (tokenIn < tokenOut, uint256(amount0Delta), uint256(-amount1Delta))\n                : (tokenOut < tokenIn, uint256(amount1Delta), uint256(-amount0Delta));\n        if (isExactInput) {\n            assembly {\n                let ptr := mload(0x40)\n                mstore(ptr, amountReceived)\n                revert(ptr, 32)\n            }\n        } else {\n            // if the cache has been populated, ensure that the full output amount has been received\n            if (amountOutCached != 0) require(amountReceived == amountOutCached);\n            assembly {\n                let ptr := mload(0x40)\n                mstore(ptr, amountToPay)\n                revert(ptr, 32)\n            }\n        }\n    }\n\n    /// @dev Parses a revert reason that should contain the numeric quote\n    function parseRevertReason(bytes memory reason) private pure returns (uint256) {\n        if (reason.length != 32) {\n            if (reason.length < 68) revert('Unexpected error');\n            assembly {\n                reason := add(reason, 0x04)\n            }\n            revert(abi.decode(reason, (string)));\n        }\n        return abi.decode(reason, (uint256));\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) public override returns (uint256 amountOut) {\n        bool zeroForOne = tokenIn < tokenOut;\n\n        try\n            getPool(tokenIn, tokenOut, fee).swap(\n                address(this), // address(0) might cause issues with some tokens\n                zeroForOne,\n                amountIn.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encodePacked(tokenIn, fee, tokenOut)\n            )\n        {} catch (bytes memory reason) {\n            return parseRevertReason(reason);\n        }\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {\n        while (true) {\n            bool hasMultiplePools = path.hasMultiplePools();\n\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            amountIn = quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0);\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                path = path.skipToken();\n            } else {\n                return amountIn;\n            }\n        }\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) public override returns (uint256 amountIn) {\n        bool zeroForOne = tokenIn < tokenOut;\n\n        // if no price limit has been specified, cache the output amount for comparison in the swap callback\n        if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut;\n        try\n            getPool(tokenIn, tokenOut, fee).swap(\n                address(this), // address(0) might cause issues with some tokens\n                zeroForOne,\n                -amountOut.toInt256(),\n                sqrtPriceLimitX96 == 0\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\n                    : sqrtPriceLimitX96,\n                abi.encodePacked(tokenOut, fee, tokenIn)\n            )\n        {} catch (bytes memory reason) {\n            if (sqrtPriceLimitX96 == 0) delete amountOutCached; // clear cache\n            return parseRevertReason(reason);\n        }\n    }\n\n    /// @inheritdoc IQuoter\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {\n        while (true) {\n            bool hasMultiplePools = path.hasMultiplePools();\n\n            (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool();\n\n            // the inputs of prior swaps become the outputs of subsequent ones\n            amountOut = quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0);\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                path = path.skipToken();\n            } else {\n                return amountOut;\n            }\n        }\n    }\n}\n"
			},
			"contracts/Quoter/CallbackValidation.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport './IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
			},
			"contracts/Quoter/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xf1804c752c7c65cc02f2ee3526f62cd20f9f0f6b31c1608c7d7504d2c177bc23;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
			},
			"contracts/Quoter/Path.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
			},
			"contracts/Quoter/PeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport './IPeripheryImmutableState.sol';\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override factory;\n    /// @inheritdoc IPeripheryImmutableState\n    address public immutable override WETH9;\n\n    constructor(address _factory, address _WETH9) {\n        factory = _factory;\n        WETH9 = _WETH9;\n    }\n}\n"
			},
			"contracts/Quoter/IQuoter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
			},
			"contracts/Quoter/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"contracts/Quoter/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"contracts/Quoter/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
			},
			"contracts/Quoter/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"contracts/Quoter/BytesLib.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
			},
			"contracts/Quoter/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './IUniswapV3PoolImmutables.sol';\nimport './IUniswapV3PoolState.sol';\nimport './IUniswapV3PoolDerivedState.sol';\nimport './IUniswapV3PoolActions.sol';\nimport './IUniswapV3PoolOwnerActions.sol';\nimport './IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"contracts/Quoter/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"contracts/Quoter/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"contracts/Quoter/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"contracts/Quoter/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"contracts/Quoter/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"contracts/Quoter/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 100000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/Quoter/BytesLib.sol": {
				"BytesLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/BytesLib.sol\":376:4201  library BytesLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/BytesLib.sol\":376:4201  library BytesLib {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206af54eed80b76583b98aa8dc8a4ec20dd9033b41b1dfdbc93bcf3435b31e838164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206af54eed80b76583b98aa8dc8a4ec20dd9033b41b1dfdbc93bcf3435b31e838164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0xF54EED80B76583B98AA8DC DUP11 0x4E 0xC2 0xD 0xD9 SUB EXTCODESIZE COINBASE 0xB1 0xDF 0xDB 0xC9 EXTCODESIZE 0xCF CALLVALUE CALLDATALOAD 0xB3 0x1E DUP4 DUP2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "376:3825:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206af54eed80b76583b98aa8dc8a4ec20dd9033b41b1dfdbc93bcf3435b31e838164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0xF54EED80B76583B98AA8DC DUP11 0x4E 0xC2 0xD 0xD9 SUB EXTCODESIZE COINBASE 0xB1 0xDF 0xDB 0xC9 EXTCODESIZE 0xCF CALLVALUE CALLDATALOAD 0xB3 0x1E DUP4 DUP2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "376:3825:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"slice(bytes memory,uint256,uint256)": "infinite",
								"toAddress(bytes memory,uint256)": "infinite",
								"toUint24(bytes memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 376,
									"end": 4201,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206af54eed80b76583b98aa8dc8a4ec20dd9033b41b1dfdbc93bcf3435b31e838164736f6c63430007060033",
									".code": [
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 376,
											"end": 4201,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/BytesLib.sol\":{\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc\",\"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Quoter/CallbackValidation.sol": {
				"CallbackValidation": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/CallbackValidation.sol\":198:1434  library CallbackValidation {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/CallbackValidation.sol\":198:1434  library CallbackValidation {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b4130cc4a93f1de25aeb32d82cfce277e897fca050760a81afb40f9c9287f2c264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4130cc4a93f1de25aeb32d82cfce277e897fca050760a81afb40f9c9287f2c264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 SGT 0xC 0xC4 0xA9 EXTCODEHASH SAR 0xE2 GAS 0xEB ORIGIN 0xD8 0x2C 0xFC 0xE2 PUSH24 0xE897FCA050760A81AFB40F9C9287F2C264736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "198:1236:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4130cc4a93f1de25aeb32d82cfce277e897fca050760a81afb40f9c9287f2c264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 SGT 0xC 0xC4 0xA9 EXTCODEHASH SAR 0xE2 GAS 0xEB ORIGIN 0xD8 0x2C 0xFC 0xE2 PUSH24 0xE897FCA050760A81AFB40F9C9287F2C264736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "198:1236:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"verifyCallback(address,address,address,uint24)": "infinite",
								"verifyCallback(address,struct PoolAddress.PoolKey memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 198,
									"end": 1434,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b4130cc4a93f1de25aeb32d82cfce277e897fca050760a81afb40f9c9287f2c264736f6c63430007060033",
									".code": [
										{
											"begin": 198,
											"end": 1434,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 198,
											"end": 1434,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides validation for callbacks from Uniswap V3 Pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/CallbackValidation.sol\":\"CallbackValidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/CallbackValidation.sol\":{\"keccak256\":\"0x1e5aad4fae80f588e31d55a691ad677ddb65dfbd3a0753e02c7b3f722e33b1d6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a5aa11a1c307f5b8b0264e890808c36c41f303ec7441a22e9f2aaee046f44bce\",\"dweb:/ipfs/QmbsGgFNqQPwQo5hXEey7P9Uq8JYvHnVtrmsHSmWQiDMLR\"]},\"contracts/Quoter/IUniswapV3Pool.sol\":{\"keccak256\":\"0xa3fb68245ed4df4df4d47f9111243a7f7476e1b61649198b8874e0257dae1308\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://56a7cb26aab70bf78ecbc3e170a794964ebd74d14f64c36831e2b8efc65e40ec\",\"dweb:/ipfs/QmbyWRfTkRCtB9zyQsLY2kWp6HSPR9zdS45ZzXSn539LQi\"]},\"contracts/Quoter/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"contracts/Quoter/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"contracts/Quoter/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"contracts/Quoter/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"contracts/Quoter/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"contracts/Quoter/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"contracts/Quoter/PoolAddress.sol\":{\"keccak256\":\"0x03817bb8cedc281e26ca28124adda283c6e011896223f7828f1160d0fb01bc8d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4701272f168a3a67af0f22cfd01dd81e8288f05ccb6bdc48bad75f6a494eb2ce\",\"dweb:/ipfs/QmcYTo3UQ8QAJ435h82zAYK7gWZXHAvFQHpE7aqqVKqiPZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides validation for callbacks from Uniswap V3 Pools",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IQuoter.sol": {
				"IQuoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "quoteExactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "quoteExactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.",
						"kind": "dev",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"params": {
									"amountIn": "The amount of the first token to swap",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountOut": "The amount of the last token that would be received"
								}
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountIn": "The desired input amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountOut": "The amount of `tokenOut` that would be received"
								}
							},
							"quoteExactOutput(bytes,uint256)": {
								"params": {
									"amountOut": "The amount of the last token to receive",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountIn": "The amount of first token required to be paid"
								}
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountOut": "The desired output amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
								}
							}
						},
						"title": "Quoter Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"quoteExactInput(bytes,uint256)": "cdca1753",
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "f7729d43",
							"quoteExactOutput(bytes,uint256)": "2f80bb1d",
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "30d07f21"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountIn\":\"The desired input amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\"}},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountOut\":\"The desired output amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\"}}},\"title\":\"Quoter Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"}},\"notice\":\"Supports quoting the calculated amounts from exact input or exact output swaps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IQuoter.sol\":\"IQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IQuoter.sol\":{\"keccak256\":\"0xabe1e7831b0e4c3fe78ab89b5dd46d75d05e74d21ebd19b898f3605f455b39d8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7bace6abd0dd8fe9038ea95336107b7f40adefed93f347a1d726eefe46a27c85\",\"dweb:/ipfs/QmYsCNTJPU87a8todV5NCvZyMzzx8EaJCrEKKeywSnPBDd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"notice": "Returns the amount out received for a given exact input swap without executing the swap"
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
							},
							"quoteExactOutput(bytes,uint256)": {
								"notice": "Returns the amount in required for a given exact output swap without executing the swap"
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
							}
						},
						"notice": "Supports quoting the calculated amounts from exact input or exact output swaps",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3Pool.sol\":{\"keccak256\":\"0xa3fb68245ed4df4df4d47f9111243a7f7476e1b61649198b8874e0257dae1308\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://56a7cb26aab70bf78ecbc3e170a794964ebd74d14f64c36831e2b8efc65e40ec\",\"dweb:/ipfs/QmbyWRfTkRCtB9zyQsLY2kWp6HSPR9zdS45ZzXSn539LQi\"]},\"contracts/Quoter/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"contracts/Quoter/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"contracts/Quoter/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"contracts/Quoter/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"contracts/Quoter/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"contracts/Quoter/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"contracts/Quoter/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"contracts/Quoter/Path.sol": {
				"Path": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"ADDR_SIZE": {
								"details": "The length of the bytes encoded address"
							},
							"FEE_SIZE": {
								"details": "The length of the bytes encoded fee"
							},
							"MULTIPLE_POOLS_MIN_LENGTH": {
								"details": "The minimum length of an encoding that contains 2 or more pools"
							},
							"NEXT_OFFSET": {
								"details": "The offset of a single token address and pool fee"
							},
							"POP_OFFSET": {
								"details": "The offset of an encoded pool key"
							}
						},
						"title": "Functions for manipulating path data for multihop swaps",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/Path.sol\":164:2399  library Path {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/Path.sol\":164:2399  library Path {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e6562f2a6567c1de00703614760b57037d6b28a8f6c52a0905f45e9a8972824364736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6562f2a6567c1de00703614760b57037d6b28a8f6c52a0905f45e9a8972824364736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 JUMP 0x2F 0x2A PUSH6 0x67C1DE007036 EQ PUSH23 0xB57037D6B28A8F6C52A0905F45E9A8972824364736F6C PUSH4 0x43000706 STOP CALLER ",
							"sourceMap": "164:2235:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6562f2a6567c1de00703614760b57037d6b28a8f6c52a0905f45e9a8972824364736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 JUMP 0x2F 0x2A PUSH6 0x67C1DE007036 EQ PUSH23 0xB57037D6B28A8F6C52A0905F45E9A8972824364736F6C PUSH4 0x43000706 STOP CALLER ",
							"sourceMap": "164:2235:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeFirstPool(bytes memory)": "infinite",
								"getFirstPool(bytes memory)": "infinite",
								"hasMultiplePools(bytes memory)": "infinite",
								"skipToken(bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "INVALID",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 164,
									"end": 2399,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e6562f2a6567c1de00703614760b57037d6b28a8f6c52a0905f45e9a8972824364736f6c63430007060033",
									".code": [
										{
											"begin": 164,
											"end": 2399,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 164,
											"end": 2399,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"MULTIPLE_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_OFFSET\":{\"details\":\"The offset of a single token address and pool fee\"},\"POP_OFFSET\":{\"details\":\"The offset of an encoded pool key\"}},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/Path.sol\":\"Path\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/BytesLib.sol\":{\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc\",\"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH\"]},\"contracts/Quoter/Path.sol\":{\"keccak256\":\"0xd18f02aff3aa26f895ba187bedfbe10d9f8be2b198dcd8a2284c4d89f4743005\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5833c03271b577f9fd01eb1ac606864352deeef8c2ff6a119f5e0e8e6b8d9fcb\",\"dweb:/ipfs/QmcNj8LwgdkcyQKSr8VUDnFcW2yaV6wbqYnE5xrw3rVGFk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Quoter/PeripheryImmutableState.sol": {
				"PeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"WETH9": {
								"return": "Returns the address of WETH9"
							},
							"factory": {
								"return": "Returns the address of the Uniswap V3 factory"
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/PeripheryImmutableState.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/Quoter/PeripheryImmutableState.sol\":{\"keccak256\":\"0xf139c1e7a8d09eca8fdcc55b2df1b0c4202e0ebd9048da959e971d180d2fb1a8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8c96a41c7934e90f9d807e2b5847e60a6c80c30c782bcff442997143fe88cddd\",\"dweb:/ipfs/QmSyt8SZgz2LUUKNCz1hfpNbeFwqe5YVsmWH1swPeNsaMK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Immutable state used by periphery contracts",
						"version": 1
					}
				}
			},
			"contracts/Quoter/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/PoolAddress.sol\":167:1819  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/PoolAddress.sol\":167:1819  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201884fa55f3e3f9e5a1d6be68b668be0ed71b244444010eeb601e277d89773b9064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201884fa55f3e3f9e5a1d6be68b668be0ed71b244444010eeb601e277d89773b9064736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR DUP5 STATICCALL SSTORE RETURN 0xE3 0xF9 0xE5 LOG1 0xD6 0xBE PUSH9 0xB668BE0ED71B244444 ADD 0xE 0xEB PUSH1 0x1E 0x27 PUSH30 0x89773B9064736F6C63430007060033000000000000000000000000000000 ",
							"sourceMap": "167:1652:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201884fa55f3e3f9e5a1d6be68b668be0ed71b244444010eeb601e277d89773b9064736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR DUP5 STATICCALL SSTORE RETURN 0xE3 0xF9 0xE5 LOG1 0xD6 0xBE PUSH9 0xB668BE0ED71B244444 ADD 0xE 0xEB PUSH1 0x1E 0x27 PUSH30 0x89773B9064736F6C63430007060033000000000000000000000000000000 ",
							"sourceMap": "167:1652:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "INVALID",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201884fa55f3e3f9e5a1d6be68b668be0ed71b244444010eeb601e277d89773b9064736f6c63430007060033",
									".code": [
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/PoolAddress.sol\":{\"keccak256\":\"0x03817bb8cedc281e26ca28124adda283c6e011896223f7828f1160d0fb01bc8d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4701272f168a3a67af0f22cfd01dd81e8288f05ccb6bdc48bad75f6a494eb2ce\",\"dweb:/ipfs/QmcYTo3UQ8QAJ435h82zAYK7gWZXHAvFQHpE7aqqVKqiPZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Quoter/Quoter.sol": {
				"Quoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_WETH9",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "quoteExactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "quoteExactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute the swap and check the amounts in the callback.",
						"kind": "dev",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"params": {
									"amountIn": "The amount of the first token to swap",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountOut": "The amount of the last token that would be received"
								}
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountIn": "The desired input amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountOut": "The amount of `tokenOut` that would be received"
								}
							},
							"quoteExactOutput(bytes,uint256)": {
								"params": {
									"amountOut": "The amount of the last token to receive",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountIn": "The amount of first token required to be paid"
								}
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountOut": "The desired output amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"stateVariables": {
							"amountOutCached": {
								"details": "Transient storage variable used to check a safety condition in exact output swaps."
							}
						},
						"title": "Provides quotes for swaps",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/Quoter.sol\":642:6363  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/Quoter/Quoter.sol\":917:1007  constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n  not(sub(shl(0x60, 0x01), 0x01))\n    /* \"contracts/Quoter/PeripheryImmutableState.sol\":510:528  factory = _factory */\n  0x60\n  swap3\n  dup4\n  shl\n  dup2\n  and\n  0x80\n  mstore\n    /* \"contracts/Quoter/PeripheryImmutableState.sol\":538:552  WETH9 = _WETH9 */\n  swap2\n  shl\n  and\n  0xa0\n  mstore\n    /* \"contracts/Quoter/Quoter.sol\":642:6363  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {... */\n  jump(tag_9)\n    /* \"#utility.yul\":14:193   */\ntag_10:\n    /* \"#utility.yul\":95:108   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":137:168   */\n  dup2\n  and\n    /* \"#utility.yul\":127:169   */\n  dup2\n  eq\n    /* \"#utility.yul\":117:119   */\n  tag_12\n  jumpi\n    /* \"#utility.yul\":183:184   */\n  0x00\n    /* \"#utility.yul\":180:181   */\n  dup1\n    /* \"#utility.yul\":173:185   */\n  revert\n    /* \"#utility.yul\":117:119   */\ntag_12:\n    /* \"#utility.yul\":76:193   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":198:505   */\ntag_3:\n  0x00\n  dup1\n    /* \"#utility.yul\":338:340   */\n  0x40\n    /* \"#utility.yul\":326:335   */\n  dup4\n    /* \"#utility.yul\":317:324   */\n  dup6\n    /* \"#utility.yul\":313:336   */\n  sub\n    /* \"#utility.yul\":309:341   */\n  slt\n    /* \"#utility.yul\":306:308   */\n  iszero\n  tag_14\n  jumpi\n    /* \"#utility.yul\":359:365   */\n  dup2\n    /* \"#utility.yul\":351:357   */\n  dup3\n    /* \"#utility.yul\":344:366   */\n  revert\n    /* \"#utility.yul\":306:308   */\ntag_14:\n    /* \"#utility.yul\":387:429   */\n  tag_15\n    /* \"#utility.yul\":419:428   */\n  dup4\n    /* \"#utility.yul\":387:429   */\n  tag_10\n  jump\t// in\ntag_15:\n    /* \"#utility.yul\":377:429   */\n  swap2\n  pop\n    /* \"#utility.yul\":448:499   */\n  tag_16\n    /* \"#utility.yul\":495:497   */\n  0x20\n    /* \"#utility.yul\":484:493   */\n  dup5\n    /* \"#utility.yul\":480:498   */\n  add\n    /* \"#utility.yul\":448:499   */\n  tag_10\n  jump\t// in\ntag_16:\n    /* \"#utility.yul\":438:499   */\n  swap1\n  pop\n    /* \"#utility.yul\":296:505   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\ntag_9:\n    /* \"contracts/Quoter/Quoter.sol\":642:6363  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {... */\n  shr(0x60, mload(0x80))\n  shr(0x60, mload(0xa0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x94bf69fb65508f6e4ddb8e9d68af175b29ca55b7385169421c8fce2c4390b244\")\n  assignImmutable(\"0x2c5c3a7f960335d25bf882a63919889d98f0b7566195d92a493f94d76e14e9b5\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/Quoter.sol\":642:6363  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc45a0155\n      gt\n      tag_10\n      jumpi\n      dup1\n      0xc45a0155\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xcdca1753\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xf7729d43\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_10:\n      dup1\n      0x2f80bb1d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x30d07f21\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4aa4a4fc\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Quoter/Quoter.sol\":5696:6361  function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {... */\n    tag_3:\n      tag_11\n      tag_12\n      calldatasize\n      0x04\n      tag_13\n      jump\t// in\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Quoter/Quoter.sol\":4588:5662  function quoteExactOutputSingle(... */\n    tag_4:\n      tag_11\n      tag_18\n      calldatasize\n      0x04\n      tag_19\n      jump\t// in\n    tag_18:\n      tag_20\n      jump\t// in\n        /* \"contracts/Quoter/PeripheryImmutableState.sol\":408:447  address public immutable override WETH9 */\n    tag_5:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n        /* \"contracts/Quoter/PeripheryImmutableState.sol\":316:357  address public immutable override factory */\n    tag_6:\n      tag_22\n      tag_27\n      jump\t// in\n        /* \"contracts/Quoter/Quoter.sol\":3894:4554  function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {... */\n    tag_7:\n      tag_11\n      tag_30\n      calldatasize\n      0x04\n      tag_13\n      jump\t// in\n    tag_30:\n      tag_31\n      jump\t// in\n        /* \"contracts/Quoter/Quoter.sol\":3042:3860  function quoteExactInputSingle(... */\n    tag_8:\n      tag_11\n      tag_34\n      calldatasize\n      0x04\n      tag_19\n      jump\t// in\n    tag_34:\n      tag_35\n      jump\t// in\n        /* \"contracts/Quoter/Quoter.sol\":1311:2556  function uniswapV3SwapCallback(... */\n    tag_9:\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"contracts/Quoter/Quoter.sol\":5696:6361  function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {... */\n    tag_14:\n        /* \"contracts/Quoter/Quoter.sol\":5787:5803  uint256 amountIn */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":5815:6355  while (true) {... */\n    tag_42:\n        /* \"contracts/Quoter/Quoter.sol\":5842:5863  bool hasMultiplePools */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":5866:5889  path.hasMultiplePools() */\n      tag_44\n        /* \"contracts/Quoter/Quoter.sol\":5866:5870  path */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":5866:5887  path.hasMultiplePools */\n      tag_45\n        /* \"contracts/Quoter/Quoter.sol\":5866:5889  path.hasMultiplePools() */\n      jump\t// in\n    tag_44:\n        /* \"contracts/Quoter/Quoter.sol\":5842:5889  bool hasMultiplePools = path.hasMultiplePools() */\n      swap1\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":5905:5921  address tokenOut */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":5923:5938  address tokenIn */\n      dup1\n        /* \"contracts/Quoter/Quoter.sol\":5940:5950  uint24 fee */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":5954:5976  path.decodeFirstPool() */\n      tag_46\n        /* \"contracts/Quoter/Quoter.sol\":5954:5958  path */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":5954:5974  path.decodeFirstPool */\n      tag_47\n        /* \"contracts/Quoter/Quoter.sol\":5954:5976  path.decodeFirstPool() */\n      jump\t// in\n    tag_46:\n        /* \"contracts/Quoter/Quoter.sol\":5904:5976  (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":6082:6142  quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0) */\n      tag_48\n        /* \"contracts/Quoter/Quoter.sol\":6105:6112  tokenIn */\n      dup3\n        /* \"contracts/Quoter/Quoter.sol\":6114:6122  tokenOut */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":6124:6127  fee */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":6129:6138  amountOut */\n      dup10\n        /* \"contracts/Quoter/Quoter.sol\":6140:6141  0 */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":6082:6104  quoteExactOutputSingle */\n      tag_20\n        /* \"contracts/Quoter/Quoter.sol\":6082:6142  quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0) */\n      jump\t// in\n    tag_48:\n        /* \"contracts/Quoter/Quoter.sol\":6070:6142  amountOut = quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0) */\n      swap6\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":6216:6232  hasMultiplePools */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":6212:6345  if (hasMultiplePools) {... */\n      iszero\n      tag_49\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":6259:6275  path.skipToken() */\n      tag_50\n        /* \"contracts/Quoter/Quoter.sol\":6259:6263  path */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":6259:6273  path.skipToken */\n      tag_51\n        /* \"contracts/Quoter/Quoter.sol\":6259:6275  path.skipToken() */\n      jump\t// in\n    tag_50:\n        /* \"contracts/Quoter/Quoter.sol\":6252:6275  path = path.skipToken() */\n      swap7\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":6212:6345  if (hasMultiplePools) {... */\n      jump(tag_52)\n    tag_49:\n        /* \"contracts/Quoter/Quoter.sol\":6321:6330  amountOut */\n      dup6\n        /* \"contracts/Quoter/Quoter.sol\":6314:6330  return amountOut */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_43)\n        /* \"contracts/Quoter/Quoter.sol\":6212:6345  if (hasMultiplePools) {... */\n    tag_52:\n        /* \"contracts/Quoter/Quoter.sol\":5815:6355  while (true) {... */\n      pop\n      pop\n      pop\n      pop\n      jump(tag_42)\n    tag_43:\n        /* \"contracts/Quoter/Quoter.sol\":5696:6361  function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Quoter/Quoter.sol\":4588:5662  function quoteExactOutputSingle(... */\n    tag_20:\n        /* \"contracts/Quoter/Quoter.sol\":4784:4800  uint256 amountIn */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4830:4848  tokenIn < tokenOut */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup1\n      dup7\n      and\n      dup8\n      dup3\n      and\n      lt\n      swap1\n        /* \"contracts/Quoter/Quoter.sol\":4972:4994  sqrtPriceLimitX96 == 0 */\n      dup4\n      and\n        /* \"contracts/Quoter/Quoter.sol\":4968:5023  if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut */\n      tag_54\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":4996:5011  amountOutCached */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4996:5023  amountOutCached = amountOut */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/Quoter/Quoter.sol\":4968:5023  if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut */\n    tag_54:\n        /* \"contracts/Quoter/Quoter.sol\":5049:5080  getPool(tokenIn, tokenOut, fee) */\n      tag_55\n        /* \"contracts/Quoter/Quoter.sol\":5057:5064  tokenIn */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":5066:5074  tokenOut */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":5076:5079  fee */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":5049:5056  getPool */\n      tag_56\n        /* \"contracts/Quoter/Quoter.sol\":5049:5080  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_55:\n        /* \"contracts/Quoter/Quoter.sol\":5049:5085  getPool(tokenIn, tokenOut, fee).swap */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x128acb08\n        /* \"contracts/Quoter/Quoter.sol\":5111:5115  this */\n      address\n        /* \"contracts/Quoter/Quoter.sol\":5184:5194  zeroForOne */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":5213:5233  amountOut.toInt256() */\n      tag_57\n        /* \"contracts/Quoter/Quoter.sol\":5213:5222  amountOut */\n      dup9\n        /* \"contracts/Quoter/Quoter.sol\":5213:5231  amountOut.toInt256 */\n      tag_58\n        /* \"contracts/Quoter/Quoter.sol\":5213:5233  amountOut.toInt256() */\n      jump\t// in\n    tag_57:\n        /* \"contracts/Quoter/Quoter.sol\":5212:5233  -amountOut.toInt256() */\n      0x00\n      sub\n        /* \"contracts/Quoter/Quoter.sol\":5251:5273  sqrtPriceLimitX96 == 0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup9\n      and\n      iszero\n        /* \"contracts/Quoter/Quoter.sol\":5251:5408  sqrtPriceLimitX96 == 0... */\n      tag_59\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":5391:5408  sqrtPriceLimitX96 */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":5251:5408  sqrtPriceLimitX96 == 0... */\n      jump(tag_62)\n    tag_59:\n        /* \"contracts/Quoter/Quoter.sol\":5297:5307  zeroForOne */\n      dup6\n        /* \"contracts/Quoter/Quoter.sol\":5297:5367  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_61\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":5340:5367  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/Quoter/Quoter.sol\":5297:5367  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_62)\n    tag_61:\n        /* \"contracts/Quoter/Quoter.sol\":5310:5337  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/Quoter/Quoter.sol\":5297:5367  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_62:\n        /* \"contracts/Quoter/Quoter.sol\":5443:5451  tokenOut */\n      dup12\n        /* \"contracts/Quoter/Quoter.sol\":5453:5456  fee */\n      dup12\n        /* \"contracts/Quoter/Quoter.sol\":5458:5465  tokenIn */\n      dup15\n        /* \"contracts/Quoter/Quoter.sol\":5426:5466  abi.encodePacked(tokenOut, fee, tokenIn) */\n      add(0x20, mload(0x40))\n      tag_63\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/Quoter/Quoter.sol\":5049:5480  getPool(tokenIn, tokenOut, fee).swap(... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_65\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_68\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_69\n      swap2\n      dup2\n      add\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      0x01\n    tag_68:\n        /* \"contracts/Quoter/Quoter.sol\":5033:5656  try... */\n      tag_71\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_75\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_74)\n    tag_75:\n      0x60\n      swap2\n      pop\n    tag_74:\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":5538:5560  sqrtPriceLimitX96 == 0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup5\n      and\n        /* \"contracts/Quoter/Quoter.sol\":5534:5584  if (sqrtPriceLimitX96 == 0) delete amountOutCached */\n      tag_76\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":5569:5584  amountOutCached */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":5562:5584  delete amountOutCached */\n      dup1\n      sstore\n        /* \"contracts/Quoter/Quoter.sol\":5534:5584  if (sqrtPriceLimitX96 == 0) delete amountOutCached */\n    tag_76:\n        /* \"contracts/Quoter/Quoter.sol\":5620:5645  parseRevertReason(reason) */\n      tag_77\n        /* \"contracts/Quoter/Quoter.sol\":5638:5644  reason */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":5620:5637  parseRevertReason */\n      tag_78\n        /* \"contracts/Quoter/Quoter.sol\":5620:5645  parseRevertReason(reason) */\n      jump\t// in\n    tag_77:\n        /* \"contracts/Quoter/Quoter.sol\":5613:5645  return parseRevertReason(reason) */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_53)\n        /* \"contracts/Quoter/Quoter.sol\":5033:5656  try... */\n    tag_71:\n      pop\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":4588:5662  function quoteExactOutputSingle(... */\n      pop\n    tag_53:\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Quoter/PeripheryImmutableState.sol\":408:447  address public immutable override WETH9 */\n    tag_23:\n      immutable(\"0x94bf69fb65508f6e4ddb8e9d68af175b29ca55b7385169421c8fce2c4390b244\")\n      dup2\n      jump\t// out\n        /* \"contracts/Quoter/PeripheryImmutableState.sol\":316:357  address public immutable override factory */\n    tag_27:\n      immutable(\"0x2c5c3a7f960335d25bf882a63919889d98f0b7566195d92a493f94d76e14e9b5\")\n      dup2\n      jump\t// out\n        /* \"contracts/Quoter/Quoter.sol\":3894:4554  function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {... */\n    tag_31:\n        /* \"contracts/Quoter/Quoter.sol\":3983:4000  uint256 amountOut */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4012:4548  while (true) {... */\n    tag_81:\n        /* \"contracts/Quoter/Quoter.sol\":4039:4060  bool hasMultiplePools */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4063:4086  path.hasMultiplePools() */\n      tag_83\n        /* \"contracts/Quoter/Quoter.sol\":4063:4067  path */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":4063:4084  path.hasMultiplePools */\n      tag_45\n        /* \"contracts/Quoter/Quoter.sol\":4063:4086  path.hasMultiplePools() */\n      jump\t// in\n    tag_83:\n        /* \"contracts/Quoter/Quoter.sol\":4039:4086  bool hasMultiplePools = path.hasMultiplePools() */\n      swap1\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":4102:4117  address tokenIn */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4119:4135  address tokenOut */\n      dup1\n        /* \"contracts/Quoter/Quoter.sol\":4137:4147  uint24 fee */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4151:4173  path.decodeFirstPool() */\n      tag_84\n        /* \"contracts/Quoter/Quoter.sol\":4151:4155  path */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":4151:4171  path.decodeFirstPool */\n      tag_47\n        /* \"contracts/Quoter/Quoter.sol\":4151:4173  path.decodeFirstPool() */\n      jump\t// in\n    tag_84:\n        /* \"contracts/Quoter/Quoter.sol\":4101:4173  (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":4278:4336  quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0) */\n      tag_85\n        /* \"contracts/Quoter/Quoter.sol\":4300:4307  tokenIn */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":4309:4317  tokenOut */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":4319:4322  fee */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":4324:4332  amountIn */\n      dup10\n        /* \"contracts/Quoter/Quoter.sol\":4334:4335  0 */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":4278:4299  quoteExactInputSingle */\n      tag_35\n        /* \"contracts/Quoter/Quoter.sol\":4278:4336  quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0) */\n      jump\t// in\n    tag_85:\n        /* \"contracts/Quoter/Quoter.sol\":4267:4336  amountIn = quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0) */\n      swap6\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":4410:4426  hasMultiplePools */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":4406:4538  if (hasMultiplePools) {... */\n      iszero\n      tag_49\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":4453:4469  path.skipToken() */\n      tag_87\n        /* \"contracts/Quoter/Quoter.sol\":4453:4457  path */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":4453:4467  path.skipToken */\n      tag_51\n        /* \"contracts/Quoter/Quoter.sol\":4453:4469  path.skipToken() */\n      jump\t// in\n    tag_87:\n        /* \"contracts/Quoter/Quoter.sol\":4446:4469  path = path.skipToken() */\n      swap7\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":4012:4548  while (true) {... */\n      pop\n      pop\n      pop\n      pop\n      jump(tag_81)\n        /* \"contracts/Quoter/Quoter.sol\":3042:3860  function quoteExactInputSingle(... */\n    tag_35:\n        /* \"contracts/Quoter/Quoter.sol\":3236:3253  uint256 amountOut */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":3283:3301  tokenIn < tokenOut */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup1\n      dup7\n      and\n      swap1\n      dup8\n      and\n      lt\n        /* \"contracts/Quoter/Quoter.sol\":3328:3359  getPool(tokenIn, tokenOut, fee) */\n      tag_90\n        /* \"contracts/Quoter/Quoter.sol\":3283:3290  tokenIn */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":3293:3301  tokenOut */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":3355:3358  fee */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":3328:3335  getPool */\n      tag_56\n        /* \"contracts/Quoter/Quoter.sol\":3328:3359  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_90:\n        /* \"contracts/Quoter/Quoter.sol\":3328:3364  getPool(tokenIn, tokenOut, fee).swap */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x128acb08\n        /* \"contracts/Quoter/Quoter.sol\":3390:3394  this */\n      address\n        /* \"contracts/Quoter/Quoter.sol\":3463:3473  zeroForOne */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":3491:3510  amountIn.toInt256() */\n      tag_91\n        /* \"contracts/Quoter/Quoter.sol\":3491:3499  amountIn */\n      dup9\n        /* \"contracts/Quoter/Quoter.sol\":3491:3508  amountIn.toInt256 */\n      tag_58\n        /* \"contracts/Quoter/Quoter.sol\":3491:3510  amountIn.toInt256() */\n      jump\t// in\n    tag_91:\n        /* \"contracts/Quoter/Quoter.sol\":3528:3550  sqrtPriceLimitX96 == 0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup9\n      and\n      iszero\n        /* \"contracts/Quoter/Quoter.sol\":3528:3685  sqrtPriceLimitX96 == 0... */\n      tag_92\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":3668:3685  sqrtPriceLimitX96 */\n      dup8\n        /* \"contracts/Quoter/Quoter.sol\":3528:3685  sqrtPriceLimitX96 == 0... */\n      jump(tag_95)\n    tag_92:\n        /* \"contracts/Quoter/Quoter.sol\":3574:3584  zeroForOne */\n      dup6\n        /* \"contracts/Quoter/Quoter.sol\":3574:3644  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_94\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":3617:3644  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/Quoter/Quoter.sol\":3574:3644  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_95)\n    tag_94:\n        /* \"contracts/Quoter/Quoter.sol\":3587:3614  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/Quoter/Quoter.sol\":3574:3644  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_95:\n        /* \"contracts/Quoter/Quoter.sol\":3720:3727  tokenIn */\n      dup13\n        /* \"contracts/Quoter/Quoter.sol\":3729:3732  fee */\n      dup12\n        /* \"contracts/Quoter/Quoter.sol\":3734:3742  tokenOut */\n      dup14\n        /* \"contracts/Quoter/Quoter.sol\":3703:3743  abi.encodePacked(tokenIn, fee, tokenOut) */\n      add(0x20, mload(0x40))\n      tag_96\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_96:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/Quoter/Quoter.sol\":3328:3757  getPool(tokenIn, tokenOut, fee).swap(... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_97:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_98\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_98:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_99\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_100\n      swap2\n      dup2\n      add\n      swap1\n      tag_70\n      jump\t// in\n    tag_100:\n      0x01\n    tag_99:\n        /* \"contracts/Quoter/Quoter.sol\":3312:3854  try... */\n      tag_71\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_105\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_104)\n    tag_105:\n      0x60\n      swap2\n      pop\n    tag_104:\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":3818:3843  parseRevertReason(reason) */\n      tag_77\n        /* \"contracts/Quoter/Quoter.sol\":3836:3842  reason */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":3818:3835  parseRevertReason */\n      tag_78\n        /* \"contracts/Quoter/Quoter.sol\":3818:3843  parseRevertReason(reason) */\n      jump\t// in\n        /* \"contracts/Quoter/Quoter.sol\":1311:2556  function uniswapV3SwapCallback(... */\n    tag_40:\n        /* \"contracts/Quoter/Quoter.sol\":1489:1490  0 */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1474:1486  amount0Delta */\n      dup4\n        /* \"contracts/Quoter/Quoter.sol\":1474:1490  amount0Delta > 0 */\n      sgt\n        /* \"contracts/Quoter/Quoter.sol\":1474:1510  amount0Delta > 0 || amount1Delta > 0 */\n      dup1\n      tag_109\n      jumpi\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":1509:1510  0 */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1494:1506  amount1Delta */\n      dup3\n        /* \"contracts/Quoter/Quoter.sol\":1494:1510  amount1Delta > 0 */\n      sgt\n        /* \"contracts/Quoter/Quoter.sol\":1474:1510  amount0Delta > 0 || amount1Delta > 0 */\n    tag_109:\n        /* \"contracts/Quoter/Quoter.sol\":1466:1511  require(amount0Delta > 0 || amount1Delta > 0) */\n      tag_110\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_110:\n        /* \"contracts/Quoter/Quoter.sol\":1585:1600  address tokenIn */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1602:1618  address tokenOut */\n      dup1\n        /* \"contracts/Quoter/Quoter.sol\":1620:1630  uint24 fee */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1634:1656  path.decodeFirstPool() */\n      tag_111\n        /* \"contracts/Quoter/Quoter.sol\":1634:1638  path */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":1634:1654  path.decodeFirstPool */\n      tag_47\n        /* \"contracts/Quoter/Quoter.sol\":1634:1656  path.decodeFirstPool() */\n      jump\t// in\n    tag_111:\n        /* \"contracts/Quoter/Quoter.sol\":1584:1656  (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":1666:1732  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      tag_112\n        /* \"contracts/Quoter/Quoter.sol\":1700:1707  factory */\n      immutable(\"0x2c5c3a7f960335d25bf882a63919889d98f0b7566195d92a493f94d76e14e9b5\")\n        /* \"contracts/Quoter/Quoter.sol\":1709:1716  tokenIn */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":1718:1726  tokenOut */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":1728:1731  fee */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":1666:1699  CallbackValidation.verifyCallback */\n      tag_113\n        /* \"contracts/Quoter/Quoter.sol\":1666:1732  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_112:\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":1744:1761  bool isExactInput */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1763:1782  uint256 amountToPay */\n      dup1\n        /* \"contracts/Quoter/Quoter.sol\":1784:1806  uint256 amountReceived */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1837:1838  0 */\n      dup1\n        /* \"contracts/Quoter/Quoter.sol\":1822:1834  amount0Delta */\n      dup10\n        /* \"contracts/Quoter/Quoter.sol\":1822:1838  amount0Delta > 0 */\n      sgt\n        /* \"contracts/Quoter/Quoter.sol\":1822:2010  amount0Delta > 0... */\n      tag_114\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":1955:1962  tokenIn */\n      dup6\n        /* \"contracts/Quoter/Quoter.sol\":1944:1962  tokenOut < tokenIn */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Quoter/Quoter.sol\":1944:1952  tokenOut */\n      dup6\n        /* \"contracts/Quoter/Quoter.sol\":1944:1962  tokenOut < tokenIn */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"contracts/Quoter/Quoter.sol\":1972:1984  amount1Delta */\n      dup9\n        /* \"contracts/Quoter/Quoter.sol\":1996:2008  amount0Delta */\n      dup11\n        /* \"contracts/Quoter/Quoter.sol\":1995:2008  -amount0Delta */\n      0x00\n      sub\n        /* \"contracts/Quoter/Quoter.sol\":1822:2010  amount0Delta > 0... */\n      jump(tag_115)\n    tag_114:\n        /* \"contracts/Quoter/Quoter.sol\":1868:1876  tokenOut */\n      dup5\n        /* \"contracts/Quoter/Quoter.sol\":1858:1876  tokenIn < tokenOut */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Quoter/Quoter.sol\":1858:1865  tokenIn */\n      dup7\n        /* \"contracts/Quoter/Quoter.sol\":1858:1876  tokenIn < tokenOut */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"contracts/Quoter/Quoter.sol\":1886:1898  amount0Delta */\n      dup10\n        /* \"contracts/Quoter/Quoter.sol\":1910:1922  amount1Delta */\n      dup10\n        /* \"contracts/Quoter/Quoter.sol\":1909:1922  -amount1Delta */\n      0x00\n      sub\n        /* \"contracts/Quoter/Quoter.sol\":1822:2010  amount0Delta > 0... */\n    tag_115:\n        /* \"contracts/Quoter/Quoter.sol\":1743:2010  (bool isExactInput, uint256 amountToPay, uint256 amountReceived) =... */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":2024:2036  isExactInput */\n      dup3\n        /* \"contracts/Quoter/Quoter.sol\":2020:2550  if (isExactInput) {... */\n      iszero\n      tag_116\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":2096:2100  0x40 */\n      0x40\n        /* \"contracts/Quoter/Quoter.sol\":2090:2101  mload(0x40) */\n      mload\n        /* \"contracts/Quoter/Quoter.sol\":2130:2144  amountReceived */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2125:2128  ptr */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2118:2145  mstore(ptr, amountReceived) */\n      mstore\n        /* \"contracts/Quoter/Quoter.sol\":2174:2176  32 */\n      0x20\n        /* \"contracts/Quoter/Quoter.sol\":2169:2172  ptr */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2162:2177  revert(ptr, 32) */\n      revert\n        /* \"contracts/Quoter/Quoter.sol\":2061:2191  {... */\n    tag_116:\n        /* \"contracts/Quoter/Quoter.sol\":2326:2341  amountOutCached */\n      sload(0x00)\n        /* \"contracts/Quoter/Quoter.sol\":2326:2346  amountOutCached != 0 */\n      iszero\n        /* \"contracts/Quoter/Quoter.sol\":2322:2390  if (amountOutCached != 0) require(amountReceived == amountOutCached) */\n      tag_119\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":2374:2389  amountOutCached */\n      sload(0x00)\n        /* \"contracts/Quoter/Quoter.sol\":2356:2370  amountReceived */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2356:2389  amountReceived == amountOutCached */\n      eq\n        /* \"contracts/Quoter/Quoter.sol\":2348:2390  require(amountReceived == amountOutCached) */\n      tag_119\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_119:\n        /* \"contracts/Quoter/Quoter.sol\":2448:2452  0x40 */\n      0x40\n        /* \"contracts/Quoter/Quoter.sol\":2442:2453  mload(0x40) */\n      mload\n        /* \"contracts/Quoter/Quoter.sol\":2482:2493  amountToPay */\n      dup3\n        /* \"contracts/Quoter/Quoter.sol\":2477:2480  ptr */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2470:2494  mstore(ptr, amountToPay) */\n      mstore\n        /* \"contracts/Quoter/Quoter.sol\":2523:2525  32 */\n      0x20\n        /* \"contracts/Quoter/Quoter.sol\":2518:2521  ptr */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2511:2526  revert(ptr, 32) */\n      revert\n        /* \"contracts/Quoter/Path.sol\":992:1130  function hasMultiplePools(bytes memory path) internal pure returns (bool) {... */\n    tag_45:\n        /* \"contracts/Quoter/Path.sol\":1083:1094  path.length */\n      mload\n        /* \"contracts/Quoter/Path.sol\":777:801  POP_OFFSET + NEXT_OFFSET */\n      0x42\n      gt\n        /* \"contracts/Quoter/Path.sol\":1083:1123  path.length >= MULTIPLE_POOLS_MIN_LENGTH */\n      iszero\n      swap1\n        /* \"contracts/Quoter/Path.sol\":992:1130  function hasMultiplePools(bytes memory path) internal pure returns (bool) {... */\n      jump\t// out\n        /* \"contracts/Quoter/Path.sol\":1392:1706  function decodeFirstPool(bytes memory path)... */\n    tag_47:\n        /* \"contracts/Quoter/Path.sol\":1496:1510  address tokenA */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/Quoter/Path.sol\":1596:1613  path.toAddress(0) */\n      tag_122\n        /* \"contracts/Quoter/Path.sol\":1596:1600  path */\n      dup5\n        /* \"contracts/Quoter/Path.sol\":1496:1510  address tokenA */\n      dup3\n        /* \"contracts/Quoter/Path.sol\":1596:1610  path.toAddress */\n      tag_123\n        /* \"contracts/Quoter/Path.sol\":1596:1613  path.toAddress(0) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/Quoter/Path.sol\":1587:1613  tokenA = path.toAddress(0) */\n      swap3\n      pop\n        /* \"contracts/Quoter/Path.sol\":1629:1653  path.toUint24(ADDR_SIZE) */\n      tag_124\n        /* \"contracts/Quoter/Path.sol\":1629:1633  path */\n      dup5\n        /* \"contracts/Quoter/Path.sol\":304:306  20 */\n      0x14\n        /* \"contracts/Quoter/Path.sol\":1629:1642  path.toUint24 */\n      tag_125\n        /* \"contracts/Quoter/Path.sol\":1629:1653  path.toUint24(ADDR_SIZE) */\n      jump\t// in\n    tag_124:\n        /* \"contracts/Quoter/Path.sol\":1623:1653  fee = path.toUint24(ADDR_SIZE) */\n      swap1\n      pop\n        /* \"contracts/Quoter/Path.sol\":1672:1699  path.toAddress(NEXT_OFFSET) */\n      tag_126\n        /* \"contracts/Quoter/Path.sol\":1672:1676  path */\n      dup5\n        /* \"contracts/Quoter/Path.sol\":507:527  ADDR_SIZE + FEE_SIZE */\n      0x17\n        /* \"contracts/Quoter/Path.sol\":1672:1686  path.toAddress */\n      tag_123\n        /* \"contracts/Quoter/Path.sol\":1672:1699  path.toAddress(NEXT_OFFSET) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/Quoter/Path.sol\":1663:1699  tokenB = path.toAddress(NEXT_OFFSET) */\n      swap2\n      pop\n        /* \"contracts/Quoter/Path.sol\":1392:1706  function decodeFirstPool(bytes memory path)... */\n      swap2\n      swap4\n      swap1\n      swap3\n      pop\n      jump\t// out\n        /* \"contracts/Quoter/Path.sol\":2248:2397  function skipToken(bytes memory path) internal pure returns (bytes memory) {... */\n    tag_51:\n        /* \"contracts/Quoter/Path.sol\":2364:2375  path.length */\n      dup1\n      mload\n        /* \"contracts/Quoter/Path.sol\":2309:2321  bytes memory */\n      0x60\n      swap1\n        /* \"contracts/Quoter/Path.sol\":2340:2390  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      tag_43\n      swap1\n        /* \"contracts/Quoter/Path.sol\":2364:2368  path */\n      dup4\n      swap1\n        /* \"contracts/Quoter/Path.sol\":507:527  ADDR_SIZE + FEE_SIZE */\n      0x17\n      swap1\n        /* \"contracts/Quoter/Path.sol\":2364:2389  path.length - NEXT_OFFSET */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9\n      add\n        /* \"contracts/Quoter/Path.sol\":2340:2350  path.slice */\n      tag_129\n        /* \"contracts/Quoter/Path.sol\":2340:2390  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      jump\t// in\n        /* \"contracts/Quoter/Quoter.sol\":1013:1262  function getPool(... */\n    tag_56:\n        /* \"contracts/Quoter/Quoter.sol\":1126:1140  IUniswapV3Pool */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":1174:1254  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_131\n        /* \"contracts/Quoter/Quoter.sol\":1201:1208  factory */\n      immutable(\"0x2c5c3a7f960335d25bf882a63919889d98f0b7566195d92a493f94d76e14e9b5\")\n        /* \"contracts/Quoter/Quoter.sol\":1210:1253  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_132\n        /* \"contracts/Quoter/Quoter.sol\":1233:1239  tokenA */\n      dup7\n        /* \"contracts/Quoter/Quoter.sol\":1241:1247  tokenB */\n      dup7\n        /* \"contracts/Quoter/Quoter.sol\":1249:1252  fee */\n      dup7\n        /* \"contracts/Quoter/Quoter.sol\":1210:1232  PoolAddress.getPoolKey */\n      tag_133\n        /* \"contracts/Quoter/Quoter.sol\":1210:1253  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_132:\n        /* \"contracts/Quoter/Quoter.sol\":1174:1200  PoolAddress.computeAddress */\n      tag_134\n        /* \"contracts/Quoter/Quoter.sol\":1174:1254  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n    tag_131:\n        /* \"contracts/Quoter/Quoter.sol\":1152:1255  return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee))) */\n      swap5\n        /* \"contracts/Quoter/Quoter.sol\":1013:1262  function getPool(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Quoter/SafeCast.sol\":924:1045  function toInt256(uint256 y) internal pure returns (int256 z) {... */\n    tag_58:\n        /* \"contracts/Quoter/SafeCast.sol\":976:984  int256 z */\n      0x00\n        /* \"contracts/Quoter/SafeCast.sol\":1008:1014  2**255 */\n      0x8000000000000000000000000000000000000000000000000000000000000000\n        /* \"contracts/Quoter/SafeCast.sol\":1004:1005  y */\n      dup3\n        /* \"contracts/Quoter/SafeCast.sol\":1004:1014  y < 2**255 */\n      lt\n        /* \"contracts/Quoter/SafeCast.sol\":996:1015  require(y < 2**255) */\n      tag_136\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_136:\n      pop\n        /* \"contracts/Quoter/SafeCast.sol\":1036:1037  y */\n      swap1\n        /* \"contracts/Quoter/SafeCast.sol\":924:1045  function toInt256(uint256 y) internal pure returns (int256 z) {... */\n      jump\t// out\n        /* \"contracts/Quoter/Quoter.sol\":2636:3008  function parseRevertReason(bytes memory reason) private pure returns (uint256) {... */\n    tag_78:\n        /* \"contracts/Quoter/Quoter.sol\":2706:2713  uint256 */\n      0x00\n        /* \"contracts/Quoter/Quoter.sol\":2729:2735  reason */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2729:2742  reason.length */\n      mload\n        /* \"contracts/Quoter/Quoter.sol\":2746:2748  32 */\n      0x20\n        /* \"contracts/Quoter/Quoter.sol\":2729:2748  reason.length != 32 */\n      eq\n        /* \"contracts/Quoter/Quoter.sol\":2725:2956  if (reason.length != 32) {... */\n      tag_138\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":2784:2786  68 */\n      0x44\n        /* \"contracts/Quoter/Quoter.sol\":2768:2774  reason */\n      dup3\n        /* \"contracts/Quoter/Quoter.sol\":2768:2781  reason.length */\n      mload\n        /* \"contracts/Quoter/Quoter.sol\":2768:2786  reason.length < 68 */\n      lt\n        /* \"contracts/Quoter/Quoter.sol\":2764:2814  if (reason.length < 68) revert('Unexpected error') */\n      iszero\n      tag_139\n      jumpi\n        /* \"contracts/Quoter/Quoter.sol\":2788:2814  revert('Unexpected error') */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_141\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Quoter/Quoter.sol\":2764:2814  if (reason.length < 68) revert('Unexpected error') */\n    tag_139:\n        /* \"contracts/Quoter/Quoter.sol\":2877:2881  0x04 */\n      0x04\n        /* \"contracts/Quoter/Quoter.sol\":2869:2875  reason */\n      dup3\n        /* \"contracts/Quoter/Quoter.sol\":2865:2882  add(reason, 0x04) */\n      add\n        /* \"contracts/Quoter/Quoter.sol\":2855:2882  reason := add(reason, 0x04) */\n      swap2\n      pop\n        /* \"contracts/Quoter/Quoter.sol\":2927:2933  reason */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2916:2944  abi.decode(reason, (string)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_142\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n        /* \"contracts/Quoter/Quoter.sol\":2909:2945  revert(abi.decode(reason, (string))) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap2\n      swap1\n      tag_145\n      jump\t// in\n        /* \"contracts/Quoter/Quoter.sol\":2725:2956  if (reason.length != 32) {... */\n    tag_138:\n        /* \"contracts/Quoter/Quoter.sol\":2983:2989  reason */\n      dup2\n        /* \"contracts/Quoter/Quoter.sol\":2972:3001  abi.decode(reason, (uint256)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_147\n      jump\t// in\n        /* \"contracts/Quoter/CallbackValidation.sol\":647:906  function verifyCallback(... */\n    tag_113:\n        /* \"contracts/Quoter/CallbackValidation.sol\":793:812  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/Quoter/CallbackValidation.sol\":831:899  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_53\n        /* \"contracts/Quoter/CallbackValidation.sol\":846:853  factory */\n      dup6\n        /* \"contracts/Quoter/CallbackValidation.sol\":855:898  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_150\n        /* \"contracts/Quoter/CallbackValidation.sol\":878:884  tokenA */\n      dup7\n        /* \"contracts/Quoter/CallbackValidation.sol\":886:892  tokenB */\n      dup7\n        /* \"contracts/Quoter/CallbackValidation.sol\":894:897  fee */\n      dup7\n        /* \"contracts/Quoter/CallbackValidation.sol\":855:877  PoolAddress.getPoolKey */\n      tag_133\n        /* \"contracts/Quoter/CallbackValidation.sol\":855:898  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_150:\n        /* \"contracts/Quoter/CallbackValidation.sol\":831:845  verifyCallback */\n      tag_151\n        /* \"contracts/Quoter/CallbackValidation.sol\":831:899  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n        /* \"contracts/Quoter/BytesLib.sol\":3412:3828  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {... */\n    tag_123:\n        /* \"contracts/Quoter/BytesLib.sol\":3491:3498  address */\n      0x00\n        /* \"contracts/Quoter/BytesLib.sol\":3533:3539  _start */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":3518:3524  _start */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":3527:3529  20 */\n      0x14\n        /* \"contracts/Quoter/BytesLib.sol\":3518:3529  _start + 20 */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3518:3539  _start + 20 >= _start */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":3510:3562  require(_start + 20 >= _start, 'toAddress_overflow') */\n      tag_153\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      0x746f416464726573735f6f766572666c6f770000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_153:\n        /* \"contracts/Quoter/BytesLib.sol\":3597:3603  _start */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":3606:3608  20 */\n      0x14\n        /* \"contracts/Quoter/BytesLib.sol\":3597:3608  _start + 20 */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3580:3586  _bytes */\n      dup4\n        /* \"contracts/Quoter/BytesLib.sol\":3580:3593  _bytes.length */\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":3580:3608  _bytes.length >= _start + 20 */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":3572:3634  require(_bytes.length >= _start + 20, 'toAddress_outOfBounds') */\n      tag_154\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x15\n      0x24\n      dup3\n      add\n      mstore\n      0x746f416464726573735f6f75744f66426f756e64730000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_154:\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":3722:3752  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3738:3742  0x20 */\n      0x20\n        /* \"contracts/Quoter/BytesLib.sol\":3722:3752  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3716:3753  mload(add(add(_bytes, 0x20), _start)) */\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":3755:3782  0x1000000000000000000000000 */\n      0x01000000000000000000000000\n        /* \"contracts/Quoter/BytesLib.sol\":3712:3783  div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000) */\n      swap1\n      div\n      swap1\n        /* \"contracts/Quoter/BytesLib.sol\":3412:3828  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {... */\n      jump\t// out\n        /* \"contracts/Quoter/BytesLib.sol\":3834:4199  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {... */\n    tag_125:\n        /* \"contracts/Quoter/BytesLib.sol\":3912:3918  uint24 */\n      0x00\n        /* \"contracts/Quoter/BytesLib.sol\":3952:3958  _start */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":3938:3944  _start */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":3947:3948  3 */\n      0x03\n        /* \"contracts/Quoter/BytesLib.sol\":3938:3948  _start + 3 */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3938:3958  _start + 3 >= _start */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":3930:3980  require(_start + 3 >= _start, 'toUint24_overflow') */\n      tag_156\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      0x746f55696e7432345f6f766572666c6f77000000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_156:\n        /* \"contracts/Quoter/BytesLib.sol\":4015:4021  _start */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":4024:4025  3 */\n      0x03\n        /* \"contracts/Quoter/BytesLib.sol\":4015:4025  _start + 3 */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3998:4004  _bytes */\n      dup4\n        /* \"contracts/Quoter/BytesLib.sol\":3998:4011  _bytes.length */\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":3998:4025  _bytes.length >= _start + 3 */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":3990:4050  require(_bytes.length >= _start + 3, 'toUint24_outOfBounds') */\n      tag_157\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x14\n      0x24\n      dup3\n      add\n      mstore\n      0x746f55696e7432345f6f75744f66426f756e6473000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_157:\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":4127:4156  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":4143:4146  0x3 */\n      0x03\n        /* \"contracts/Quoter/BytesLib.sol\":4127:4156  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":4121:4157  mload(add(add(_bytes, 0x3), _start)) */\n      mload\n      swap1\n        /* \"contracts/Quoter/BytesLib.sol\":3834:4199  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {... */\n      jump\t// out\n        /* \"contracts/Quoter/BytesLib.sol\":399:3406  function slice(... */\n    tag_129:\n        /* \"contracts/Quoter/BytesLib.sol\":521:533  bytes memory */\n      0x60\n        /* \"contracts/Quoter/BytesLib.sol\":569:576  _length */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":553:560  _length */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":563:565  31 */\n      0x1f\n        /* \"contracts/Quoter/BytesLib.sol\":553:565  _length + 31 */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":553:576  _length + 31 >= _length */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":545:595  require(_length + 31 >= _length, 'slice_overflow') */\n      tag_159\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      0x736c6963655f6f766572666c6f77000000000000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_159:\n        /* \"contracts/Quoter/BytesLib.sol\":633:639  _start */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":622:629  _length */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":613:619  _start */\n      dup5\n        /* \"contracts/Quoter/BytesLib.sol\":613:629  _start + _length */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":613:639  _start + _length >= _start */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":605:658  require(_start + _length >= _start, 'slice_overflow') */\n      tag_160\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      0x736c6963655f6f766572666c6f77000000000000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_160:\n        /* \"contracts/Quoter/BytesLib.sol\":702:709  _length */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":693:699  _start */\n      dup4\n        /* \"contracts/Quoter/BytesLib.sol\":693:709  _start + _length */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":676:682  _bytes */\n      dup5\n        /* \"contracts/Quoter/BytesLib.sol\":676:689  _bytes.length */\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":676:709  _bytes.length >= _start + _length */\n      lt\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":668:731  require(_bytes.length >= _start + _length, 'slice_outOfBounds') */\n      tag_161\n      jumpi\n      0x40\n      dup1\n      mload\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      0x736c6963655f6f75744f66426f756e6473000000000000000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_161:\n        /* \"contracts/Quoter/BytesLib.sol\":742:764  bytes memory tempBytes */\n      0x60\n        /* \"contracts/Quoter/BytesLib.sol\":805:820  iszero(_length) */\n      dup3\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":837:2936  case 0 {... */\n      dup1\n      iszero\n      tag_163\n      jumpi\n        /* \"contracts/Quoter/BytesLib.sol\":3089:3093  0x40 */\n      0x40\n        /* \"contracts/Quoter/BytesLib.sol\":3083:3094  mload(0x40) */\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":3070:3094  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":3287:3288  0 */\n      0x00\n        /* \"contracts/Quoter/BytesLib.sol\":3276:3285  tempBytes */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":3269:3289  mstore(tempBytes, 0) */\n      mstore\n        /* \"contracts/Quoter/BytesLib.sol\":3339:3343  0x20 */\n      0x20\n        /* \"contracts/Quoter/BytesLib.sol\":3328:3337  tempBytes */\n      dup3\n        /* \"contracts/Quoter/BytesLib.sol\":3324:3344  add(tempBytes, 0x20) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":3318:3322  0x40 */\n      0x40\n        /* \"contracts/Quoter/BytesLib.sol\":3311:3345  mstore(0x40, add(tempBytes, 0x20)) */\n      mstore\n        /* \"contracts/Quoter/BytesLib.sol\":798:3363  switch iszero(_length)... */\n      jump(tag_162)\n        /* \"contracts/Quoter/BytesLib.sol\":837:2936  case 0 {... */\n    tag_163:\n        /* \"contracts/Quoter/BytesLib.sol\":1031:1035  0x40 */\n      0x40\n        /* \"contracts/Quoter/BytesLib.sol\":1025:1036  mload(0x40) */\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":1012:1036  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":1726:1728  31 */\n      0x1f\n        /* \"contracts/Quoter/BytesLib.sol\":1717:1724  _length */\n      dup5\n        /* \"contracts/Quoter/BytesLib.sol\":1713:1729  and(_length, 31) */\n      and\n        /* \"contracts/Quoter/BytesLib.sol\":2128:2137  lengthmod */\n      dup1\n        /* \"contracts/Quoter/BytesLib.sol\":2121:2138  iszero(lengthmod) */\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":2115:2119  0x20 */\n      0x20\n        /* \"contracts/Quoter/BytesLib.sol\":2111:2139  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/Quoter/BytesLib.sol\":2099:2108  lengthmod */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":2088:2097  tempBytes */\n      dup5\n        /* \"contracts/Quoter/BytesLib.sol\":2084:2109  add(tempBytes, lengthmod) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2080:2140  add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2180:2187  _length */\n      dup6\n        /* \"contracts/Quoter/BytesLib.sol\":2176:2178  mc */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":2172:2188  add(mc, _length) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2448:2454  _start */\n      dup8\n        /* \"contracts/Quoter/BytesLib.sol\":2434:2443  lengthmod */\n      dup4\n        /* \"contracts/Quoter/BytesLib.sol\":2427:2444  iszero(lengthmod) */\n      iszero\n        /* \"contracts/Quoter/BytesLib.sol\":2421:2425  0x20 */\n      0x20\n        /* \"contracts/Quoter/BytesLib.sol\":2417:2445  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/Quoter/BytesLib.sol\":2405:2414  lengthmod */\n      dup5\n        /* \"contracts/Quoter/BytesLib.sol\":2397:2403  _bytes */\n      dup12\n        /* \"contracts/Quoter/BytesLib.sol\":2393:2415  add(_bytes, lengthmod) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2389:2446  add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2385:2455  add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2210:2671  for {... */\n    tag_164:\n        /* \"contracts/Quoter/BytesLib.sol\":2485:2488  end */\n      dup2\n        /* \"contracts/Quoter/BytesLib.sol\":2481:2483  mc */\n      dup4\n        /* \"contracts/Quoter/BytesLib.sol\":2478:2489  lt(mc, end) */\n      lt\n        /* \"contracts/Quoter/BytesLib.sol\":2210:2671  for {... */\n      iszero\n      tag_166\n      jumpi\n        /* \"contracts/Quoter/BytesLib.sol\":2639:2648  mload(cc) */\n      dup1\n      mload\n        /* \"contracts/Quoter/BytesLib.sol\":2628:2649  mstore(mc, mload(cc)) */\n      dup4\n      mstore\n        /* \"contracts/Quoter/BytesLib.sol\":2530:2534  0x20 */\n      0x20\n        /* \"contracts/Quoter/BytesLib.sol\":2522:2535  add(mc, 0x20) */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"contracts/Quoter/BytesLib.sol\":2566:2579  add(cc, 0x20) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2210:2671  for {... */\n      jump(tag_164)\n    tag_166:\n      pop\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":2693:2719  mstore(tempBytes, _length) */\n      dup6\n      dup5\n      mstore\n        /* \"contracts/Quoter/BytesLib.sol\":2913:2915  31 */\n      0x1f\n        /* \"contracts/Quoter/BytesLib.sol\":2896:2907  add(mc, 31) */\n      add\n        /* \"contracts/Quoter/BytesLib.sol\":2909:2916  not(31) */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        /* \"contracts/Quoter/BytesLib.sol\":2892:2917  and(add(mc, 31), not(31)) */\n      and\n        /* \"contracts/Quoter/BytesLib.sol\":2886:2890  0x40 */\n      0x40\n        /* \"contracts/Quoter/BytesLib.sol\":2879:2918  mstore(0x40, and(add(mc, 31), not(31))) */\n      mstore\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":798:3363  switch iszero(_length)... */\n    tag_162:\n      pop\n        /* \"contracts/Quoter/BytesLib.sol\":3390:3399  tempBytes */\n      swap5\n        /* \"contracts/Quoter/BytesLib.sol\":399:3406  function slice(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Quoter/PoolAddress.sol\":784:1058  function getPoolKey(... */\n    tag_133:\n        /* \"contracts/Quoter/PoolAddress.sol\":901:915  PoolKey memory */\n      tag_167\n      tag_168\n      jump\t// in\n    tag_167:\n        /* \"contracts/Quoter/PoolAddress.sol\":940:946  tokenB */\n      dup3\n        /* \"contracts/Quoter/PoolAddress.sol\":931:946  tokenA > tokenB */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Quoter/PoolAddress.sol\":931:937  tokenA */\n      dup5\n        /* \"contracts/Quoter/PoolAddress.sol\":931:946  tokenA > tokenB */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n        /* \"contracts/Quoter/PoolAddress.sol\":927:983  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n      iszero\n      tag_170\n      jumpi\n        /* \"contracts/Quoter/PoolAddress.sol\":968:974  tokenB */\n      swap2\n      swap3\n        /* \"contracts/Quoter/PoolAddress.sol\":976:982  tokenA */\n      swap2\n        /* \"contracts/Quoter/PoolAddress.sol\":927:983  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n    tag_170:\n      pop\n        /* \"contracts/Quoter/PoolAddress.sol\":1000:1051  PoolKey({token0: tokenA, token1: tokenB, fee: fee}) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0xffffffffffffffffffffffffffffffffffffffff\n      swap5\n      dup6\n      and\n      dup2\n      mstore\n      swap3\n      swap1\n      swap4\n      and\n      0x20\n      dup4\n      add\n      mstore\n      0xffffff\n      and\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n        /* \"contracts/Quoter/PoolAddress.sol\":784:1058  function getPoolKey(... */\n      jump\t// out\n        /* \"contracts/Quoter/PoolAddress.sol\":1305:1817  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {... */\n    tag_134:\n        /* \"contracts/Quoter/PoolAddress.sol\":1389:1401  address pool */\n      0x00\n        /* \"contracts/Quoter/PoolAddress.sol\":1434:1437  key */\n      dup2\n        /* \"contracts/Quoter/PoolAddress.sol\":1434:1444  key.token1 */\n      0x20\n      add\n      mload\n        /* \"contracts/Quoter/PoolAddress.sol\":1421:1444  key.token0 < key.token1 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Quoter/PoolAddress.sol\":1421:1424  key */\n      dup3\n        /* \"contracts/Quoter/PoolAddress.sol\":1421:1431  key.token0 */\n      0x00\n      add\n      mload\n        /* \"contracts/Quoter/PoolAddress.sol\":1421:1444  key.token0 < key.token1 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n        /* \"contracts/Quoter/PoolAddress.sol\":1413:1445  require(key.token0 < key.token1) */\n      tag_172\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_172:\n      pop\n        /* \"contracts/Quoter/PoolAddress.sol\":1668:1678  key.token0 */\n      dup1\n      mload\n        /* \"contracts/Quoter/PoolAddress.sol\":1680:1690  key.token1 */\n      0x20\n      dup1\n      dup4\n      add\n      mload\n        /* \"contracts/Quoter/PoolAddress.sol\":1692:1699  key.fee */\n      0x40\n      swap4\n      dup5\n      add\n      mload\n        /* \"contracts/Quoter/PoolAddress.sol\":1657:1700  abi.encode(key.token0, key.token1, key.fee) */\n      dup5\n      mload\n      0xffffffffffffffffffffffffffffffffffffffff\n      swap5\n      dup6\n      and\n      dup2\n      dup6\n      add\n      mstore\n      swap4\n      swap1\n      swap2\n      and\n      dup4\n      dup6\n      add\n      mstore\n      0xffffff\n      and\n      0x60\n      dup1\n      dup5\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      dup3\n      add\n      dup2\n      mstore\n      0x80\n      dup5\n      add\n      dup6\n      mstore\n        /* \"contracts/Quoter/PoolAddress.sol\":1647:1701  keccak256(abi.encode(key.token0, key.token1, key.fee)) */\n      dup1\n      mload\n      swap1\n      dup4\n      add\n      keccak256\n        /* \"contracts/Quoter/PoolAddress.sol\":1539:1768  abi.encodePacked(... */\n      0xff00000000000000000000000000000000000000000000000000000000000000\n      0xa0\n      dup6\n      add\n      mstore\n      swap5\n      swap1\n      shl\n      0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000\n      and\n      0xa1\n      dup4\n      add\n      mstore\n      0xb5\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"contracts/Quoter/PoolAddress.sol\":241:307  0xf1804c752c7c65cc02f2ee3526f62cd20f9f0f6b31c1608c7d7504d2c177bc23 */\n      0xf1804c752c7c65cc02f2ee3526f62cd20f9f0f6b31c1608c7d7504d2c177bc23\n        /* \"contracts/Quoter/PoolAddress.sol\":1539:1768  abi.encodePacked(... */\n      0xd5\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0xf5\n      swap1\n      swap2\n      add\n      swap1\n      swap2\n      mstore\n        /* \"contracts/Quoter/PoolAddress.sol\":1508:1786  keccak256(... */\n      dup1\n      mload\n      swap2\n      add\n      keccak256\n      swap1\n        /* \"contracts/Quoter/PoolAddress.sol\":1305:1817  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {... */\n      jump\t// out\n        /* \"contracts/Quoter/CallbackValidation.sol\":1153:1432  function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)... */\n    tag_151:\n        /* \"contracts/Quoter/CallbackValidation.sol\":1277:1296  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/Quoter/CallbackValidation.sol\":1334:1378  PoolAddress.computeAddress(factory, poolKey) */\n      tag_174\n        /* \"contracts/Quoter/CallbackValidation.sol\":1361:1368  factory */\n      dup4\n        /* \"contracts/Quoter/CallbackValidation.sol\":1370:1377  poolKey */\n      dup4\n        /* \"contracts/Quoter/CallbackValidation.sol\":1334:1360  PoolAddress.computeAddress */\n      tag_134\n        /* \"contracts/Quoter/CallbackValidation.sol\":1334:1378  PoolAddress.computeAddress(factory, poolKey) */\n      jump\t// in\n    tag_174:\n        /* \"contracts/Quoter/CallbackValidation.sol\":1312:1379  pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey)) */\n      swap1\n      pop\n        /* \"contracts/Quoter/CallbackValidation.sol\":1397:1407  msg.sender */\n      caller\n        /* \"contracts/Quoter/CallbackValidation.sol\":1397:1424  msg.sender == address(pool) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup3\n      and\n      eq\n        /* \"contracts/Quoter/CallbackValidation.sol\":1389:1425  require(msg.sender == address(pool)) */\n      tag_43\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_168:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:499   */\n    tag_177:\n      0x00\n        /* \"#utility.yul\":111:114   */\n      dup3\n        /* \"#utility.yul\":104:108   */\n      0x1f\n        /* \"#utility.yul\":96:102   */\n      dup4\n        /* \"#utility.yul\":92:109   */\n      add\n        /* \"#utility.yul\":88:115   */\n      slt\n        /* \"#utility.yul\":78:80   */\n      tag_179\n      jumpi\n        /* \"#utility.yul\":133:138   */\n      dup1\n        /* \"#utility.yul\":126:131   */\n      dup2\n        /* \"#utility.yul\":119:139   */\n      revert\n        /* \"#utility.yul\":78:80   */\n    tag_179:\n        /* \"#utility.yul\":173:179   */\n      dup2\n        /* \"#utility.yul\":160:180   */\n      calldataload\n        /* \"#utility.yul\":204:253   */\n      tag_180\n        /* \"#utility.yul\":219:252   */\n      tag_181\n        /* \"#utility.yul\":249:251   */\n      dup3\n        /* \"#utility.yul\":219:252   */\n      tag_182\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":204:253   */\n      tag_183\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":278:280   */\n      dup2\n        /* \"#utility.yul\":269:276   */\n      dup2\n        /* \"#utility.yul\":262:281   */\n      mstore\n        /* \"#utility.yul\":324:327   */\n      dup5\n        /* \"#utility.yul\":317:321   */\n      0x20\n        /* \"#utility.yul\":312:314   */\n      dup4\n        /* \"#utility.yul\":304:310   */\n      dup7\n        /* \"#utility.yul\":300:315   */\n      add\n        /* \"#utility.yul\":296:322   */\n      add\n        /* \"#utility.yul\":293:328   */\n      gt\n        /* \"#utility.yul\":290:292   */\n      iszero\n      tag_184\n      jumpi\n        /* \"#utility.yul\":345:350   */\n      dup3\n        /* \"#utility.yul\":338:343   */\n      dup4\n        /* \"#utility.yul\":331:351   */\n      revert\n        /* \"#utility.yul\":290:292   */\n    tag_184:\n        /* \"#utility.yul\":414:416   */\n      dup2\n        /* \"#utility.yul\":407:411   */\n      0x20\n        /* \"#utility.yul\":399:405   */\n      dup6\n        /* \"#utility.yul\":395:412   */\n      add\n        /* \"#utility.yul\":388:392   */\n      0x20\n        /* \"#utility.yul\":379:386   */\n      dup4\n        /* \"#utility.yul\":375:393   */\n      add\n        /* \"#utility.yul\":362:417   */\n      calldatacopy\n        /* \"#utility.yul\":437:453   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":455:459   */\n      0x20\n        /* \"#utility.yul\":433:460   */\n      add\n        /* \"#utility.yul\":426:468   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":441:448   */\n      swap3\n        /* \"#utility.yul\":68:499   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":504:1299   */\n    tag_19:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":683:686   */\n      0xa0\n        /* \"#utility.yul\":671:680   */\n      dup7\n        /* \"#utility.yul\":662:669   */\n      dup9\n        /* \"#utility.yul\":658:681   */\n      sub\n        /* \"#utility.yul\":654:687   */\n      slt\n        /* \"#utility.yul\":651:653   */\n      iszero\n      tag_186\n      jumpi\n        /* \"#utility.yul\":705:711   */\n      dup1\n        /* \"#utility.yul\":697:703   */\n      dup2\n        /* \"#utility.yul\":690:712   */\n      revert\n        /* \"#utility.yul\":651:653   */\n    tag_186:\n        /* \"#utility.yul\":749:758   */\n      dup6\n        /* \"#utility.yul\":736:759   */\n      calldataload\n        /* \"#utility.yul\":768:801   */\n      tag_187\n        /* \"#utility.yul\":795:800   */\n      dup2\n        /* \"#utility.yul\":768:801   */\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":820:825   */\n      swap5\n      pop\n        /* \"#utility.yul\":877:879   */\n      0x20\n        /* \"#utility.yul\":862:880   */\n      dup7\n      add\n        /* \"#utility.yul\":849:881   */\n      calldataload\n        /* \"#utility.yul\":890:925   */\n      tag_189\n        /* \"#utility.yul\":849:881   */\n      dup2\n        /* \"#utility.yul\":890:925   */\n      tag_188\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":944:951   */\n      swap4\n      pop\n        /* \"#utility.yul\":1003:1005   */\n      0x40\n        /* \"#utility.yul\":988:1006   */\n      dup7\n      add\n        /* \"#utility.yul\":975:1007   */\n      calldataload\n        /* \"#utility.yul\":1051:1059   */\n      0xffffff\n        /* \"#utility.yul\":1038:1060   */\n      dup2\n      and\n        /* \"#utility.yul\":1026:1061   */\n      dup2\n      eq\n        /* \"#utility.yul\":1016:1018   */\n      tag_190\n      jumpi\n        /* \"#utility.yul\":1080:1086   */\n      dup2\n        /* \"#utility.yul\":1072:1078   */\n      dup3\n        /* \"#utility.yul\":1065:1087   */\n      revert\n        /* \"#utility.yul\":1016:1018   */\n    tag_190:\n        /* \"#utility.yul\":1108:1115   */\n      swap3\n      pop\n        /* \"#utility.yul\":1162:1164   */\n      0x60\n        /* \"#utility.yul\":1147:1165   */\n      dup7\n      add\n        /* \"#utility.yul\":1134:1166   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1218:1221   */\n      0x80\n        /* \"#utility.yul\":1203:1222   */\n      dup7\n      add\n        /* \"#utility.yul\":1190:1223   */\n      calldataload\n        /* \"#utility.yul\":1232:1267   */\n      tag_191\n        /* \"#utility.yul\":1190:1223   */\n      dup2\n        /* \"#utility.yul\":1232:1267   */\n      tag_188\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":1286:1293   */\n      dup1\n        /* \"#utility.yul\":1276:1293   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":641:1299   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1304:1714   */\n    tag_13:\n      0x00\n      dup1\n        /* \"#utility.yul\":1442:1444   */\n      0x40\n        /* \"#utility.yul\":1430:1439   */\n      dup4\n        /* \"#utility.yul\":1421:1428   */\n      dup6\n        /* \"#utility.yul\":1417:1440   */\n      sub\n        /* \"#utility.yul\":1413:1445   */\n      slt\n        /* \"#utility.yul\":1410:1412   */\n      iszero\n      tag_193\n      jumpi\n        /* \"#utility.yul\":1463:1469   */\n      dup2\n        /* \"#utility.yul\":1455:1461   */\n      dup3\n        /* \"#utility.yul\":1448:1470   */\n      revert\n        /* \"#utility.yul\":1410:1412   */\n    tag_193:\n        /* \"#utility.yul\":1508:1517   */\n      dup3\n        /* \"#utility.yul\":1495:1518   */\n      calldataload\n        /* \"#utility.yul\":1541:1559   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1533:1539   */\n      dup2\n        /* \"#utility.yul\":1530:1560   */\n      gt\n        /* \"#utility.yul\":1527:1529   */\n      iszero\n      tag_194\n      jumpi\n        /* \"#utility.yul\":1578:1584   */\n      dup3\n        /* \"#utility.yul\":1570:1576   */\n      dup4\n        /* \"#utility.yul\":1563:1585   */\n      revert\n        /* \"#utility.yul\":1527:1529   */\n    tag_194:\n        /* \"#utility.yul\":1606:1657   */\n      tag_195\n        /* \"#utility.yul\":1649:1656   */\n      dup6\n        /* \"#utility.yul\":1640:1646   */\n      dup3\n        /* \"#utility.yul\":1629:1638   */\n      dup7\n        /* \"#utility.yul\":1625:1647   */\n      add\n        /* \"#utility.yul\":1606:1657   */\n      tag_177\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":1596:1657   */\n      swap6\n        /* \"#utility.yul\":1704:1706   */\n      0x20\n        /* \"#utility.yul\":1689:1707   */\n      swap5\n      swap1\n      swap5\n      add\n        /* \"#utility.yul\":1676:1708   */\n      calldataload\n      swap5\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1400:1714   */\n      jump\t// out\n        /* \"#utility.yul\":1719:1972   */\n    tag_70:\n      0x00\n      dup1\n        /* \"#utility.yul\":1857:1859   */\n      0x40\n        /* \"#utility.yul\":1845:1854   */\n      dup4\n        /* \"#utility.yul\":1836:1843   */\n      dup6\n        /* \"#utility.yul\":1832:1855   */\n      sub\n        /* \"#utility.yul\":1828:1860   */\n      slt\n        /* \"#utility.yul\":1825:1827   */\n      iszero\n      tag_197\n      jumpi\n        /* \"#utility.yul\":1878:1884   */\n      dup2\n        /* \"#utility.yul\":1870:1876   */\n      dup3\n        /* \"#utility.yul\":1863:1885   */\n      revert\n        /* \"#utility.yul\":1825:1827   */\n    tag_197:\n      pop\n      pop\n        /* \"#utility.yul\":1906:1922   */\n      dup1\n      mload\n        /* \"#utility.yul\":1962:1964   */\n      0x20\n        /* \"#utility.yul\":1947:1965   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1941:1966   */\n      mload\n        /* \"#utility.yul\":1906:1922   */\n      swap1\n      swap3\n        /* \"#utility.yul\":1941:1966   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":1815:1972   */\n      jump\t// out\n        /* \"#utility.yul\":1977:2453   */\n    tag_39:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":2130:2132   */\n      0x60\n        /* \"#utility.yul\":2118:2127   */\n      dup5\n        /* \"#utility.yul\":2109:2116   */\n      dup7\n        /* \"#utility.yul\":2105:2128   */\n      sub\n        /* \"#utility.yul\":2101:2133   */\n      slt\n        /* \"#utility.yul\":2098:2100   */\n      iszero\n      tag_199\n      jumpi\n        /* \"#utility.yul\":2151:2157   */\n      dup3\n        /* \"#utility.yul\":2143:2149   */\n      dup4\n        /* \"#utility.yul\":2136:2158   */\n      revert\n        /* \"#utility.yul\":2098:2100   */\n    tag_199:\n        /* \"#utility.yul\":2192:2201   */\n      dup4\n        /* \"#utility.yul\":2179:2202   */\n      calldataload\n        /* \"#utility.yul\":2169:2202   */\n      swap3\n      pop\n        /* \"#utility.yul\":2249:2251   */\n      0x20\n        /* \"#utility.yul\":2238:2247   */\n      dup5\n        /* \"#utility.yul\":2234:2252   */\n      add\n        /* \"#utility.yul\":2221:2253   */\n      calldataload\n        /* \"#utility.yul\":2211:2253   */\n      swap2\n      pop\n        /* \"#utility.yul\":2304:2306   */\n      0x40\n        /* \"#utility.yul\":2293:2302   */\n      dup5\n        /* \"#utility.yul\":2289:2307   */\n      add\n        /* \"#utility.yul\":2276:2308   */\n      calldataload\n        /* \"#utility.yul\":2331:2349   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2323:2329   */\n      dup2\n        /* \"#utility.yul\":2320:2350   */\n      gt\n        /* \"#utility.yul\":2317:2319   */\n      iszero\n      tag_200\n      jumpi\n        /* \"#utility.yul\":2368:2374   */\n      dup2\n        /* \"#utility.yul\":2360:2366   */\n      dup3\n        /* \"#utility.yul\":2353:2375   */\n      revert\n        /* \"#utility.yul\":2317:2319   */\n    tag_200:\n        /* \"#utility.yul\":2396:2447   */\n      tag_201\n        /* \"#utility.yul\":2439:2446   */\n      dup7\n        /* \"#utility.yul\":2430:2436   */\n      dup3\n        /* \"#utility.yul\":2419:2428   */\n      dup8\n        /* \"#utility.yul\":2415:2437   */\n      add\n        /* \"#utility.yul\":2396:2447   */\n      tag_177\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":2386:2447   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2088:2453   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2458:3134   */\n    tag_143:\n      0x00\n        /* \"#utility.yul\":2591:2593   */\n      0x20\n        /* \"#utility.yul\":2579:2588   */\n      dup3\n        /* \"#utility.yul\":2570:2577   */\n      dup5\n        /* \"#utility.yul\":2566:2589   */\n      sub\n        /* \"#utility.yul\":2562:2594   */\n      slt\n        /* \"#utility.yul\":2559:2561   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":2612:2618   */\n      dup1\n        /* \"#utility.yul\":2604:2610   */\n      dup2\n        /* \"#utility.yul\":2597:2619   */\n      revert\n        /* \"#utility.yul\":2559:2561   */\n    tag_203:\n        /* \"#utility.yul\":2650:2659   */\n      dup2\n        /* \"#utility.yul\":2644:2660   */\n      mload\n        /* \"#utility.yul\":2683:2701   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2675:2681   */\n      dup2\n        /* \"#utility.yul\":2672:2702   */\n      gt\n        /* \"#utility.yul\":2669:2671   */\n      iszero\n      tag_204\n      jumpi\n        /* \"#utility.yul\":2720:2726   */\n      dup2\n        /* \"#utility.yul\":2712:2718   */\n      dup3\n        /* \"#utility.yul\":2705:2727   */\n      revert\n        /* \"#utility.yul\":2669:2671   */\n    tag_204:\n        /* \"#utility.yul\":2748:2770   */\n      dup3\n      add\n        /* \"#utility.yul\":2801:2805   */\n      0x1f\n        /* \"#utility.yul\":2793:2806   */\n      dup2\n      add\n        /* \"#utility.yul\":2789:2816   */\n      dup5\n      sgt\n        /* \"#utility.yul\":2779:2781   */\n      tag_205\n      jumpi\n        /* \"#utility.yul\":2835:2841   */\n      dup2\n        /* \"#utility.yul\":2827:2833   */\n      dup3\n        /* \"#utility.yul\":2820:2842   */\n      revert\n        /* \"#utility.yul\":2779:2781   */\n    tag_205:\n        /* \"#utility.yul\":2869:2871   */\n      dup1\n        /* \"#utility.yul\":2863:2872   */\n      mload\n        /* \"#utility.yul\":2894:2943   */\n      tag_206\n        /* \"#utility.yul\":2909:2942   */\n      tag_181\n        /* \"#utility.yul\":2939:2941   */\n      dup3\n        /* \"#utility.yul\":2909:2942   */\n      tag_182\n      jump\t// in\n        /* \"#utility.yul\":2894:2943   */\n    tag_206:\n        /* \"#utility.yul\":2966:2968   */\n      dup2\n        /* \"#utility.yul\":2959:2964   */\n      dup2\n        /* \"#utility.yul\":2952:2969   */\n      mstore\n        /* \"#utility.yul\":3006:3013   */\n      dup6\n        /* \"#utility.yul\":3001:3003   */\n      0x20\n        /* \"#utility.yul\":2996:2998   */\n      dup4\n        /* \"#utility.yul\":2992:2994   */\n      dup6\n        /* \"#utility.yul\":2988:2999   */\n      add\n        /* \"#utility.yul\":2984:3004   */\n      add\n        /* \"#utility.yul\":2981:3014   */\n      gt\n        /* \"#utility.yul\":2978:2980   */\n      iszero\n      tag_208\n      jumpi\n        /* \"#utility.yul\":3032:3038   */\n      dup4\n        /* \"#utility.yul\":3024:3030   */\n      dup5\n        /* \"#utility.yul\":3017:3039   */\n      revert\n        /* \"#utility.yul\":2978:2980   */\n    tag_208:\n        /* \"#utility.yul\":3050:3104   */\n      tag_53\n        /* \"#utility.yul\":3101:3103   */\n      dup3\n        /* \"#utility.yul\":3096:3098   */\n      0x20\n        /* \"#utility.yul\":3089:3094   */\n      dup4\n        /* \"#utility.yul\":3085:3099   */\n      add\n        /* \"#utility.yul\":3080:3082   */\n      0x20\n        /* \"#utility.yul\":3076:3078   */\n      dup7\n        /* \"#utility.yul\":3072:3083   */\n      add\n        /* \"#utility.yul\":3050:3104   */\n      tag_210\n      jump\t// in\n        /* \"#utility.yul\":3139:3333   */\n    tag_147:\n      0x00\n        /* \"#utility.yul\":3262:3264   */\n      0x20\n        /* \"#utility.yul\":3250:3259   */\n      dup3\n        /* \"#utility.yul\":3241:3248   */\n      dup5\n        /* \"#utility.yul\":3237:3260   */\n      sub\n        /* \"#utility.yul\":3233:3265   */\n      slt\n        /* \"#utility.yul\":3230:3232   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":3283:3289   */\n      dup1\n        /* \"#utility.yul\":3275:3281   */\n      dup2\n        /* \"#utility.yul\":3268:3290   */\n      revert\n        /* \"#utility.yul\":3230:3232   */\n    tag_212:\n      pop\n        /* \"#utility.yul\":3311:3327   */\n      mload\n      swap2\n        /* \"#utility.yul\":3220:3333   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3338:3656   */\n    tag_213:\n      0x00\n        /* \"#utility.yul\":3419:3424   */\n      dup2\n        /* \"#utility.yul\":3413:3425   */\n      mload\n        /* \"#utility.yul\":3446:3452   */\n      dup1\n        /* \"#utility.yul\":3441:3444   */\n      dup5\n        /* \"#utility.yul\":3434:3453   */\n      mstore\n        /* \"#utility.yul\":3462:3525   */\n      tag_215\n        /* \"#utility.yul\":3518:3524   */\n      dup2\n        /* \"#utility.yul\":3511:3515   */\n      0x20\n        /* \"#utility.yul\":3506:3509   */\n      dup7\n        /* \"#utility.yul\":3502:3516   */\n      add\n        /* \"#utility.yul\":3495:3499   */\n      0x20\n        /* \"#utility.yul\":3488:3493   */\n      dup7\n        /* \"#utility.yul\":3484:3500   */\n      add\n        /* \"#utility.yul\":3462:3525   */\n      tag_210\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":3570:3572   */\n      0x1f\n        /* \"#utility.yul\":3558:3573   */\n      add\n        /* \"#utility.yul\":3575:3641   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        /* \"#utility.yul\":3554:3642   */\n      and\n        /* \"#utility.yul\":3545:3643   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":3645:3649   */\n      0x20\n        /* \"#utility.yul\":3541:3650   */\n      add\n      swap3\n        /* \"#utility.yul\":3389:3656   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3661:4175   */\n    tag_64:\n        /* \"#utility.yul\":3949:3951   */\n      0x60\n        /* \"#utility.yul\":3945:3960   */\n      swap4\n      dup5\n      shl\n        /* \"#utility.yul\":3854:3920   */\n      0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000\n        /* \"#utility.yul\":3941:3965   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":3929:3966   */\n      dup3\n      mstore\n        /* \"#utility.yul\":4004:4007   */\n      0xe8\n        /* \"#utility.yul\":4000:4016   */\n      swap4\n      swap1\n      swap4\n      shl\n        /* \"#utility.yul\":4018:4084   */\n      0xffffff0000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3996:4085   */\n      and\n        /* \"#utility.yul\":3991:3993   */\n      0x14\n        /* \"#utility.yul\":3982:3994   */\n      dup3\n      add\n        /* \"#utility.yul\":3975:4086   */\n      mstore\n        /* \"#utility.yul\":4120:4135   */\n      swap3\n      shl\n        /* \"#utility.yul\":4116:4140   */\n      and\n        /* \"#utility.yul\":4111:4113   */\n      0x17\n        /* \"#utility.yul\":4102:4114   */\n      dup3\n      add\n        /* \"#utility.yul\":4095:4141   */\n      mstore\n        /* \"#utility.yul\":4166:4168   */\n      0x2b\n        /* \"#utility.yul\":4157:4169   */\n      add\n      swap1\n        /* \"#utility.yul\":3834:4175   */\n      jump\t// out\n        /* \"#utility.yul\":4180:4406   */\n    tag_25:\n        /* \"#utility.yul\":4356:4398   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":4344:4399   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4326:4400   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4314:4316   */\n      0x20\n        /* \"#utility.yul\":4299:4317   */\n      add\n      swap1\n        /* \"#utility.yul\":4281:4406   */\n      jump\t// out\n        /* \"#utility.yul\":4411:5004   */\n    tag_66:\n      0x00\n        /* \"#utility.yul\":4654:4696   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":4735:4737   */\n      dup1\n        /* \"#utility.yul\":4727:4733   */\n      dup9\n        /* \"#utility.yul\":4723:4738   */\n      and\n        /* \"#utility.yul\":4712:4721   */\n      dup4\n        /* \"#utility.yul\":4705:4739   */\n      mstore\n        /* \"#utility.yul\":4789:4795   */\n      dup7\n        /* \"#utility.yul\":4782:4796   */\n      iszero\n        /* \"#utility.yul\":4775:4797   */\n      iszero\n        /* \"#utility.yul\":4770:4772   */\n      0x20\n        /* \"#utility.yul\":4759:4768   */\n      dup5\n        /* \"#utility.yul\":4755:4773   */\n      add\n        /* \"#utility.yul\":4748:4798   */\n      mstore\n        /* \"#utility.yul\":4834:4840   */\n      dup6\n        /* \"#utility.yul\":4829:4831   */\n      0x40\n        /* \"#utility.yul\":4818:4827   */\n      dup5\n        /* \"#utility.yul\":4814:4832   */\n      add\n        /* \"#utility.yul\":4807:4841   */\n      mstore\n        /* \"#utility.yul\":4889:4891   */\n      dup1\n        /* \"#utility.yul\":4881:4887   */\n      dup6\n        /* \"#utility.yul\":4877:4892   */\n      and\n        /* \"#utility.yul\":4872:4874   */\n      0x60\n        /* \"#utility.yul\":4861:4870   */\n      dup5\n        /* \"#utility.yul\":4857:4875   */\n      add\n        /* \"#utility.yul\":4850:4893   */\n      mstore\n      pop\n        /* \"#utility.yul\":4930:4933   */\n      0xa0\n        /* \"#utility.yul\":4924:4927   */\n      0x80\n        /* \"#utility.yul\":4913:4922   */\n      dup4\n        /* \"#utility.yul\":4909:4928   */\n      add\n        /* \"#utility.yul\":4902:4934   */\n      mstore\n        /* \"#utility.yul\":4951:4998   */\n      tag_219\n        /* \"#utility.yul\":4993:4996   */\n      0xa0\n        /* \"#utility.yul\":4982:4991   */\n      dup4\n        /* \"#utility.yul\":4978:4997   */\n      add\n        /* \"#utility.yul\":4970:4976   */\n      dup5\n        /* \"#utility.yul\":4951:4998   */\n      tag_213\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":4943:4998   */\n      swap8\n        /* \"#utility.yul\":4634:5004   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5009:5230   */\n    tag_145:\n      0x00\n        /* \"#utility.yul\":5158:5160   */\n      0x20\n        /* \"#utility.yul\":5147:5156   */\n      dup3\n        /* \"#utility.yul\":5140:5161   */\n      mstore\n        /* \"#utility.yul\":5178:5224   */\n      tag_221\n        /* \"#utility.yul\":5220:5222   */\n      0x20\n        /* \"#utility.yul\":5209:5218   */\n      dup4\n        /* \"#utility.yul\":5205:5223   */\n      add\n        /* \"#utility.yul\":5197:5203   */\n      dup5\n        /* \"#utility.yul\":5178:5224   */\n      tag_213\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":5170:5224   */\n      swap4\n        /* \"#utility.yul\":5130:5230   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5235:5575   */\n    tag_141:\n        /* \"#utility.yul\":5437:5439   */\n      0x20\n        /* \"#utility.yul\":5419:5440   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5476:5478   */\n      0x10\n        /* \"#utility.yul\":5456:5474   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5449:5479   */\n      mstore\n        /* \"#utility.yul\":5515:5533   */\n      0x556e6578706563746564206572726f7200000000000000000000000000000000\n        /* \"#utility.yul\":5510:5512   */\n      0x40\n        /* \"#utility.yul\":5495:5513   */\n      dup3\n      add\n        /* \"#utility.yul\":5488:5534   */\n      mstore\n        /* \"#utility.yul\":5566:5568   */\n      0x60\n        /* \"#utility.yul\":5551:5569   */\n      add\n      swap1\n        /* \"#utility.yul\":5409:5575   */\n      jump\t// out\n        /* \"#utility.yul\":5580:5757   */\n    tag_16:\n        /* \"#utility.yul\":5726:5751   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5714:5716   */\n      0x20\n        /* \"#utility.yul\":5699:5717   */\n      add\n      swap1\n        /* \"#utility.yul\":5681:5757   */\n      jump\t// out\n        /* \"#utility.yul\":5762:6004   */\n    tag_183:\n        /* \"#utility.yul\":5832:5834   */\n      0x40\n        /* \"#utility.yul\":5826:5835   */\n      mload\n        /* \"#utility.yul\":5862:5879   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":5909:5927   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5894:5928   */\n      dup2\n      gt\n        /* \"#utility.yul\":5930:5952   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":5891:5953   */\n      or\n        /* \"#utility.yul\":5888:5890   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":5956:5965   */\n      invalid\n        /* \"#utility.yul\":5888:5890   */\n    tag_225:\n        /* \"#utility.yul\":5983:5985   */\n      0x40\n        /* \"#utility.yul\":5976:5998   */\n      mstore\n        /* \"#utility.yul\":5806:6004   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6009:6249   */\n    tag_182:\n      0x00\n        /* \"#utility.yul\":6092:6110   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":6084:6090   */\n      dup3\n        /* \"#utility.yul\":6081:6111   */\n      gt\n        /* \"#utility.yul\":6078:6080   */\n      iszero\n      tag_227\n      jumpi\n        /* \"#utility.yul\":6114:6123   */\n      invalid\n        /* \"#utility.yul\":6078:6080   */\n    tag_227:\n      pop\n        /* \"#utility.yul\":6162:6166   */\n      0x1f\n        /* \"#utility.yul\":6150:6167   */\n      add\n        /* \"#utility.yul\":6169:6235   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        /* \"#utility.yul\":6146:6236   */\n      and\n        /* \"#utility.yul\":6238:6242   */\n      0x20\n        /* \"#utility.yul\":6142:6243   */\n      add\n      swap1\n        /* \"#utility.yul\":6068:6249   */\n      jump\t// out\n        /* \"#utility.yul\":6254:6512   */\n    tag_210:\n        /* \"#utility.yul\":6326:6327   */\n      0x00\n        /* \"#utility.yul\":6336:6449   */\n    tag_229:\n        /* \"#utility.yul\":6350:6356   */\n      dup4\n        /* \"#utility.yul\":6347:6348   */\n      dup2\n        /* \"#utility.yul\":6344:6357   */\n      lt\n        /* \"#utility.yul\":6336:6449   */\n      iszero\n      tag_231\n      jumpi\n        /* \"#utility.yul\":6426:6437   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":6420:6438   */\n      mload\n        /* \"#utility.yul\":6407:6418   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":6400:6439   */\n      mstore\n        /* \"#utility.yul\":6372:6374   */\n      0x20\n        /* \"#utility.yul\":6365:6375   */\n      add\n        /* \"#utility.yul\":6336:6449   */\n      jump(tag_229)\n    tag_231:\n        /* \"#utility.yul\":6467:6473   */\n      dup4\n        /* \"#utility.yul\":6464:6465   */\n      dup2\n        /* \"#utility.yul\":6461:6474   */\n      gt\n        /* \"#utility.yul\":6458:6460   */\n      iszero\n      tag_232\n      jumpi\n        /* \"#utility.yul\":6502:6503   */\n      0x00\n        /* \"#utility.yul\":6493:6499   */\n      dup5\n        /* \"#utility.yul\":6488:6491   */\n      dup5\n        /* \"#utility.yul\":6484:6500   */\n      add\n        /* \"#utility.yul\":6477:6504   */\n      mstore\n        /* \"#utility.yul\":6458:6460   */\n    tag_232:\n      pop\n        /* \"#utility.yul\":6307:6512   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6517:6673   */\n    tag_188:\n        /* \"#utility.yul\":6605:6647   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":6598:6603   */\n      dup2\n        /* \"#utility.yul\":6594:6648   */\n      and\n        /* \"#utility.yul\":6587:6592   */\n      dup2\n        /* \"#utility.yul\":6584:6649   */\n      eq\n        /* \"#utility.yul\":6574:6576   */\n      tag_234\n      jumpi\n        /* \"#utility.yul\":6663:6664   */\n      0x00\n        /* \"#utility.yul\":6660:6661   */\n      dup1\n        /* \"#utility.yul\":6653:6665   */\n      revert\n        /* \"#utility.yul\":6574:6576   */\n    tag_234:\n        /* \"#utility.yul\":6564:6673   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212200607274924cf1b4c0e7330c28384d7f4b7a979be32c5bb668191a56f88c2dd4064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:507:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "76:117:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "86:22:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "101:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "95:13:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "171:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "180:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "183:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "173:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "173:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "173:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "130:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "141:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "156:3:18",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "161:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "152:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "152:11:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "165:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "148:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "148:19:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "137:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "137:31:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "127:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "127:42:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:50:18"
															},
															"nodeType": "YulIf",
															"src": "117:2:18"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "55:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "66:5:18",
														"type": ""
													}
												],
												"src": "14:179:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "296:209:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "342:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "351:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "359:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "344:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "344:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "344:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "317:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "326:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "313:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "313:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "338:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "309:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "309:32:18"
															},
															"nodeType": "YulIf",
															"src": "306:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "377:52:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "419:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "387:31:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "387:42:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "377:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "438:61:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "484:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "495:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "480:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "480:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "448:31:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "448:51:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "254:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "265:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "277:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "285:6:18",
														"type": ""
													}
												],
												"src": "198:307:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561001057600080fd5b5060405161130e38038061130e83398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c6112406100ce60003980610342525080610366528061058652806106d552506112406000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527ff1804c752c7c65cc02f2ee3526f62cd20f9f0f6b31c1608c7d7504d2c177bc2360d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea26469706673582212200607274924cf1b4c0e7330c28384d7f4b7a979be32c5bb668191a56f88c2dd4064736f6c63430007060033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x130E CODESIZE SUB DUP1 PUSH2 0x130E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH2 0x9B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x84 DUP4 PUSH2 0x4D JUMP JUMPDEST SWAP2 POP PUSH2 0x92 PUSH1 0x20 DUP5 ADD PUSH2 0x4D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x1240 PUSH2 0xCE PUSH1 0x0 CODECOPY DUP1 PUSH2 0x342 MSTORE POP DUP1 PUSH2 0x366 MSTORE DUP1 PUSH2 0x586 MSTORE DUP1 PUSH2 0x6D5 MSTORE POP PUSH2 0x1240 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC45A0155 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xF7729D43 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x101 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x30D07F21 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0xBE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9E JUMP JUMPDEST PUSH2 0x116 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x17B JUMP JUMPDEST PUSH2 0xC6 PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xC6 PUSH2 0x364 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9E JUMP JUMPDEST PUSH2 0x388 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xF04 JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x124 DUP5 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x134 DUP8 PUSH2 0x668 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x148 DUP3 DUP5 DUP4 DUP10 PUSH1 0x0 PUSH2 0x17B JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x160 JUMPI PUSH2 0x159 DUP8 PUSH2 0x699 JUMP JUMPDEST SWAP7 POP PUSH2 0x16C JUMP JUMPDEST DUP6 SWAP5 POP POP POP POP POP PUSH2 0x175 JUMP JUMPDEST POP POP POP POP PUSH2 0x119 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP8 DUP3 AND LT SWAP1 DUP4 AND PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP5 SWAP1 SSTORE JUMPDEST PUSH2 0x1B1 DUP8 DUP8 DUP8 PUSH2 0x6CE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x1D7 DUP9 PUSH2 0x70C JUMP JUMPDEST PUSH1 0x0 SUB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ISZERO PUSH2 0x1FC JUMPI DUP8 PUSH2 0x222 JUMP JUMPDEST DUP6 PUSH2 0x21B JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x222 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP12 DUP12 DUP15 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x237 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2CD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2CA SWAP2 DUP2 ADD SWAP1 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x333 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2FB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x300 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 SSTORE JUMPDEST PUSH2 0x32A DUP2 PUSH2 0x73E JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x337 JUMP JUMPDEST POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x396 DUP5 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3A6 DUP8 PUSH2 0x668 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x3BA DUP4 DUP4 DUP4 DUP10 PUSH1 0x0 PUSH2 0x3D6 JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x160 JUMPI PUSH2 0x3CB DUP8 PUSH2 0x699 JUMP JUMPDEST SWAP7 POP POP POP POP POP PUSH2 0x38B JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND SWAP1 DUP8 AND LT PUSH2 0x3FF DUP8 DUP8 DUP8 PUSH2 0x6CE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x425 DUP9 PUSH2 0x70C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ISZERO PUSH2 0x447 JUMPI DUP8 PUSH2 0x46D JUMP JUMPDEST DUP6 PUSH2 0x466 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x46D JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP13 DUP12 DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x482 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x518 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x515 SWAP2 DUP2 ADD SWAP1 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x333 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x546 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x54B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x32A DUP2 PUSH2 0x73E JUMP JUMPDEST PUSH1 0x0 DUP4 SGT DUP1 PUSH2 0x564 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST PUSH2 0x56D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x57B DUP5 PUSH2 0x668 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x5AD PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0x7EF JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 SGT PUSH2 0x5F3 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT DUP9 DUP11 PUSH1 0x0 SUB PUSH2 0x628 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT DUP10 DUP10 PUSH1 0x0 SUB JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 ISZERO PUSH2 0x63F JUMPI PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x676 DUP5 DUP3 PUSH2 0x805 JUMP JUMPDEST SWAP3 POP PUSH2 0x683 DUP5 PUSH1 0x14 PUSH2 0x905 JUMP JUMPDEST SWAP1 POP PUSH2 0x690 DUP5 PUSH1 0x17 PUSH2 0x805 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x175 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9 ADD PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x704 PUSH32 0x0 PUSH2 0x6FF DUP7 DUP7 DUP7 PUSH2 0xBDC JUMP JUMPDEST PUSH2 0xC59 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 LT PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 EQ PUSH2 0x7DB JUMPI PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x78E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x785 SWAP1 PUSH2 0x1111 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0xF52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x785 SWAP2 SWAP1 PUSH2 0x10F7 JUMP JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x175 SWAP2 SWAP1 PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x337 DUP6 PUSH2 0x800 DUP7 DUP7 DUP7 PUSH2 0xBDC JUMP JUMPDEST PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x879 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F416464726573735F6F766572666C6F770000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x8EC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F416464726573735F6F75744F66426F756E64730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x979 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F55696E7432345F6F766572666C6F77000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F55696E7432345F6F75744F66426F756E6473000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0xA69 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F766572666C6F77000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0xADA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F766572666C6F77000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0xB4C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F75744F66426F756E6473000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0xB6B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBD3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0xBA4 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xB8C JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBE4 PUSH2 0xDBF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0xC1C JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xC9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xF1804C752C7C65CC02F2EE3526F62CD20F9F0F6B31C1608C7D7504D2C177BC23 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD9B DUP4 DUP4 PUSH2 0xC59 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDEF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE02 PUSH2 0xDFD DUP3 PUSH2 0x1175 JUMP JUMPDEST PUSH2 0x1151 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xE16 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE47 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xE52 DUP2 PUSH2 0x11E5 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0xE62 DUP2 PUSH2 0x11E5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE79 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0xE90 DUP2 PUSH2 0x11E5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEB0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEC6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xED2 DUP6 DUP3 DUP7 ADD PUSH2 0xDDF JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEF3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF18 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF3C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF48 DUP7 DUP3 DUP8 ADD PUSH2 0xDDF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF63 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF79 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0xF89 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xF97 PUSH2 0xDFD DUP3 PUSH2 0x1175 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0xFAB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x337 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFCD JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xFEC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x14 DUP3 ADD MSTORE SWAP3 SHL AND PUSH1 0x17 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP7 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE DUP6 PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x10EC PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xFD4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x110A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xFD4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6578706563746564206572726F7200000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x116D JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1189 JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11D0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11B8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x11DF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD SMOD 0x27 0x49 0x24 0xCF SHL 0x4C 0xE PUSH20 0x30C28384D7F4B7A979BE32C5BB668191A56F88C2 0xDD BLOCKHASH PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "642:5721:15:-:0;;;917:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;510:18:13;;;;;;;;538:14;;;;;642:5721:15;;14:179:18;95:13;;-1:-1:-1;;;;;137:31:18;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:307::-;;;338:2;326:9;317:7;313:23;309:32;306:2;;;359:6;351;344:22;306:2;387:42;419:9;387:42;:::i;:::-;377:52;;448:51;495:2;484:9;480:18;448:51;:::i;:::-;438:61;;296:209;;;;;:::o;:::-;642:5721:15;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6675:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "68:431:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "117:24:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "126:5:18"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "133:5:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "119:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "119:20:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "119:20:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "96:6:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "104:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "92:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "92:17:18"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "111:3:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "88:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "88:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "81:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "81:35:18"
															},
															"nodeType": "YulIf",
															"src": "78:2:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "150:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "173:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "160:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:20:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "154:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "189:64:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "249:2:18"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "219:29:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "219:33:18"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "204:14:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "204:49:18"
															},
															"variables": [
																{
																	"name": "array_1",
																	"nodeType": "YulTypedName",
																	"src": "193:7:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array_1",
																		"nodeType": "YulIdentifier",
																		"src": "269:7:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "278:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "262:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "262:19:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "262:19:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "329:24:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "338:5:18"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "345:5:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "331:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "331:20:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "331:20:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "304:6:18"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "312:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "300:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "300:15:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "317:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "296:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "296:26:18"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "324:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "293:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "293:35:18"
															},
															"nodeType": "YulIf",
															"src": "290:2:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array_1",
																				"nodeType": "YulIdentifier",
																				"src": "379:7:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "388:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "375:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "375:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "399:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "407:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "395:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "395:17:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "414:2:18"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "362:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "362:55:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "362:55:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "array_1",
																						"nodeType": "YulIdentifier",
																						"src": "441:7:18"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "450:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "437:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "437:16:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "455:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "433:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "433:27:18"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "462:5:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "426:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "426:42:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "426:42:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "477:16:18",
															"value": {
																"name": "array_1",
																"nodeType": "YulIdentifier",
																"src": "486:7:18"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "477:5:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:18",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "50:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "58:5:18",
														"type": ""
													}
												],
												"src": "14:485:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "641:658:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "688:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "697:6:18"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "705:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "690:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "690:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "690:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "662:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "671:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "658:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "658:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "683:3:18",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "654:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "654:33:18"
															},
															"nodeType": "YulIf",
															"src": "651:2:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "723:36:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "749:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "736:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "736:23:18"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "727:5:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "795:5:18"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "768:26:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "768:33:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "768:33:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "810:15:18",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "820:5:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "810:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "834:47:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "866:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "877:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "862:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "862:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "849:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "849:32:18"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "838:7:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "917:7:18"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "890:26:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "890:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "890:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "934:17:18",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "944:7:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "934:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "960:47:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "992:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1003:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "988:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "988:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "975:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "975:32:18"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "964:7:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1063:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1072:6:18"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1080:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1065:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1065:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1065:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_2",
																				"nodeType": "YulIdentifier",
																				"src": "1029:7:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_2",
																						"nodeType": "YulIdentifier",
																						"src": "1042:7:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1051:8:18",
																						"type": "",
																						"value": "0xffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1038:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1038:22:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1026:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1026:35:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1019:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1019:43:18"
															},
															"nodeType": "YulIf",
															"src": "1016:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1098:17:18",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "1108:7:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1098:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1124:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1151:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1162:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1147:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1147:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1134:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1134:32:18"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1124:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1175:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1207:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1218:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1203:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1203:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1190:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1190:33:18"
															},
															"variables": [
																{
																	"name": "value_3",
																	"nodeType": "YulTypedName",
																	"src": "1179:7:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_3",
																		"nodeType": "YulIdentifier",
																		"src": "1259:7:18"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1232:26:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1232:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1232:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1276:17:18",
															"value": {
																"name": "value_3",
																"nodeType": "YulIdentifier",
																"src": "1286:7:18"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "1276:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint24t_uint256t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "575:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "586:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "598:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "606:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "614:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "622:6:18",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "630:6:18",
														"type": ""
													}
												],
												"src": "504:795:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1400:314:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1446:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1455:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1463:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1448:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1448:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1448:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1421:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1430:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1417:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1417:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1442:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1413:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1413:32:18"
															},
															"nodeType": "YulIf",
															"src": "1410:2:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1481:37:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1508:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1495:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1495:23:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1485:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1561:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1570:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1578:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1563:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1563:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1563:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1533:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1541:18:18",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1530:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1530:30:18"
															},
															"nodeType": "YulIf",
															"src": "1527:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1596:61:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1629:9:18"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1640:6:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1625:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1625:22:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1649:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "1606:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1606:51:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1596:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1666:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1693:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1704:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1689:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1689:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1676:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1676:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1666:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes_memory_ptrt_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1358:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1369:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1381:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1389:6:18",
														"type": ""
													}
												],
												"src": "1304:410:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1815:157:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1861:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1870:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1878:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1863:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1863:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1863:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1836:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1845:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1832:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1832:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1857:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1828:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1828:32:18"
															},
															"nodeType": "YulIf",
															"src": "1825:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1896:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1912:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1906:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1906:16:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1896:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1931:35:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1951:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1962:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1947:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1947:18:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1941:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1941:25:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1931:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1773:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1784:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1796:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1804:6:18",
														"type": ""
													}
												],
												"src": "1719:253:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2088:365:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2134:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2143:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2151:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2136:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2136:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2136:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2109:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2118:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2105:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2105:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2130:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2101:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2101:32:18"
															},
															"nodeType": "YulIf",
															"src": "2098:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2169:33:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2192:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2179:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2179:23:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2169:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2211:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2238:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2249:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2234:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2234:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2221:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2221:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2211:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2262:46:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2293:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2304:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2289:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2289:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2276:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2276:32:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2266:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2351:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2360:6:18"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "2368:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2353:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2353:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2353:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2323:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2331:18:18",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2320:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2320:30:18"
															},
															"nodeType": "YulIf",
															"src": "2317:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2386:61:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2419:9:18"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2430:6:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2415:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2415:22:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2439:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "2396:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2396:51:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2386:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2038:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2049:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2061:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2069:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2077:6:18",
														"type": ""
													}
												],
												"src": "1977:476:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2549:585:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2595:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2604:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2612:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2597:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2597:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2597:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2570:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2579:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2566:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2566:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2591:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2562:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2562:32:18"
															},
															"nodeType": "YulIf",
															"src": "2559:2:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2630:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2650:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2644:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2644:16:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2634:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2703:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2712:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2720:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2705:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2705:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2705:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2675:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2683:18:18",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2672:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2672:30:18"
															},
															"nodeType": "YulIf",
															"src": "2669:2:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2738:32:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2752:9:18"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2763:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2748:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2748:22:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2742:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2818:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2827:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2835:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2820:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2820:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2820:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "2797:2:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2801:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2793:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2793:13:18"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2808:7:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2789:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2789:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2782:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2782:35:18"
															},
															"nodeType": "YulIf",
															"src": "2779:2:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2853:19:18",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2869:2:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2863:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2863:9:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2857:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2881:62:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "2939:2:18"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "2909:29:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2909:33:18"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2894:14:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2894:49:18"
															},
															"variables": [
																{
																	"name": "array",
																	"nodeType": "YulTypedName",
																	"src": "2885:5:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2959:5:18"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2966:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2952:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2952:17:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2952:17:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3015:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3024:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3032:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3017:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3017:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3017:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "2992:2:18"
																					},
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2996:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2988:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2988:11:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3001:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2984:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2984:20:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3006:7:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2981:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2981:33:18"
															},
															"nodeType": "YulIf",
															"src": "2978:2:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3076:2:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3080:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3072:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3072:11:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nodeType": "YulIdentifier",
																				"src": "3089:5:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3096:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3085:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3085:14:18"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3101:2:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3050:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3050:54:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3050:54:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3113:15:18",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "3123:5:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3113:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2515:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2526:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2538:6:18",
														"type": ""
													}
												],
												"src": "2458:676:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3220:113:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3266:26:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3275:6:18"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3283:6:18"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3268:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3268:22:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3268:22:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3241:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3250:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3237:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3237:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3262:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3233:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3233:32:18"
															},
															"nodeType": "YulIf",
															"src": "3230:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3301:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3317:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3311:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3311:16:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3301:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3186:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3197:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3209:6:18",
														"type": ""
													}
												],
												"src": "3139:194:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3389:267:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3399:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3419:5:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3413:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3413:12:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3403:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3441:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3446:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3434:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3434:19:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3434:19:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3488:5:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3495:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3484:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3484:16:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3506:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3511:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3502:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3502:14:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3518:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3462:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3462:63:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3462:63:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3534:116:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3549:3:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "3562:6:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3570:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3558:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3558:15:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3575:66:18",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "3554:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3554:88:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3545:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3545:98:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3645:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3541:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3541:109:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3534:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3366:5:18",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3373:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3381:3:18",
														"type": ""
													}
												],
												"src": "3338:318:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3834:341:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3844:76:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3854:66:18",
																"type": "",
																"value": "0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3848:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3936:3:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3949:2:18",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3953:6:18"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "3945:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3945:15:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3962:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3941:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3941:24:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3929:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3929:37:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3929:37:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3986:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3991:2:18",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3982:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3982:12:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4004:3:18",
																						"type": "",
																						"value": "232"
																					},
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "4009:6:18"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "4000:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4000:16:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4018:66:18",
																				"type": "",
																				"value": "0xffffff0000000000000000000000000000000000000000000000000000000000"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3996:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3996:89:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3975:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3975:111:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3975:111:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4106:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4111:2:18",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4102:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4102:12:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4124:2:18",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value2",
																						"nodeType": "YulIdentifier",
																						"src": "4128:6:18"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "4120:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4120:15:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4137:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4116:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4116:24:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4095:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4095:46:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4095:46:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4150:19:18",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4161:3:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4166:2:18",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4157:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4157:12:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4150:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint24_t_address__to_t_address_t_uint24_t_address__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3794:3:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3799:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3807:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3815:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3826:3:18",
														"type": ""
													}
												],
												"src": "3661:514:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4281:125:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4291:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4303:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4314:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4299:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4299:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4291:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4333:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4348:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4356:42:18",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4344:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4344:55:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4326:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4326:74:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4326:74:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4250:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4261:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4272:4:18",
														"type": ""
													}
												],
												"src": "4180:226:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4634:370:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4644:52:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4654:42:18",
																"type": "",
																"value": "0xffffffffffffffffffffffffffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4648:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4712:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4727:6:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4735:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4723:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4723:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4705:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4705:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4705:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4759:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4770:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4755:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4755:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "4789:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4782:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4782:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4775:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4775:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4748:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4748:50:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4748:50:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4818:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4829:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4814:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4814:18:18"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4834:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4807:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4807:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4807:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4861:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4872:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4857:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4857:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "4881:6:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4889:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4877:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4877:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4850:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:43:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4850:43:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4913:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4924:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4909:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4909:19:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4930:3:18",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4902:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4902:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4902:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4943:55:18",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "4970:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4982:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4993:3:18",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4978:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4978:19:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "4951:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4951:47:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4943:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4571:9:18",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "4582:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4590:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4598:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4606:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4614:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4625:4:18",
														"type": ""
													}
												],
												"src": "4411:593:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5130:100:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5147:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5158:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5140:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5140:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5140:21:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5170:54:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5197:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5209:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5220:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5205:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5205:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "5178:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:46:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5170:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5099:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5110:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5121:4:18",
														"type": ""
													}
												],
												"src": "5009:221:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5409:166:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5426:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5437:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5419:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5419:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5419:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5460:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5471:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5456:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5456:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5476:2:18",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5449:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5449:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5449:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5499:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5510:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5495:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5495:18:18"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5515:18:18",
																		"type": "",
																		"value": "Unexpected error"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5488:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5488:46:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5488:46:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5543:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5555:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5566:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5551:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5551:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5543:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9b951eb3fb3742579e39d15610bb1800acf108358e69a1cabf56fc48cbe86cff__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5386:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5400:4:18",
														"type": ""
													}
												],
												"src": "5235:340:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5681:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5691:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5703:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5714:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5699:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5699:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5691:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5733:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5744:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5650:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5661:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5672:4:18",
														"type": ""
													}
												],
												"src": "5580:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5806:198:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5816:19:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5832:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5826:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5826:9:18"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "5816:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5844:35:18",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "5866:6:18"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "5874:4:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5862:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5862:17:18"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "5848:10:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5954:13:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "5956:7:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5956:9:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5956:9:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "5897:10:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5909:18:18",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5894:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5894:34:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "5933:10:18"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5945:6:18"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5930:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5930:22:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5891:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5891:62:18"
															},
															"nodeType": "YulIf",
															"src": "5888:2:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5983:2:18",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "5987:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5976:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5976:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5976:22:18"
														}
													]
												},
												"name": "allocateMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "5786:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "5795:6:18",
														"type": ""
													}
												],
												"src": "5762:242:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6068:181:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6112:13:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "6114:7:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6114:9:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6114:9:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6084:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6092:18:18",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6081:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6081:30:18"
															},
															"nodeType": "YulIf",
															"src": "6078:2:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6134:109:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "6154:6:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6162:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6150:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6150:17:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6169:66:18",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6146:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6146:90:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6238:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6142:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6142:101:18"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "6134:4:18"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6048:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "6059:4:18",
														"type": ""
													}
												],
												"src": "6009:240:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6307:205:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6317:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6326:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "6321:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6386:63:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "6411:3:18"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6416:1:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6407:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6407:11:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "6430:3:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "6435:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6426:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6426:11:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "6420:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6420:18:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6400:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6400:39:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6400:39:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6347:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6350:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6344:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6344:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6358:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6360:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "6369:1:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6372:2:18",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6365:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6365:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "6360:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6340:3:18",
																"statements": []
															},
															"src": "6336:113:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6475:31:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "6488:3:18"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "6493:6:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6484:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6484:16:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6502:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6477:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6477:27:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6477:27:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6464:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6467:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6461:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6461:13:18"
															},
															"nodeType": "YulIf",
															"src": "6458:2:18"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "6285:3:18",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "6290:3:18",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6295:6:18",
														"type": ""
													}
												],
												"src": "6254:258:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6564:109:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6651:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6660:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6663:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6653:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6653:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6653:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6587:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6598:5:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6605:42:18",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "6594:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6594:54:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6584:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6584:65:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6577:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6577:73:18"
															},
															"nodeType": "YulIf",
															"src": "6574:2:18"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6553:5:18",
														"type": ""
													}
												],
												"src": "6517:156:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let array_1 := allocateMemory(array_allocation_size_t_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint24t_uint256t_uint160(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        if iszero(eq(value_2, and(value_2, 0xffffff))) { revert(value4, value4) }\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n        let value_3 := calldataload(add(headStart, 128))\n        validator_revert_t_address(value_3)\n        value4 := value_3\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        value0 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(value2, value2) }\n        value2 := abi_decode_t_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _2 := mload(_1)\n        let array := allocateMemory(array_allocation_size_t_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(value0, value0) }\n        copy_memory_to_memory(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint24_t_address__to_t_address_t_uint24_t_address__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000\n        mstore(pos, and(shl(96, value0), _1))\n        mstore(add(pos, 20), and(shl(232, value1), 0xffffff0000000000000000000000000000000000000000000000000000000000))\n        mstore(add(pos, 23), and(shl(96, value2), _1))\n        end := add(pos, 43)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_t_bytes(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_9b951eb3fb3742579e39d15610bb1800acf108358e69a1cabf56fc48cbe86cff__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Unexpected error\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_t_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        size := add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"834": [
									{
										"length": 32,
										"start": 870
									},
									{
										"length": 32,
										"start": 1414
									},
									{
										"length": 32,
										"start": 1749
									}
								],
								"838": [
									{
										"length": 32,
										"start": 834
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527ff1804c752c7c65cc02f2ee3526f62cd20f9f0f6b31c1608c7d7504d2c177bc2360d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea26469706673582212200607274924cf1b4c0e7330c28384d7f4b7a979be32c5bb668191a56f88c2dd4064736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC45A0155 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xF7729D43 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x101 JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x30D07F21 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0xBE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9E JUMP JUMPDEST PUSH2 0x116 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0xB9 CALLDATASIZE PUSH1 0x4 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x17B JUMP JUMPDEST PUSH2 0xC6 PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xC6 PUSH2 0x364 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9E JUMP JUMPDEST PUSH2 0x388 JUMP JUMPDEST PUSH2 0x95 PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xF04 JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x124 DUP5 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x134 DUP8 PUSH2 0x668 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x148 DUP3 DUP5 DUP4 DUP10 PUSH1 0x0 PUSH2 0x17B JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x160 JUMPI PUSH2 0x159 DUP8 PUSH2 0x699 JUMP JUMPDEST SWAP7 POP PUSH2 0x16C JUMP JUMPDEST DUP6 SWAP5 POP POP POP POP POP PUSH2 0x175 JUMP JUMPDEST POP POP POP POP PUSH2 0x119 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP8 DUP3 AND LT SWAP1 DUP4 AND PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP5 SWAP1 SSTORE JUMPDEST PUSH2 0x1B1 DUP8 DUP8 DUP8 PUSH2 0x6CE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x1D7 DUP9 PUSH2 0x70C JUMP JUMPDEST PUSH1 0x0 SUB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ISZERO PUSH2 0x1FC JUMPI DUP8 PUSH2 0x222 JUMP JUMPDEST DUP6 PUSH2 0x21B JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x222 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP12 DUP12 DUP15 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x237 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2CD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2CA SWAP2 DUP2 ADD SWAP1 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x333 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2FB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x300 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 SSTORE JUMPDEST PUSH2 0x32A DUP2 PUSH2 0x73E JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x337 JUMP JUMPDEST POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x396 DUP5 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3A6 DUP8 PUSH2 0x668 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x3BA DUP4 DUP4 DUP4 DUP10 PUSH1 0x0 PUSH2 0x3D6 JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x160 JUMPI PUSH2 0x3CB DUP8 PUSH2 0x699 JUMP JUMPDEST SWAP7 POP POP POP POP POP PUSH2 0x38B JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND SWAP1 DUP8 AND LT PUSH2 0x3FF DUP8 DUP8 DUP8 PUSH2 0x6CE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x425 DUP9 PUSH2 0x70C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND ISZERO PUSH2 0x447 JUMPI DUP8 PUSH2 0x46D JUMP JUMPDEST DUP6 PUSH2 0x466 JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x46D JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP13 DUP12 DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x482 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10A5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x518 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x515 SWAP2 DUP2 ADD SWAP1 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x333 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x546 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x54B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x32A DUP2 PUSH2 0x73E JUMP JUMPDEST PUSH1 0x0 DUP4 SGT DUP1 PUSH2 0x564 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST PUSH2 0x56D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x57B DUP5 PUSH2 0x668 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x5AD PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0x7EF JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 SGT PUSH2 0x5F3 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT DUP9 DUP11 PUSH1 0x0 SUB PUSH2 0x628 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT DUP10 DUP10 PUSH1 0x0 SUB JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 ISZERO PUSH2 0x63F JUMPI PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x676 DUP5 DUP3 PUSH2 0x805 JUMP JUMPDEST SWAP3 POP PUSH2 0x683 DUP5 PUSH1 0x14 PUSH2 0x905 JUMP JUMPDEST SWAP1 POP PUSH2 0x690 DUP5 PUSH1 0x17 PUSH2 0x805 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x175 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9 ADD PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x704 PUSH32 0x0 PUSH2 0x6FF DUP7 DUP7 DUP7 PUSH2 0xBDC JUMP JUMPDEST PUSH2 0xC59 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 LT PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 EQ PUSH2 0x7DB JUMPI PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x78E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x785 SWAP1 PUSH2 0x1111 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0xF52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x785 SWAP2 SWAP1 PUSH2 0x10F7 JUMP JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x175 SWAP2 SWAP1 PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x337 DUP6 PUSH2 0x800 DUP7 DUP7 DUP7 PUSH2 0xBDC JUMP JUMPDEST PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x879 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F416464726573735F6F766572666C6F770000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x8EC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F416464726573735F6F75744F66426F756E64730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH13 0x1000000000000000000000000 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x979 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F55696E7432345F6F766572666C6F77000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F55696E7432345F6F75744F66426F756E6473000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0xA69 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F766572666C6F77000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0xADA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F766572666C6F77000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0xB4C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F75744F66426F756E6473000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0xB6B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBD3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0xBA4 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xB8C JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBE4 PUSH2 0xDBF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0xC1C JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xC9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xF1804C752C7C65CC02F2EE3526F62CD20F9F0F6B31C1608C7D7504D2C177BC23 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD9B DUP4 DUP4 PUSH2 0xC59 JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EQ PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDEF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE02 PUSH2 0xDFD DUP3 PUSH2 0x1175 JUMP JUMPDEST PUSH2 0x1151 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xE16 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE47 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xE52 DUP2 PUSH2 0x11E5 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0xE62 DUP2 PUSH2 0x11E5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE79 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0xE90 DUP2 PUSH2 0x11E5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEB0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEC6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xED2 DUP6 DUP3 DUP7 ADD PUSH2 0xDDF JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEF3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF18 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF3C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF48 DUP7 DUP3 DUP8 ADD PUSH2 0xDDF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF63 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF79 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0xF89 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xF97 PUSH2 0xDFD DUP3 PUSH2 0x1175 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0xFAB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x337 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFCD JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xFEC DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x11B5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x14 DUP3 ADD MSTORE SWAP3 SHL AND PUSH1 0x17 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP7 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE DUP6 PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x10EC PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0xFD4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x110A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xFD4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6578706563746564206572726F7200000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x116D JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1189 JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11D0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11B8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x11DF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD SMOD 0x27 0x49 0x24 0xCF SHL 0x4C 0xE PUSH20 0x30C28384D7F4B7A979BE32C5BB668191A56F88C2 0xDD BLOCKHASH PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "642:5721:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5696:665;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4588:1074;;;;;;:::i;:::-;;:::i;408:39:13:-;;;:::i;:::-;;;;;;;:::i;316:41::-;;;:::i;3894:660:15:-;;;;;;:::i;:::-;;:::i;3042:818::-;;;;;;:::i;:::-;;:::i;1311:1245::-;;;;;;:::i;:::-;;:::i;:::-;;5696:665;5787:16;5815:540;5842:21;5866:23;:4;:21;:23::i;:::-;5842:47;;5905:16;5923:15;5940:10;5954:22;:4;:20;:22::i;:::-;5904:72;;;;;;6082:60;6105:7;6114:8;6124:3;6129:9;6140:1;6082:22;:60::i;:::-;6070:72;;6216:16;6212:133;;;6259:16;:4;:14;:16::i;:::-;6252:23;;6212:133;;;6321:9;6314:16;;;;;;;;6212:133;5815:540;;;;;;;5696:665;;;;:::o;4588:1074::-;4784:16;4830:18;;;;;;;;;4972:22;;4968:55;;4996:15;:27;;;4968:55;5049:31;5057:7;5066:8;5076:3;5049:7;:31::i;:::-;:36;;;5111:4;5184:10;5213:20;:9;:18;:20::i;:::-;5212:21;;5251:22;;;;:157;;5391:17;5251:157;;;5297:10;:70;;5340:27;5297:70;;;5310:27;5297:70;5443:8;5453:3;5458:7;5426:40;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5049:431;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5049:431:15;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;5033:623;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5538:22:15;;;5534:50;;5569:15;5562:22;;5534:50;5620:25;5638:6;5620:17;:25::i;:::-;5613:32;;;;;;5033:623;;;4588:1074;;;;;;;;;:::o;408:39:13:-;;;:::o;316:41::-;;;:::o;3894:660:15:-;3983:17;4012:536;4039:21;4063:23;:4;:21;:23::i;:::-;4039:47;;4102:15;4119:16;4137:10;4151:22;:4;:20;:22::i;:::-;4101:72;;;;;;4278:58;4300:7;4309:8;4319:3;4324:8;4334:1;4278:21;:58::i;:::-;4267:69;;4410:16;4406:132;;;4453:16;:4;:14;:16::i;:::-;4446:23;;4012:536;;;;;;3042:818;3236:17;3283:18;;;;;;;;3328:31;3283:7;3293:8;3355:3;3328:7;:31::i;:::-;:36;;;3390:4;3463:10;3491:19;:8;:17;:19::i;:::-;3528:22;;;;:157;;3668:17;3528:157;;;3574:10;:70;;3617:27;3574:70;;;3587:27;3574:70;3720:7;3729:3;3734:8;3703:40;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3328:429;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3328:429:15;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;3312:542;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3818:25;3836:6;3818:17;:25::i;1311:1245::-;1489:1;1474:12;:16;:36;;;;1509:1;1494:12;:16;1474:36;1466:45;;;;;;1585:15;1602:16;1620:10;1634:22;:4;:20;:22::i;:::-;1584:72;;;;;;1666:66;1700:7;1709;1718:8;1728:3;1666:33;:66::i;:::-;;1744:17;1763:19;1784:22;1837:1;1822:12;:16;:188;;1955:7;1944:18;;:8;:18;;;1972:12;1996;1995:13;;1822:188;;;1868:8;1858:18;;:7;:18;;;1886:12;1910;1909:13;;1822:188;1743:267;;;;;;2024:12;2020:530;;;2096:4;2090:11;2130:14;2125:3;2118:27;2174:2;2169:3;2162:15;2061:130;2326:15;;:20;2322:68;;2374:15;;2356:14;:33;2348:42;;;;;;2448:4;2442:11;2482;2477:3;2470:24;2523:2;2518:3;2511:15;992:138:12;1083:11;777:24;-1:-1:-1;1083:40:12;;992:138::o;1392:314::-;1496:14;;;1596:17;:4;1496:14;1596;:17::i;:::-;1587:26;-1:-1:-1;1629:24:12;:4;304:2;1629:13;:24::i;:::-;1623:30;-1:-1:-1;1672:27:12;:4;507:20;1672:14;:27::i;:::-;1663:36;;1392:314;;;;;:::o;2248:149::-;2364:11;;2309:12;;2340:50;;2364:4;;507:20;;2364:25;;2340:10;:50::i;1013:249:15:-;1126:14;1174:80;1201:7;1210:43;1233:6;1241;1249:3;1210:22;:43::i;:::-;1174:26;:80::i;:::-;1152:103;1013:249;-1:-1:-1;;;;1013:249:15:o;924:121:16:-;976:8;1008:6;1004:1;:10;996:19;;;;;;-1:-1:-1;1036:1:16;924:121::o;2636:372:15:-;2706:7;2729:6;:13;2746:2;2729:19;2725:231;;2784:2;2768:6;:13;:18;2764:50;;;2788:26;;;;;;;;;;:::i;:::-;;;;;;;;2764:50;2877:4;2869:6;2865:17;2855:27;;2927:6;2916:28;;;;;;;;;;;;:::i;:::-;2909:36;;;;;;;;;;;:::i;2725:231::-;2983:6;2972:29;;;;;;;;;;;;:::i;647:259:1:-;793:19;831:68;846:7;855:43;878:6;886;894:3;855:22;:43::i;:::-;831:14;:68::i;3412:416:0:-;3491:7;3533:6;3518;3527:2;3518:11;:21;;3510:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3597:6;3606:2;3597:11;3580:6;:13;:28;;3572:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3722:30:0;3738:4;3722:30;3716:37;3755:27;3712:71;;;3412:416::o;3834:365::-;3912:6;3952;3938;3947:1;3938:10;:20;;3930:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4015:6;4024:1;4015:10;3998:6;:13;:27;;3990:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4127:29:0;4143:3;4127:29;4121:36;;3834:365::o;399:3007::-;521:12;569:7;553;563:2;553:12;:23;;545:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;633:6;622:7;613:6;:16;:26;;605:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;702:7;693:6;:16;676:6;:13;:33;;668:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;742:22;805:15;;837:2099;;;;3089:4;3083:11;3070:24;;3287:1;3276:9;3269:20;3339:4;3328:9;3324:20;3318:4;3311:34;798:2565;;837:2099;1031:4;1025:11;1012:24;;1726:2;1717:7;1713:16;2128:9;2121:17;2115:4;2111:28;2099:9;2088;2084:25;2080:60;2180:7;2176:2;2172:16;2448:6;2434:9;2427:17;2421:4;2417:28;2405:9;2397:6;2393:22;2389:57;2385:70;2210:461;2485:3;2481:2;2478:11;2210:461;;;2639:9;;2628:21;;2530:4;2522:13;;;;2566;2210:461;;;-1:-1:-1;;2693:26:0;;;2913:2;2896:11;2909:7;2892:25;2886:4;2879:39;-1:-1:-1;798:2565:0;-1:-1:-1;3390:9:0;399:3007;-1:-1:-1;;;;399:3007:0:o;784:274:14:-;901:14;;:::i;:::-;940:6;931:15;;:6;:15;;;927:56;;;968:6;;976;927:56;-1:-1:-1;1000:51:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;784:274::o;1305:512::-;1389:12;1434:3;:10;;;1421:23;;:3;:10;;;:23;;;1413:32;;;;;;-1:-1:-1;1668:10:14;;1680;;;;;1692:7;;;;;1657:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1647:54;;;;;;1539:229;;;;;;;;;;;;;;;;;;;;;241:66;1539:229;;;;;;;;;;;;;;;;;;;;;;;;;1508:278;;;;;;1305:512::o;1153:279:1:-;1277:19;1334:44;1361:7;1370;1334:26;:44::i;:::-;1312:67;-1:-1:-1;1397:10:1;:27;;;;1389:36;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:485:18:-;;111:3;104:4;96:6;92:17;88:27;78:2;;133:5;126;119:20;78:2;173:6;160:20;204:49;219:33;249:2;219:33;:::i;:::-;204:49;:::i;:::-;278:2;269:7;262:19;324:3;317:4;312:2;304:6;300:15;296:26;293:35;290:2;;;345:5;338;331:20;290:2;414;407:4;399:6;395:17;388:4;379:7;375:18;362:55;437:16;;;455:4;433:27;426:42;;;;441:7;68:431;-1:-1:-1;;68:431:18:o;504:795::-;;;;;;683:3;671:9;662:7;658:23;654:33;651:2;;;705:6;697;690:22;651:2;749:9;736:23;768:33;795:5;768:33;:::i;:::-;820:5;-1:-1:-1;877:2:18;862:18;;849:32;890:35;849:32;890:35;:::i;:::-;944:7;-1:-1:-1;1003:2:18;988:18;;975:32;1051:8;1038:22;;1026:35;;1016:2;;1080:6;1072;1065:22;1016:2;1108:7;-1:-1:-1;1162:2:18;1147:18;;1134:32;;-1:-1:-1;1218:3:18;1203:19;;1190:33;1232:35;1190:33;1232:35;:::i;:::-;1286:7;1276:17;;;641:658;;;;;;;;:::o;1304:410::-;;;1442:2;1430:9;1421:7;1417:23;1413:32;1410:2;;;1463:6;1455;1448:22;1410:2;1508:9;1495:23;1541:18;1533:6;1530:30;1527:2;;;1578:6;1570;1563:22;1527:2;1606:51;1649:7;1640:6;1629:9;1625:22;1606:51;:::i;:::-;1596:61;1704:2;1689:18;;;;1676:32;;-1:-1:-1;;;;1400:314:18:o;1719:253::-;;;1857:2;1845:9;1836:7;1832:23;1828:32;1825:2;;;1878:6;1870;1863:22;1825:2;-1:-1:-1;;1906:16:18;;1962:2;1947:18;;;1941:25;1906:16;;1941:25;;-1:-1:-1;1815:157:18:o;1977:476::-;;;;2130:2;2118:9;2109:7;2105:23;2101:32;2098:2;;;2151:6;2143;2136:22;2098:2;2192:9;2179:23;2169:33;;2249:2;2238:9;2234:18;2221:32;2211:42;;2304:2;2293:9;2289:18;2276:32;2331:18;2323:6;2320:30;2317:2;;;2368:6;2360;2353:22;2317:2;2396:51;2439:7;2430:6;2419:9;2415:22;2396:51;:::i;:::-;2386:61;;;2088:365;;;;;:::o;2458:676::-;;2591:2;2579:9;2570:7;2566:23;2562:32;2559:2;;;2612:6;2604;2597:22;2559:2;2650:9;2644:16;2683:18;2675:6;2672:30;2669:2;;;2720:6;2712;2705:22;2669:2;2748:22;;2801:4;2793:13;;2789:27;-1:-1:-1;2779:2:18;;2835:6;2827;2820:22;2779:2;2869;2863:9;2894:49;2909:33;2939:2;2909:33;:::i;2894:49::-;2966:2;2959:5;2952:17;3006:7;3001:2;2996;2992;2988:11;2984:20;2981:33;2978:2;;;3032:6;3024;3017:22;2978:2;3050:54;3101:2;3096;3089:5;3085:14;3080:2;3076;3072:11;3050:54;:::i;3139:194::-;;3262:2;3250:9;3241:7;3237:23;3233:32;3230:2;;;3283:6;3275;3268:22;3230:2;-1:-1:-1;3311:16:18;;3220:113;-1:-1:-1;3220:113:18:o;3338:318::-;;3419:5;3413:12;3446:6;3441:3;3434:19;3462:63;3518:6;3511:4;3506:3;3502:14;3495:4;3488:5;3484:16;3462:63;:::i;:::-;3570:2;3558:15;3575:66;3554:88;3545:98;;;;3645:4;3541:109;;3389:267;-1:-1:-1;;3389:267:18:o;3661:514::-;3949:2;3945:15;;;3854:66;3941:24;;;3929:37;;4004:3;4000:16;;;;4018:66;3996:89;3991:2;3982:12;;3975:111;4120:15;;4116:24;4111:2;4102:12;;4095:46;4166:2;4157:12;;3834:341::o;4180:226::-;4356:42;4344:55;;;;4326:74;;4314:2;4299:18;;4281:125::o;4411:593::-;;4654:42;4735:2;4727:6;4723:15;4712:9;4705:34;4789:6;4782:14;4775:22;4770:2;4759:9;4755:18;4748:50;4834:6;4829:2;4818:9;4814:18;4807:34;4889:2;4881:6;4877:15;4872:2;4861:9;4857:18;4850:43;;4930:3;4924;4913:9;4909:19;4902:32;4951:47;4993:3;4982:9;4978:19;4970:6;4951:47;:::i;:::-;4943:55;4634:370;-1:-1:-1;;;;;;;4634:370:18:o;5009:221::-;;5158:2;5147:9;5140:21;5178:46;5220:2;5209:9;5205:18;5197:6;5178:46;:::i;:::-;5170:54;5130:100;-1:-1:-1;;;5130:100:18:o;5235:340::-;5437:2;5419:21;;;5476:2;5456:18;;;5449:30;5515:18;5510:2;5495:18;;5488:46;5566:2;5551:18;;5409:166::o;5580:177::-;5726:25;;;5714:2;5699:18;;5681:76::o;5762:242::-;5832:2;5826:9;5862:17;;;5909:18;5894:34;;5930:22;;;5891:62;5888:2;;;5956:9;5888:2;5983;5976:22;5806:198;;-1:-1:-1;5806:198:18:o;6009:240::-;;6092:18;6084:6;6081:30;6078:2;;;6114:9;6078:2;-1:-1:-1;6162:4:18;6150:17;6169:66;6146:90;6238:4;6142:101;;6068:181::o;6254:258::-;6326:1;6336:113;6350:6;6347:1;6344:13;6336:113;;;6426:11;;;6420:18;6407:11;;;6400:39;6372:2;6365:10;6336:113;;;6467:6;6464:1;6461:13;6458:2;;;6502:1;6493:6;6488:3;6484:16;6477:27;6458:2;;6307:205;;;:::o;6517:156::-;6605:42;6598:5;6594:54;6587:5;6584:65;6574:2;;6663:1;6660;6653:12;6574:2;6564:109;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "934400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH9()": "infinite",
								"factory()": "infinite",
								"quoteExactInput(bytes,uint256)": "infinite",
								"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "infinite",
								"quoteExactOutput(bytes,uint256)": "infinite",
								"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "infinite",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite"
							},
							"internal": {
								"getPool(address,address,uint24)": "infinite",
								"parseRevertReason(bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "C0"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "CALLVALUE",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "ISZERO",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "POP",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSHSIZE",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "CODESIZE",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "SUB",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSHSIZE",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "DUP4",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "2"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "3"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "JUMP",
									"source": 15,
									"value": "[in]"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "tag",
									"source": 15,
									"value": "2"
								},
								{
									"begin": 917,
									"end": 1007,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "60"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 510,
									"end": 528,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 510,
									"end": 528,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 510,
									"end": 528,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 510,
									"end": 528,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 510,
									"end": 528,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 510,
									"end": 528,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 510,
									"end": 528,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 510,
									"end": 528,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 538,
									"end": 552,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 538,
									"end": 552,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 538,
									"end": 552,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 538,
									"end": 552,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 538,
									"end": 552,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "9"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 14,
									"end": 193,
									"name": "tag",
									"source": 18,
									"value": "10"
								},
								{
									"begin": 14,
									"end": 193,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 95,
									"end": 108,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 95,
									"end": 108,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 137,
									"end": 168,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 137,
									"end": 168,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 127,
									"end": 169,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 127,
									"end": 169,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 117,
									"end": 119,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 183,
									"end": 184,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 180,
									"end": 181,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 173,
									"end": 185,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 117,
									"end": 119,
									"name": "tag",
									"source": 18,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 76,
									"end": 193,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 76,
									"end": 193,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "tag",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 198,
									"end": 505,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 338,
									"end": 340,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 326,
									"end": 335,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 317,
									"end": 324,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 313,
									"end": 336,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 309,
									"end": 341,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 306,
									"end": 308,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 306,
									"end": 308,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 306,
									"end": 308,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 359,
									"end": 365,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 351,
									"end": 357,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 344,
									"end": 366,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 306,
									"end": 308,
									"name": "tag",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 306,
									"end": 308,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 387,
									"end": 429,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "15"
								},
								{
									"begin": 419,
									"end": 428,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 387,
									"end": 429,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "10"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "tag",
									"source": 18,
									"value": "15"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 377,
									"end": 429,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 377,
									"end": 429,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 448,
									"end": 499,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "16"
								},
								{
									"begin": 495,
									"end": 497,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 484,
									"end": 493,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 480,
									"end": 498,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 448,
									"end": 499,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "10"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "tag",
									"source": 18,
									"value": "16"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 438,
									"end": 499,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 438,
									"end": 499,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 296,
									"end": 505,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 296,
									"end": 505,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 296,
									"end": 505,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 296,
									"end": 505,
									"name": "tag",
									"source": 18,
									"value": "9"
								},
								{
									"begin": 296,
									"end": 505,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "80"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "60"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "SHR",
									"source": 15
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "A0"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "60"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "SHR",
									"source": 15
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "ASSIGNIMMUTABLE",
									"source": 15,
									"value": "838"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "ASSIGNIMMUTABLE",
									"source": 15,
									"value": "834"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 642,
									"end": 6363,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200607274924cf1b4c0e7330c28384d7f4b7a979be32c5bb668191a56f88c2dd4064736f6c63430007060033",
									".code": [
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "CALLVALUE",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "tag",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "2"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "CALLDATALOAD",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "E0"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "SHR",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "C45A0155"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "GT",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "10"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "C45A0155"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "6"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "CDCA1753"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "7"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "F7729D43"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "8"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "FA461E33"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "9"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "2"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "tag",
											"source": 15,
											"value": "10"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "2F80BB1D"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "3"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "30D07F21"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "4AA4A4FC"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "5"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "tag",
											"source": 15,
											"value": "2"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 642,
											"end": 6363,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "tag",
											"source": 15,
											"value": "3"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "11"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "12"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "13"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "tag",
											"source": 15,
											"value": "12"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "14"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "tag",
											"source": 15,
											"value": "11"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "15"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "16"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "tag",
											"source": 15,
											"value": "15"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "RETURN",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "tag",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "11"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "18"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "19"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "tag",
											"source": 15,
											"value": "18"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "tag",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "tag",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "tag",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 316,
											"end": 357,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "tag",
											"source": 15,
											"value": "7"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "11"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "30"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "13"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "tag",
											"source": 15,
											"value": "30"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "31"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "tag",
											"source": 15,
											"value": "8"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "11"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "34"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "19"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "tag",
											"source": 15,
											"value": "34"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "35"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "tag",
											"source": 15,
											"value": "9"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "37"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "38"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "CALLDATASIZE",
											"source": 15
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "39"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "tag",
											"source": 15,
											"value": "38"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "tag",
											"source": 15,
											"value": "37"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "STOP",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "tag",
											"source": 15,
											"value": "14"
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5787,
											"end": 5803,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "tag",
											"source": 15,
											"value": "42"
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5842,
											"end": 5863,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5866,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "44"
										},
										{
											"begin": 5866,
											"end": 5870,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 5866,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "45"
										},
										{
											"begin": 5866,
											"end": 5889,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5866,
											"end": 5889,
											"name": "tag",
											"source": 15,
											"value": "44"
										},
										{
											"begin": 5866,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5842,
											"end": 5889,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5842,
											"end": 5889,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5905,
											"end": 5921,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5923,
											"end": 5938,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5940,
											"end": 5950,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5954,
											"end": 5976,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "46"
										},
										{
											"begin": 5954,
											"end": 5958,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 5954,
											"end": 5974,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "47"
										},
										{
											"begin": 5954,
											"end": 5976,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5954,
											"end": 5976,
											"name": "tag",
											"source": 15,
											"value": "46"
										},
										{
											"begin": 5954,
											"end": 5976,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5904,
											"end": 5976,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5904,
											"end": 5976,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5904,
											"end": 5976,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5904,
											"end": 5976,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5904,
											"end": 5976,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5904,
											"end": 5976,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6082,
											"end": 6142,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "48"
										},
										{
											"begin": 6105,
											"end": 6112,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 6114,
											"end": 6122,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 6124,
											"end": 6127,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 6129,
											"end": 6138,
											"name": "DUP10",
											"source": 15
										},
										{
											"begin": 6140,
											"end": 6141,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 6082,
											"end": 6104,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 6082,
											"end": 6142,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 6082,
											"end": 6142,
											"name": "tag",
											"source": 15,
											"value": "48"
										},
										{
											"begin": 6082,
											"end": 6142,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6070,
											"end": 6142,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 6070,
											"end": 6142,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6216,
											"end": 6232,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "49"
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 6259,
											"end": 6275,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "50"
										},
										{
											"begin": 6259,
											"end": 6263,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 6259,
											"end": 6273,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "51"
										},
										{
											"begin": 6259,
											"end": 6275,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 6259,
											"end": 6275,
											"name": "tag",
											"source": 15,
											"value": "50"
										},
										{
											"begin": 6259,
											"end": 6275,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6252,
											"end": 6275,
											"name": "SWAP7",
											"source": 15
										},
										{
											"begin": 6252,
											"end": 6275,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "52"
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "tag",
											"source": 15,
											"value": "49"
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6321,
											"end": 6330,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "43"
										},
										{
											"begin": 6314,
											"end": 6330,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "tag",
											"source": 15,
											"value": "52"
										},
										{
											"begin": 6212,
											"end": 6345,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "42"
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "tag",
											"source": 15,
											"value": "43"
										},
										{
											"begin": 5815,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5696,
											"end": 6361,
											"name": "JUMP",
											"source": 15,
											"value": "[out]"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "tag",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4784,
											"end": 4800,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4972,
											"end": 4994,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4972,
											"end": 4994,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 4968,
											"end": 5023,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "54"
										},
										{
											"begin": 4968,
											"end": 5023,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 4996,
											"end": 5011,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4996,
											"end": 5023,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 4996,
											"end": 5023,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4996,
											"end": 5023,
											"name": "SSTORE",
											"source": 15
										},
										{
											"begin": 4968,
											"end": 5023,
											"name": "tag",
											"source": 15,
											"value": "54"
										},
										{
											"begin": 4968,
											"end": 5023,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5080,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "55"
										},
										{
											"begin": 5057,
											"end": 5064,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 5066,
											"end": 5074,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 5076,
											"end": 5079,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5056,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "56"
										},
										{
											"begin": 5049,
											"end": 5080,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5049,
											"end": 5080,
											"name": "tag",
											"source": 15,
											"value": "55"
										},
										{
											"begin": 5049,
											"end": 5080,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5085,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5049,
											"end": 5085,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5085,
											"name": "PUSH",
											"source": 15,
											"value": "128ACB08"
										},
										{
											"begin": 5111,
											"end": 5115,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 5184,
											"end": 5194,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 5213,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "57"
										},
										{
											"begin": 5213,
											"end": 5222,
											"name": "DUP9",
											"source": 15
										},
										{
											"begin": 5213,
											"end": 5231,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "58"
										},
										{
											"begin": 5213,
											"end": 5233,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5213,
											"end": 5233,
											"name": "tag",
											"source": 15,
											"value": "57"
										},
										{
											"begin": 5213,
											"end": 5233,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5212,
											"end": 5233,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5212,
											"end": 5233,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 5251,
											"end": 5273,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5251,
											"end": 5273,
											"name": "DUP9",
											"source": 15
										},
										{
											"begin": 5251,
											"end": 5273,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 5251,
											"end": 5273,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 5251,
											"end": 5408,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "59"
										},
										{
											"begin": 5251,
											"end": 5408,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5391,
											"end": 5408,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 5251,
											"end": 5408,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "62"
										},
										{
											"begin": 5251,
											"end": 5408,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5251,
											"end": 5408,
											"name": "tag",
											"source": 15,
											"value": "59"
										},
										{
											"begin": 5251,
											"end": 5408,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5297,
											"end": 5307,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "61"
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5340,
											"end": 5367,
											"name": "PUSH",
											"source": 15,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "62"
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "tag",
											"source": 15,
											"value": "61"
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5310,
											"end": 5337,
											"name": "PUSH",
											"source": 15,
											"value": "1000276A4"
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "tag",
											"source": 15,
											"value": "62"
										},
										{
											"begin": 5297,
											"end": 5367,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5443,
											"end": 5451,
											"name": "DUP12",
											"source": 15
										},
										{
											"begin": 5453,
											"end": 5456,
											"name": "DUP12",
											"source": 15
										},
										{
											"begin": 5458,
											"end": 5465,
											"name": "DUP15",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "63"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "64"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "tag",
											"source": 15,
											"value": "63"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5426,
											"end": 5466,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "E0"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SHL",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "65"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "66"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "tag",
											"source": 15,
											"value": "65"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "EXTCODESIZE",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "67"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "tag",
											"source": 15,
											"value": "67"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "GAS",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "CALL",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "68"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "1F"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "69"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "70"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "tag",
											"source": 15,
											"value": "69"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "PUSH",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "tag",
											"source": 15,
											"value": "68"
										},
										{
											"begin": 5049,
											"end": 5480,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "71"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "75"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "1F"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "NOT",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "3F"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "RETURNDATACOPY",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "74"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "tag",
											"source": 15,
											"value": "75"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "tag",
											"source": 15,
											"value": "74"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5538,
											"end": 5560,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5538,
											"end": 5560,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 5538,
											"end": 5560,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 5534,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "76"
										},
										{
											"begin": 5534,
											"end": 5584,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 5569,
											"end": 5584,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5562,
											"end": 5584,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5562,
											"end": 5584,
											"name": "SSTORE",
											"source": 15
										},
										{
											"begin": 5534,
											"end": 5584,
											"name": "tag",
											"source": 15,
											"value": "76"
										},
										{
											"begin": 5534,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5620,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "77"
										},
										{
											"begin": 5638,
											"end": 5644,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 5620,
											"end": 5637,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "78"
										},
										{
											"begin": 5620,
											"end": 5645,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 5620,
											"end": 5645,
											"name": "tag",
											"source": 15,
											"value": "77"
										},
										{
											"begin": 5620,
											"end": 5645,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5613,
											"end": 5645,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5613,
											"end": 5645,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5613,
											"end": 5645,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5613,
											"end": 5645,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5613,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "53"
										},
										{
											"begin": 5613,
											"end": 5645,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "tag",
											"source": 15,
											"value": "71"
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 5033,
											"end": 5656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "tag",
											"source": 15,
											"value": "53"
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4588,
											"end": 5662,
											"name": "JUMP",
											"source": 15,
											"value": "[out]"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "tag",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "838"
										},
										{
											"begin": 408,
											"end": 447,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 408,
											"end": 447,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 316,
											"end": 357,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "834"
										},
										{
											"begin": 316,
											"end": 357,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 316,
											"end": 357,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "tag",
											"source": 15,
											"value": "31"
										},
										{
											"begin": 3894,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3983,
											"end": 4000,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "tag",
											"source": 15,
											"value": "81"
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4039,
											"end": 4060,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4063,
											"end": 4086,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "83"
										},
										{
											"begin": 4063,
											"end": 4067,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 4063,
											"end": 4084,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "45"
										},
										{
											"begin": 4063,
											"end": 4086,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 4063,
											"end": 4086,
											"name": "tag",
											"source": 15,
											"value": "83"
										},
										{
											"begin": 4063,
											"end": 4086,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4039,
											"end": 4086,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4039,
											"end": 4086,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4102,
											"end": 4117,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4119,
											"end": 4135,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 4137,
											"end": 4147,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4151,
											"end": 4173,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "84"
										},
										{
											"begin": 4151,
											"end": 4155,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 4151,
											"end": 4171,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "47"
										},
										{
											"begin": 4151,
											"end": 4173,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 4151,
											"end": 4173,
											"name": "tag",
											"source": 15,
											"value": "84"
										},
										{
											"begin": 4151,
											"end": 4173,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4101,
											"end": 4173,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 4101,
											"end": 4173,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4101,
											"end": 4173,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 4101,
											"end": 4173,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4101,
											"end": 4173,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 4101,
											"end": 4173,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4278,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "85"
										},
										{
											"begin": 4300,
											"end": 4307,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4309,
											"end": 4317,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4319,
											"end": 4322,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4324,
											"end": 4332,
											"name": "DUP10",
											"source": 15
										},
										{
											"begin": 4334,
											"end": 4335,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4278,
											"end": 4299,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "35"
										},
										{
											"begin": 4278,
											"end": 4336,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 4278,
											"end": 4336,
											"name": "tag",
											"source": 15,
											"value": "85"
										},
										{
											"begin": 4278,
											"end": 4336,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4267,
											"end": 4336,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 4267,
											"end": 4336,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4410,
											"end": 4426,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4406,
											"end": 4538,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 4406,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "49"
										},
										{
											"begin": 4406,
											"end": 4538,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 4453,
											"end": 4469,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "87"
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 4453,
											"end": 4467,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "51"
										},
										{
											"begin": 4453,
											"end": 4469,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 4453,
											"end": 4469,
											"name": "tag",
											"source": 15,
											"value": "87"
										},
										{
											"begin": 4453,
											"end": 4469,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4446,
											"end": 4469,
											"name": "SWAP7",
											"source": 15
										},
										{
											"begin": 4446,
											"end": 4469,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "81"
										},
										{
											"begin": 4012,
											"end": 4548,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "tag",
											"source": 15,
											"value": "35"
										},
										{
											"begin": 3042,
											"end": 3860,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3236,
											"end": 3253,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3283,
											"end": 3301,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3359,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "90"
										},
										{
											"begin": 3283,
											"end": 3290,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 3293,
											"end": 3301,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 3355,
											"end": 3358,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "56"
										},
										{
											"begin": 3328,
											"end": 3359,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3328,
											"end": 3359,
											"name": "tag",
											"source": 15,
											"value": "90"
										},
										{
											"begin": 3328,
											"end": 3359,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3364,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3328,
											"end": 3364,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3364,
											"name": "PUSH",
											"source": 15,
											"value": "128ACB08"
										},
										{
											"begin": 3390,
											"end": 3394,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 3463,
											"end": 3473,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 3491,
											"end": 3510,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "91"
										},
										{
											"begin": 3491,
											"end": 3499,
											"name": "DUP9",
											"source": 15
										},
										{
											"begin": 3491,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "58"
										},
										{
											"begin": 3491,
											"end": 3510,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3491,
											"end": 3510,
											"name": "tag",
											"source": 15,
											"value": "91"
										},
										{
											"begin": 3491,
											"end": 3510,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3528,
											"end": 3550,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3528,
											"end": 3550,
											"name": "DUP9",
											"source": 15
										},
										{
											"begin": 3528,
											"end": 3550,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3528,
											"end": 3550,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3528,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "92"
										},
										{
											"begin": 3528,
											"end": 3685,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3668,
											"end": 3685,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 3528,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "95"
										},
										{
											"begin": 3528,
											"end": 3685,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 3528,
											"end": 3685,
											"name": "tag",
											"source": 15,
											"value": "92"
										},
										{
											"begin": 3528,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3574,
											"end": 3584,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "94"
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3617,
											"end": 3644,
											"name": "PUSH",
											"source": 15,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "95"
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "tag",
											"source": 15,
											"value": "94"
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3587,
											"end": 3614,
											"name": "PUSH",
											"source": 15,
											"value": "1000276A4"
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "tag",
											"source": 15,
											"value": "95"
										},
										{
											"begin": 3574,
											"end": 3644,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3720,
											"end": 3727,
											"name": "DUP13",
											"source": 15
										},
										{
											"begin": 3729,
											"end": 3732,
											"name": "DUP12",
											"source": 15
										},
										{
											"begin": 3734,
											"end": 3742,
											"name": "DUP14",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "96"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "64"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "tag",
											"source": 15,
											"value": "96"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3703,
											"end": 3743,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "E0"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SHL",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "97"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "66"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "tag",
											"source": 15,
											"value": "97"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP8",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "EXTCODESIZE",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "98"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "tag",
											"source": 15,
											"value": "98"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "GAS",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "CALL",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "99"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "1F"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "100"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "70"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "tag",
											"source": 15,
											"value": "100"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "PUSH",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "tag",
											"source": 15,
											"value": "99"
										},
										{
											"begin": 3328,
											"end": 3757,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "71"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "105"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "1F"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "NOT",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "3F"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "RETURNDATASIZE",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "RETURNDATACOPY",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "104"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "tag",
											"source": 15,
											"value": "105"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "tag",
											"source": 15,
											"value": "104"
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3312,
											"end": 3854,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3818,
											"end": 3843,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "77"
										},
										{
											"begin": 3836,
											"end": 3842,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3818,
											"end": 3835,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "78"
										},
										{
											"begin": 3818,
											"end": 3843,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "tag",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 1311,
											"end": 2556,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1489,
											"end": 1490,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1474,
											"end": 1486,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 1474,
											"end": 1490,
											"name": "SGT",
											"source": 15
										},
										{
											"begin": 1474,
											"end": 1510,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1474,
											"end": 1510,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "109"
										},
										{
											"begin": 1474,
											"end": 1510,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 1474,
											"end": 1510,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1509,
											"end": 1510,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1494,
											"end": 1506,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 1494,
											"end": 1510,
											"name": "SGT",
											"source": 15
										},
										{
											"begin": 1474,
											"end": 1510,
											"name": "tag",
											"source": 15,
											"value": "109"
										},
										{
											"begin": 1474,
											"end": 1510,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "110"
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "tag",
											"source": 15,
											"value": "110"
										},
										{
											"begin": 1466,
											"end": 1511,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1585,
											"end": 1600,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1602,
											"end": 1618,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1620,
											"end": 1630,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1634,
											"end": 1656,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "111"
										},
										{
											"begin": 1634,
											"end": 1638,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 1634,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "47"
										},
										{
											"begin": 1634,
											"end": 1656,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1634,
											"end": 1656,
											"name": "tag",
											"source": 15,
											"value": "111"
										},
										{
											"begin": 1634,
											"end": 1656,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1584,
											"end": 1656,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 1584,
											"end": 1656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1584,
											"end": 1656,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 1584,
											"end": 1656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1584,
											"end": 1656,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 1584,
											"end": 1656,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1666,
											"end": 1732,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "112"
										},
										{
											"begin": 1700,
											"end": 1707,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "834"
										},
										{
											"begin": 1709,
											"end": 1716,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 1718,
											"end": 1726,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 1728,
											"end": 1731,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 1666,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "113"
										},
										{
											"begin": 1666,
											"end": 1732,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1666,
											"end": 1732,
											"name": "tag",
											"source": 15,
											"value": "112"
										},
										{
											"begin": 1666,
											"end": 1732,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1666,
											"end": 1732,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1744,
											"end": 1761,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1763,
											"end": 1782,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1784,
											"end": 1806,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1837,
											"end": 1838,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1822,
											"end": 1834,
											"name": "DUP10",
											"source": 15
										},
										{
											"begin": 1822,
											"end": 1838,
											"name": "SGT",
											"source": 15
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "114"
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 1955,
											"end": 1962,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 1944,
											"end": 1952,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 1972,
											"end": 1984,
											"name": "DUP9",
											"source": 15
										},
										{
											"begin": 1996,
											"end": 2008,
											"name": "DUP11",
											"source": 15
										},
										{
											"begin": 1995,
											"end": 2008,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1995,
											"end": 2008,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "115"
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "tag",
											"source": 15,
											"value": "114"
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1868,
											"end": 1876,
											"name": "DUP5",
											"source": 15
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 1858,
											"end": 1865,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "PUSH",
											"source": 15,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 1886,
											"end": 1898,
											"name": "DUP10",
											"source": 15
										},
										{
											"begin": 1910,
											"end": 1922,
											"name": "DUP10",
											"source": 15
										},
										{
											"begin": 1909,
											"end": 1922,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1909,
											"end": 1922,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "tag",
											"source": 15,
											"value": "115"
										},
										{
											"begin": 1822,
											"end": 2010,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1743,
											"end": 2010,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 1743,
											"end": 2010,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1743,
											"end": 2010,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 1743,
											"end": 2010,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 1743,
											"end": 2010,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 1743,
											"end": 2010,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 2024,
											"end": 2036,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 2020,
											"end": 2550,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 2020,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "116"
										},
										{
											"begin": 2020,
											"end": 2550,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 2096,
											"end": 2100,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 2090,
											"end": 2101,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2130,
											"end": 2144,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2125,
											"end": 2128,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2118,
											"end": 2145,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 2174,
											"end": 2176,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 2169,
											"end": 2172,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2162,
											"end": 2177,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 2061,
											"end": 2191,
											"name": "tag",
											"source": 15,
											"value": "116"
										},
										{
											"begin": 2061,
											"end": 2191,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2326,
											"end": 2341,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 2326,
											"end": 2341,
											"name": "SLOAD",
											"source": 15
										},
										{
											"begin": 2326,
											"end": 2346,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 2322,
											"end": 2390,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "119"
										},
										{
											"begin": 2322,
											"end": 2390,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 2374,
											"end": 2389,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 2374,
											"end": 2389,
											"name": "SLOAD",
											"source": 15
										},
										{
											"begin": 2356,
											"end": 2370,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2356,
											"end": 2389,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "119"
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "tag",
											"source": 15,
											"value": "119"
										},
										{
											"begin": 2348,
											"end": 2390,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2448,
											"end": 2452,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 2442,
											"end": 2453,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2482,
											"end": 2493,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 2477,
											"end": 2480,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2470,
											"end": 2494,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 2523,
											"end": 2525,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 2518,
											"end": 2521,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2511,
											"end": 2526,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1083,
											"end": 1094,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 777,
											"end": 801,
											"name": "PUSH",
											"source": 12,
											"value": "42"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 1083,
											"end": 1123,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1083,
											"end": 1123,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 992,
											"end": 1130,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1496,
											"end": 1510,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1496,
											"end": 1510,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1496,
											"end": 1510,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1596,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 1596,
											"end": 1600,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1496,
											"end": 1510,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1596,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 1596,
											"end": 1613,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1596,
											"end": 1613,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 1596,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1629,
											"end": 1653,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 1629,
											"end": 1633,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1629,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 1629,
											"end": 1653,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1629,
											"end": 1653,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 1629,
											"end": 1653,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1623,
											"end": 1653,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1672,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 1672,
											"end": 1676,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 507,
											"end": 527,
											"name": "PUSH",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1672,
											"end": 1686,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 1672,
											"end": 1699,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1672,
											"end": 1699,
											"name": "tag",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 1672,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1663,
											"end": 1699,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1663,
											"end": 1699,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1392,
											"end": 1706,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2248,
											"end": 2397,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 2248,
											"end": 2397,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2364,
											"end": 2375,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2364,
											"end": 2375,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2309,
											"end": 2321,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2309,
											"end": 2321,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2340,
											"end": 2390,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 2340,
											"end": 2390,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2364,
											"end": 2368,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2364,
											"end": 2368,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 507,
											"end": 527,
											"name": "PUSH",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 507,
											"end": 527,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2364,
											"end": 2389,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9"
										},
										{
											"begin": 2364,
											"end": 2389,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2340,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "129"
										},
										{
											"begin": 2340,
											"end": 2390,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1013,
											"end": 1262,
											"name": "tag",
											"source": 15,
											"value": "56"
										},
										{
											"begin": 1013,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1126,
											"end": 1140,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1174,
											"end": 1254,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "131"
										},
										{
											"begin": 1201,
											"end": 1208,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "834"
										},
										{
											"begin": 1210,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "132"
										},
										{
											"begin": 1233,
											"end": 1239,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 1241,
											"end": 1247,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 1249,
											"end": 1252,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 1210,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "133"
										},
										{
											"begin": 1210,
											"end": 1253,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1210,
											"end": 1253,
											"name": "tag",
											"source": 15,
											"value": "132"
										},
										{
											"begin": 1210,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1174,
											"end": 1200,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "134"
										},
										{
											"begin": 1174,
											"end": 1254,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1174,
											"end": 1254,
											"name": "tag",
											"source": 15,
											"value": "131"
										},
										{
											"begin": 1174,
											"end": 1254,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1152,
											"end": 1255,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 1013,
											"end": 1262,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1013,
											"end": 1262,
											"name": "JUMP",
											"source": 15,
											"value": "[out]"
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "tag",
											"source": 16,
											"value": "58"
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 976,
											"end": 984,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1014,
											"name": "PUSH",
											"source": 16,
											"value": "8000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1004,
											"end": 1005,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1004,
											"end": 1014,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "136"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "tag",
											"source": 16,
											"value": "136"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2636,
											"end": 3008,
											"name": "tag",
											"source": 15,
											"value": "78"
										},
										{
											"begin": 2636,
											"end": 3008,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2706,
											"end": 2713,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 2729,
											"end": 2735,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2729,
											"end": 2742,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2746,
											"end": 2748,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 2729,
											"end": 2748,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 2725,
											"end": 2956,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "138"
										},
										{
											"begin": 2725,
											"end": 2956,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 2784,
											"end": 2786,
											"name": "PUSH",
											"source": 15,
											"value": "44"
										},
										{
											"begin": 2768,
											"end": 2774,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 2768,
											"end": 2781,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2768,
											"end": 2786,
											"name": "LT",
											"source": 15
										},
										{
											"begin": 2764,
											"end": 2814,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 2764,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "139"
										},
										{
											"begin": 2764,
											"end": 2814,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "PUSH",
											"source": 15,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "140"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "141"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "tag",
											"source": 15,
											"value": "140"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2788,
											"end": 2814,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 2764,
											"end": 2814,
											"name": "tag",
											"source": 15,
											"value": "139"
										},
										{
											"begin": 2764,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2877,
											"end": 2881,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 2869,
											"end": 2875,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 2865,
											"end": 2882,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2855,
											"end": 2882,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 2855,
											"end": 2882,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 2927,
											"end": 2933,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "142"
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "143"
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "tag",
											"source": 15,
											"value": "142"
										},
										{
											"begin": 2916,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "PUSH",
											"source": 15,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "PUSH",
											"source": 15,
											"value": "4"
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "140"
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "145"
										},
										{
											"begin": 2909,
											"end": 2945,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 2725,
											"end": 2956,
											"name": "tag",
											"source": 15,
											"value": "138"
										},
										{
											"begin": 2725,
											"end": 2956,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 2983,
											"end": 2989,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "43"
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "147"
										},
										{
											"begin": 2972,
											"end": 3001,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 647,
											"end": 906,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 647,
											"end": 906,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 793,
											"end": 812,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 846,
											"end": 853,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 855,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "150"
										},
										{
											"begin": 878,
											"end": 884,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 886,
											"end": 892,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 894,
											"end": 897,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 855,
											"end": 877,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 855,
											"end": 898,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 855,
											"end": 898,
											"name": "tag",
											"source": 1,
											"value": "150"
										},
										{
											"begin": 855,
											"end": 898,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 831,
											"end": 845,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 831,
											"end": 899,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3412,
											"end": 3828,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 3412,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3491,
											"end": 3498,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3533,
											"end": 3539,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3518,
											"end": 3524,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3527,
											"end": 3529,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3518,
											"end": 3529,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3518,
											"end": 3539,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3518,
											"end": 3539,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "746F416464726573735F6F766572666C6F770000000000000000000000000000"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 3510,
											"end": 3562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3597,
											"end": 3603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3606,
											"end": 3608,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3597,
											"end": 3608,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3580,
											"end": 3586,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3580,
											"end": 3593,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3580,
											"end": 3608,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3580,
											"end": 3608,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "746F416464726573735F6F75744F66426F756E64730000000000000000000000"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 3572,
											"end": 3634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3722,
											"end": 3752,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3738,
											"end": 3742,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3722,
											"end": 3752,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3716,
											"end": 3753,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3755,
											"end": 3782,
											"name": "PUSH",
											"source": 0,
											"value": "1000000000000000000000000"
										},
										{
											"begin": 3712,
											"end": 3783,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3712,
											"end": 3783,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3712,
											"end": 3783,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3412,
											"end": 3828,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3834,
											"end": 4199,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 3834,
											"end": 4199,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3912,
											"end": 3918,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3958,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3944,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3947,
											"end": 3948,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 3938,
											"end": 3948,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3958,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3938,
											"end": 3958,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "746F55696E7432345F6F766572666C6F77000000000000000000000000000000"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 3930,
											"end": 3980,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4015,
											"end": 4021,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4024,
											"end": 4025,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4015,
											"end": 4025,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3998,
											"end": 4004,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3998,
											"end": 4011,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3998,
											"end": 4025,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3998,
											"end": 4025,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "746F55696E7432345F6F75744F66426F756E6473000000000000000000000000"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 3990,
											"end": 4050,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4127,
											"end": 4156,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4143,
											"end": 4146,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4127,
											"end": 4156,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4121,
											"end": 4157,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4121,
											"end": 4157,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3834,
											"end": 4199,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 521,
											"end": 533,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 569,
											"end": 576,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 553,
											"end": 560,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 563,
											"end": 565,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 553,
											"end": 565,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 553,
											"end": 576,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 553,
											"end": 576,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "E"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "736C6963655F6F766572666C6F77000000000000000000000000000000000000"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 545,
											"end": 595,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 545,
											"end": 595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 633,
											"end": 639,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 622,
											"end": 629,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 613,
											"end": 619,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 613,
											"end": 629,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 613,
											"end": 639,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 613,
											"end": 639,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "E"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "736C6963655F6F766572666C6F77000000000000000000000000000000000000"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 605,
											"end": 658,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 605,
											"end": 658,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 702,
											"end": 709,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 693,
											"end": 699,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 693,
											"end": 709,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 676,
											"end": 682,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 676,
											"end": 689,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 676,
											"end": 709,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "736C6963655F6F75744F66426F756E6473000000000000000000000000000000"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 668,
											"end": 731,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 668,
											"end": 731,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 742,
											"end": 764,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 805,
											"end": 820,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 805,
											"end": 820,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3089,
											"end": 3093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3083,
											"end": 3094,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3070,
											"end": 3094,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3070,
											"end": 3094,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3287,
											"end": 3288,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3276,
											"end": 3285,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3269,
											"end": 3289,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3339,
											"end": 3343,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3328,
											"end": 3337,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3324,
											"end": 3344,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3318,
											"end": 3322,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3311,
											"end": 3345,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 837,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1031,
											"end": 1035,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1025,
											"end": 1036,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1012,
											"end": 1036,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1012,
											"end": 1036,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1717,
											"end": 1724,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1713,
											"end": 1729,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2128,
											"end": 2137,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2121,
											"end": 2138,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2115,
											"end": 2119,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2111,
											"end": 2139,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2088,
											"end": 2097,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2084,
											"end": 2109,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2080,
											"end": 2140,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2180,
											"end": 2187,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2176,
											"end": 2178,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2172,
											"end": 2188,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2448,
											"end": 2454,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 2434,
											"end": 2443,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2425,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2417,
											"end": 2445,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2405,
											"end": 2414,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2397,
											"end": 2403,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 2393,
											"end": 2415,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2389,
											"end": 2446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2385,
											"end": 2455,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2485,
											"end": 2488,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2481,
											"end": 2483,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2478,
											"end": 2489,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2639,
											"end": 2648,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2639,
											"end": 2648,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2649,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2530,
											"end": 2534,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2522,
											"end": 2535,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2566,
											"end": 2579,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 2210,
											"end": 2671,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2693,
											"end": 2719,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2693,
											"end": 2719,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2693,
											"end": 2719,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2913,
											"end": 2915,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2896,
											"end": 2907,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2909,
											"end": 2916,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0"
										},
										{
											"begin": 2892,
											"end": 2917,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2886,
											"end": 2890,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2879,
											"end": 2918,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 798,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 399,
											"end": 3406,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 784,
											"end": 1058,
											"name": "tag",
											"source": 14,
											"value": "133"
										},
										{
											"begin": 784,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 901,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "tag",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 901,
											"end": 915,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 940,
											"end": 946,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 931,
											"end": 946,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 931,
											"end": 946,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 931,
											"end": 937,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 931,
											"end": 946,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 931,
											"end": 946,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 931,
											"end": 946,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 927,
											"end": 983,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 927,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 927,
											"end": 983,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 968,
											"end": 974,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 968,
											"end": 974,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 976,
											"end": 982,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 927,
											"end": 983,
											"name": "tag",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 927,
											"end": 983,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFF"
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1000,
											"end": 1051,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 784,
											"end": 1058,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1305,
											"end": 1817,
											"name": "tag",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 1305,
											"end": 1817,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1389,
											"end": 1401,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 1437,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1434,
											"end": 1444,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1424,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1431,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1421,
											"end": 1431,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1431,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1444,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "tag",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1668,
											"end": 1678,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1668,
											"end": 1678,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1680,
											"end": 1690,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFF"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1657,
											"end": 1700,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1647,
											"end": 1701,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "FF00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "A1"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "B5"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 241,
											"end": 307,
											"name": "PUSH",
											"source": 14,
											"value": "F1804C752C7C65CC02F2EE3526F62CD20F9F0F6B31C1608C7D7504D2C177BC23"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "D5"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "F5"
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1539,
											"end": 1768,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 1508,
											"end": 1786,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1305,
											"end": 1817,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1153,
											"end": 1432,
											"name": "tag",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 1153,
											"end": 1432,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1277,
											"end": 1296,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1334,
											"end": 1378,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 1361,
											"end": 1368,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1370,
											"end": 1377,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1334,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 1334,
											"end": 1378,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1334,
											"end": 1378,
											"name": "tag",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 1334,
											"end": 1378,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1312,
											"end": 1379,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1397,
											"end": 1407,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 1397,
											"end": 1424,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1397,
											"end": 1424,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1397,
											"end": 1424,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1397,
											"end": 1424,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1389,
											"end": 1425,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 1389,
											"end": 1425,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1389,
											"end": 1425,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1389,
											"end": 1425,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1389,
											"end": 1425,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "168"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 499,
											"name": "tag",
											"source": 18,
											"value": "177"
										},
										{
											"begin": 14,
											"end": 499,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 14,
											"end": 499,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 111,
											"end": 114,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 104,
											"end": 108,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 96,
											"end": 102,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 92,
											"end": 109,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 88,
											"end": 115,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 78,
											"end": 80,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "179"
										},
										{
											"begin": 78,
											"end": 80,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 133,
											"end": 138,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 126,
											"end": 131,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 119,
											"end": 139,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 78,
											"end": 80,
											"name": "tag",
											"source": 18,
											"value": "179"
										},
										{
											"begin": 78,
											"end": 80,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 173,
											"end": 179,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 160,
											"end": 180,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 204,
											"end": 253,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "180"
										},
										{
											"begin": 219,
											"end": 252,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "181"
										},
										{
											"begin": 249,
											"end": 251,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 219,
											"end": 252,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "182"
										},
										{
											"begin": 219,
											"end": 252,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 219,
											"end": 252,
											"name": "tag",
											"source": 18,
											"value": "181"
										},
										{
											"begin": 219,
											"end": 252,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 204,
											"end": 253,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "183"
										},
										{
											"begin": 204,
											"end": 253,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 204,
											"end": 253,
											"name": "tag",
											"source": 18,
											"value": "180"
										},
										{
											"begin": 204,
											"end": 253,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 278,
											"end": 280,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 269,
											"end": 276,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 262,
											"end": 281,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 324,
											"end": 327,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 317,
											"end": 321,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 312,
											"end": 314,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 304,
											"end": 310,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 300,
											"end": 315,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 296,
											"end": 322,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 293,
											"end": 328,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 290,
											"end": 292,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 290,
											"end": 292,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "184"
										},
										{
											"begin": 290,
											"end": 292,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 345,
											"end": 350,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 338,
											"end": 343,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 331,
											"end": 351,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 290,
											"end": 292,
											"name": "tag",
											"source": 18,
											"value": "184"
										},
										{
											"begin": 290,
											"end": 292,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 414,
											"end": 416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 407,
											"end": 411,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 399,
											"end": 405,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 395,
											"end": 412,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 388,
											"end": 392,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 379,
											"end": 386,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 375,
											"end": 393,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 362,
											"end": 417,
											"name": "CALLDATACOPY",
											"source": 18
										},
										{
											"begin": 437,
											"end": 453,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 437,
											"end": 453,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 437,
											"end": 453,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 455,
											"end": 459,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 433,
											"end": 460,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 426,
											"end": 468,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 426,
											"end": 468,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 426,
											"end": 468,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 426,
											"end": 468,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 441,
											"end": 448,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 68,
											"end": 499,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 68,
											"end": 499,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "tag",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 504,
											"end": 1299,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 683,
											"end": 686,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 671,
											"end": 680,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 662,
											"end": 669,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 658,
											"end": 681,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 654,
											"end": 687,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 651,
											"end": 653,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 651,
											"end": 653,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "186"
										},
										{
											"begin": 651,
											"end": 653,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 705,
											"end": 711,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 697,
											"end": 703,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 690,
											"end": 712,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 651,
											"end": 653,
											"name": "tag",
											"source": 18,
											"value": "186"
										},
										{
											"begin": 651,
											"end": 653,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 749,
											"end": 758,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 736,
											"end": 759,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 768,
											"end": 801,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "187"
										},
										{
											"begin": 795,
											"end": 800,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 768,
											"end": 801,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "188"
										},
										{
											"begin": 768,
											"end": 801,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 768,
											"end": 801,
											"name": "tag",
											"source": 18,
											"value": "187"
										},
										{
											"begin": 768,
											"end": 801,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 820,
											"end": 825,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 877,
											"end": 879,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 862,
											"end": 880,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 862,
											"end": 880,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 849,
											"end": 881,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 890,
											"end": 925,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "189"
										},
										{
											"begin": 849,
											"end": 881,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 890,
											"end": 925,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "188"
										},
										{
											"begin": 890,
											"end": 925,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 890,
											"end": 925,
											"name": "tag",
											"source": 18,
											"value": "189"
										},
										{
											"begin": 890,
											"end": 925,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 944,
											"end": 951,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1003,
											"end": 1005,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 988,
											"end": 1006,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 988,
											"end": 1006,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 975,
											"end": 1007,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1051,
											"end": 1059,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFF"
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1038,
											"end": 1060,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1026,
											"end": 1061,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1026,
											"end": 1061,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1016,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "190"
										},
										{
											"begin": 1016,
											"end": 1018,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1080,
											"end": 1086,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1072,
											"end": 1078,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1065,
											"end": 1087,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1016,
											"end": 1018,
											"name": "tag",
											"source": 18,
											"value": "190"
										},
										{
											"begin": 1016,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1108,
											"end": 1115,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1162,
											"end": 1164,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 1147,
											"end": 1165,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1147,
											"end": 1165,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1134,
											"end": 1166,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1134,
											"end": 1166,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1218,
											"end": 1221,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1203,
											"end": 1222,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1203,
											"end": 1222,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1190,
											"end": 1223,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1232,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "191"
										},
										{
											"begin": 1190,
											"end": 1223,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1232,
											"end": 1267,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "188"
										},
										{
											"begin": 1232,
											"end": 1267,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1232,
											"end": 1267,
											"name": "tag",
											"source": 18,
											"value": "191"
										},
										{
											"begin": 1232,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1286,
											"end": 1293,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1276,
											"end": 1293,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1276,
											"end": 1293,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1276,
											"end": 1293,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 641,
											"end": 1299,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1304,
											"end": 1714,
											"name": "tag",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 1304,
											"end": 1714,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1304,
											"end": 1714,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1714,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1444,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1430,
											"end": 1439,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1421,
											"end": 1428,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1417,
											"end": 1440,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1413,
											"end": 1445,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1410,
											"end": 1412,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1410,
											"end": 1412,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "193"
										},
										{
											"begin": 1410,
											"end": 1412,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1455,
											"end": 1461,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1448,
											"end": 1470,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1410,
											"end": 1412,
											"name": "tag",
											"source": 18,
											"value": "193"
										},
										{
											"begin": 1410,
											"end": 1412,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1508,
											"end": 1517,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1495,
											"end": 1518,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1559,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1533,
											"end": 1539,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1530,
											"end": 1560,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1527,
											"end": 1529,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1527,
											"end": 1529,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "194"
										},
										{
											"begin": 1527,
											"end": 1529,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1578,
											"end": 1584,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1570,
											"end": 1576,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1563,
											"end": 1585,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1527,
											"end": 1529,
											"name": "tag",
											"source": 18,
											"value": "194"
										},
										{
											"begin": 1527,
											"end": 1529,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1606,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "195"
										},
										{
											"begin": 1649,
											"end": 1656,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1640,
											"end": 1646,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1638,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1625,
											"end": 1647,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1606,
											"end": 1657,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "177"
										},
										{
											"begin": 1606,
											"end": 1657,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1606,
											"end": 1657,
											"name": "tag",
											"source": 18,
											"value": "195"
										},
										{
											"begin": 1606,
											"end": 1657,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1596,
											"end": 1657,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1706,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1689,
											"end": 1707,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1689,
											"end": 1707,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1689,
											"end": 1707,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1689,
											"end": 1707,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1708,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1708,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1400,
											"end": 1714,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1719,
											"end": 1972,
											"name": "tag",
											"source": 18,
											"value": "70"
										},
										{
											"begin": 1719,
											"end": 1972,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1719,
											"end": 1972,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1719,
											"end": 1972,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1857,
											"end": 1859,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1845,
											"end": 1854,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1836,
											"end": 1843,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1832,
											"end": 1855,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1828,
											"end": 1860,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1825,
											"end": 1827,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1825,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "197"
										},
										{
											"begin": 1825,
											"end": 1827,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1878,
											"end": 1884,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1870,
											"end": 1876,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1863,
											"end": 1885,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1825,
											"end": 1827,
											"name": "tag",
											"source": 18,
											"value": "197"
										},
										{
											"begin": 1825,
											"end": 1827,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1906,
											"end": 1922,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1906,
											"end": 1922,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1962,
											"end": 1964,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1947,
											"end": 1965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1947,
											"end": 1965,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1947,
											"end": 1965,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1941,
											"end": 1966,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1906,
											"end": 1922,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1906,
											"end": 1922,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1941,
											"end": 1966,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1941,
											"end": 1966,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1815,
											"end": 1972,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1977,
											"end": 2453,
											"name": "tag",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 1977,
											"end": 2453,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1977,
											"end": 2453,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1977,
											"end": 2453,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1977,
											"end": 2453,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2130,
											"end": 2132,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 2118,
											"end": 2127,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2109,
											"end": 2116,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 2105,
											"end": 2128,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2101,
											"end": 2133,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2098,
											"end": 2100,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2098,
											"end": 2100,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "199"
										},
										{
											"begin": 2098,
											"end": 2100,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2151,
											"end": 2157,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2143,
											"end": 2149,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2136,
											"end": 2158,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2098,
											"end": 2100,
											"name": "tag",
											"source": 18,
											"value": "199"
										},
										{
											"begin": 2098,
											"end": 2100,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2192,
											"end": 2201,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2179,
											"end": 2202,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2169,
											"end": 2202,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2169,
											"end": 2202,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2249,
											"end": 2251,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2238,
											"end": 2247,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2234,
											"end": 2252,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2221,
											"end": 2253,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2211,
											"end": 2253,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2211,
											"end": 2253,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2304,
											"end": 2306,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2293,
											"end": 2302,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2289,
											"end": 2307,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2276,
											"end": 2308,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2331,
											"end": 2349,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2323,
											"end": 2329,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2320,
											"end": 2350,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 2317,
											"end": 2319,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2317,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "200"
										},
										{
											"begin": 2317,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2368,
											"end": 2374,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2360,
											"end": 2366,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2353,
											"end": 2375,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2317,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "200"
										},
										{
											"begin": 2317,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2396,
											"end": 2447,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "201"
										},
										{
											"begin": 2439,
											"end": 2446,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 2430,
											"end": 2436,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2419,
											"end": 2428,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 2415,
											"end": 2437,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2396,
											"end": 2447,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "177"
										},
										{
											"begin": 2396,
											"end": 2447,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2396,
											"end": 2447,
											"name": "tag",
											"source": 18,
											"value": "201"
										},
										{
											"begin": 2396,
											"end": 2447,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2386,
											"end": 2447,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2386,
											"end": 2447,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2386,
											"end": 2447,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2088,
											"end": 2453,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2088,
											"end": 2453,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2088,
											"end": 2453,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2088,
											"end": 2453,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2088,
											"end": 2453,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2088,
											"end": 2453,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2458,
											"end": 3134,
											"name": "tag",
											"source": 18,
											"value": "143"
										},
										{
											"begin": 2458,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2458,
											"end": 3134,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2591,
											"end": 2593,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2579,
											"end": 2588,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2570,
											"end": 2577,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2566,
											"end": 2589,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2562,
											"end": 2594,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2559,
											"end": 2561,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2559,
											"end": 2561,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "203"
										},
										{
											"begin": 2559,
											"end": 2561,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2612,
											"end": 2618,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2604,
											"end": 2610,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2597,
											"end": 2619,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2559,
											"end": 2561,
											"name": "tag",
											"source": 18,
											"value": "203"
										},
										{
											"begin": 2559,
											"end": 2561,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2650,
											"end": 2659,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2644,
											"end": 2660,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2683,
											"end": 2701,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2672,
											"end": 2702,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 2669,
											"end": 2671,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2669,
											"end": 2671,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "204"
										},
										{
											"begin": 2669,
											"end": 2671,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2720,
											"end": 2726,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2712,
											"end": 2718,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2705,
											"end": 2727,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2669,
											"end": 2671,
											"name": "tag",
											"source": 18,
											"value": "204"
										},
										{
											"begin": 2669,
											"end": 2671,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2748,
											"end": 2770,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2748,
											"end": 2770,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2801,
											"end": 2805,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 2793,
											"end": 2806,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2793,
											"end": 2806,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2789,
											"end": 2816,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 2779,
											"end": 2781,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "205"
										},
										{
											"begin": 2779,
											"end": 2781,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2835,
											"end": 2841,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2827,
											"end": 2833,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2820,
											"end": 2842,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2779,
											"end": 2781,
											"name": "tag",
											"source": 18,
											"value": "205"
										},
										{
											"begin": 2779,
											"end": 2781,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2869,
											"end": 2871,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2863,
											"end": 2872,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2894,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "206"
										},
										{
											"begin": 2909,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "181"
										},
										{
											"begin": 2939,
											"end": 2941,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2909,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "182"
										},
										{
											"begin": 2909,
											"end": 2942,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2894,
											"end": 2943,
											"name": "tag",
											"source": 18,
											"value": "206"
										},
										{
											"begin": 2894,
											"end": 2943,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2966,
											"end": 2968,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2959,
											"end": 2964,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2952,
											"end": 2969,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3006,
											"end": 3013,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3001,
											"end": 3003,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2996,
											"end": 2998,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2992,
											"end": 2994,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2988,
											"end": 2999,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2984,
											"end": 3004,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2981,
											"end": 3014,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 2978,
											"end": 2980,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2978,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "208"
										},
										{
											"begin": 2978,
											"end": 2980,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3032,
											"end": 3038,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3024,
											"end": 3030,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3017,
											"end": 3039,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2978,
											"end": 2980,
											"name": "tag",
											"source": 18,
											"value": "208"
										},
										{
											"begin": 2978,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3050,
											"end": 3104,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3096,
											"end": 3098,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3089,
											"end": 3094,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3085,
											"end": 3099,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3080,
											"end": 3082,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3076,
											"end": 3078,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3072,
											"end": 3083,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3050,
											"end": 3104,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "210"
										},
										{
											"begin": 3050,
											"end": 3104,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3139,
											"end": 3333,
											"name": "tag",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 3139,
											"end": 3333,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3139,
											"end": 3333,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3262,
											"end": 3264,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3250,
											"end": 3259,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3241,
											"end": 3248,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3237,
											"end": 3260,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 3233,
											"end": 3265,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 3230,
											"end": 3232,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3230,
											"end": 3232,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "212"
										},
										{
											"begin": 3230,
											"end": 3232,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3283,
											"end": 3289,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3275,
											"end": 3281,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3268,
											"end": 3290,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3230,
											"end": 3232,
											"name": "tag",
											"source": 18,
											"value": "212"
										},
										{
											"begin": 3230,
											"end": 3232,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3311,
											"end": 3327,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3311,
											"end": 3327,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3220,
											"end": 3333,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3220,
											"end": 3333,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3338,
											"end": 3656,
											"name": "tag",
											"source": 18,
											"value": "213"
										},
										{
											"begin": 3338,
											"end": 3656,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3338,
											"end": 3656,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3419,
											"end": 3424,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3413,
											"end": 3425,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3446,
											"end": 3452,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3441,
											"end": 3444,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3434,
											"end": 3453,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "215"
										},
										{
											"begin": 3518,
											"end": 3524,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3511,
											"end": 3515,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3506,
											"end": 3509,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3502,
											"end": 3516,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3495,
											"end": 3499,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3488,
											"end": 3493,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "210"
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "tag",
											"source": 18,
											"value": "215"
										},
										{
											"begin": 3462,
											"end": 3525,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3570,
											"end": 3572,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 3558,
											"end": 3573,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3575,
											"end": 3641,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0"
										},
										{
											"begin": 3554,
											"end": 3642,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3545,
											"end": 3643,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3545,
											"end": 3643,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3545,
											"end": 3643,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3545,
											"end": 3643,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3645,
											"end": 3649,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3541,
											"end": 3650,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3541,
											"end": 3650,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3389,
											"end": 3656,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3389,
											"end": 3656,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3661,
											"end": 4175,
											"name": "tag",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 3661,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3949,
											"end": 3951,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 3945,
											"end": 3960,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 3945,
											"end": 3960,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3945,
											"end": 3960,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 3854,
											"end": 3920,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3929,
											"end": 3966,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3929,
											"end": 3966,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4004,
											"end": 4007,
											"name": "PUSH",
											"source": 18,
											"value": "E8"
										},
										{
											"begin": 4000,
											"end": 4016,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 4000,
											"end": 4016,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4000,
											"end": 4016,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 4000,
											"end": 4016,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 4018,
											"end": 4084,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFF0000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3996,
											"end": 4085,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3991,
											"end": 3993,
											"name": "PUSH",
											"source": 18,
											"value": "14"
										},
										{
											"begin": 3982,
											"end": 3994,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3982,
											"end": 3994,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3975,
											"end": 4086,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4120,
											"end": 4135,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4120,
											"end": 4135,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 4116,
											"end": 4140,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4111,
											"end": 4113,
											"name": "PUSH",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 4102,
											"end": 4114,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4102,
											"end": 4114,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4095,
											"end": 4141,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4166,
											"end": 4168,
											"name": "PUSH",
											"source": 18,
											"value": "2B"
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4157,
											"end": 4169,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3834,
											"end": 4175,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 4180,
											"end": 4406,
											"name": "tag",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 4180,
											"end": 4406,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4356,
											"end": 4398,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4344,
											"end": 4399,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4344,
											"end": 4399,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4344,
											"end": 4399,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4344,
											"end": 4399,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4326,
											"end": 4400,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4326,
											"end": 4400,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4314,
											"end": 4316,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4299,
											"end": 4317,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4281,
											"end": 4406,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 4411,
											"end": 5004,
											"name": "tag",
											"source": 18,
											"value": "66"
										},
										{
											"begin": 4411,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4411,
											"end": 5004,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4654,
											"end": 4696,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4735,
											"end": 4737,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4727,
											"end": 4733,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 4723,
											"end": 4738,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4712,
											"end": 4721,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4705,
											"end": 4739,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4789,
											"end": 4795,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 4782,
											"end": 4796,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4775,
											"end": 4797,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4770,
											"end": 4772,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4759,
											"end": 4768,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4755,
											"end": 4773,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4748,
											"end": 4798,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4834,
											"end": 4840,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4829,
											"end": 4831,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4818,
											"end": 4827,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4814,
											"end": 4832,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4807,
											"end": 4841,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4889,
											"end": 4891,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4881,
											"end": 4887,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4877,
											"end": 4892,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4872,
											"end": 4874,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 4861,
											"end": 4870,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4857,
											"end": 4875,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4850,
											"end": 4893,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4850,
											"end": 4893,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4930,
											"end": 4933,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 4924,
											"end": 4927,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 4913,
											"end": 4922,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4909,
											"end": 4928,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4902,
											"end": 4934,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4951,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "219"
										},
										{
											"begin": 4993,
											"end": 4996,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 4982,
											"end": 4991,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4978,
											"end": 4997,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4970,
											"end": 4976,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4951,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "213"
										},
										{
											"begin": 4951,
											"end": 4998,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 4951,
											"end": 4998,
											"name": "tag",
											"source": 18,
											"value": "219"
										},
										{
											"begin": 4951,
											"end": 4998,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4998,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": 4634,
											"end": 5004,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4634,
											"end": 5004,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5009,
											"end": 5230,
											"name": "tag",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 5009,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5009,
											"end": 5230,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5158,
											"end": 5160,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5147,
											"end": 5156,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5140,
											"end": 5161,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "221"
										},
										{
											"begin": 5220,
											"end": 5222,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5209,
											"end": 5218,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5197,
											"end": 5203,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "213"
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "tag",
											"source": 18,
											"value": "221"
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5170,
											"end": 5224,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 5130,
											"end": 5230,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5130,
											"end": 5230,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5235,
											"end": 5575,
											"name": "tag",
											"source": 18,
											"value": "141"
										},
										{
											"begin": 5235,
											"end": 5575,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5437,
											"end": 5439,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5419,
											"end": 5440,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5419,
											"end": 5440,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5419,
											"end": 5440,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5476,
											"end": 5478,
											"name": "PUSH",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 5456,
											"end": 5474,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5456,
											"end": 5474,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5456,
											"end": 5474,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5449,
											"end": 5479,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5515,
											"end": 5533,
											"name": "PUSH",
											"source": 18,
											"value": "556E6578706563746564206572726F7200000000000000000000000000000000"
										},
										{
											"begin": 5510,
											"end": 5512,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5495,
											"end": 5513,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5495,
											"end": 5513,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5488,
											"end": 5534,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5566,
											"end": 5568,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 5551,
											"end": 5569,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5551,
											"end": 5569,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5409,
											"end": 5575,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5580,
											"end": 5757,
											"name": "tag",
											"source": 18,
											"value": "16"
										},
										{
											"begin": 5580,
											"end": 5757,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5726,
											"end": 5751,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5726,
											"end": 5751,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5726,
											"end": 5751,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5714,
											"end": 5716,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5699,
											"end": 5717,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5699,
											"end": 5717,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5681,
											"end": 5757,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5762,
											"end": 6004,
											"name": "tag",
											"source": 18,
											"value": "183"
										},
										{
											"begin": 5762,
											"end": 6004,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5832,
											"end": 5834,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5826,
											"end": 5835,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5862,
											"end": 5879,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5862,
											"end": 5879,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5862,
											"end": 5879,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5909,
											"end": 5927,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5894,
											"end": 5928,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5894,
											"end": 5928,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 5930,
											"end": 5952,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5930,
											"end": 5952,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5930,
											"end": 5952,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 5891,
											"end": 5953,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 5888,
											"end": 5890,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 5888,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "225"
										},
										{
											"begin": 5888,
											"end": 5890,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5956,
											"end": 5965,
											"name": "INVALID",
											"source": 18
										},
										{
											"begin": 5888,
											"end": 5890,
											"name": "tag",
											"source": 18,
											"value": "225"
										},
										{
											"begin": 5888,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5983,
											"end": 5985,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5976,
											"end": 5998,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5806,
											"end": 6004,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5806,
											"end": 6004,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5806,
											"end": 6004,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6009,
											"end": 6249,
											"name": "tag",
											"source": 18,
											"value": "182"
										},
										{
											"begin": 6009,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6009,
											"end": 6249,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6092,
											"end": 6110,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6084,
											"end": 6090,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6081,
											"end": 6111,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 6078,
											"end": 6080,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 6078,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "227"
										},
										{
											"begin": 6078,
											"end": 6080,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6114,
											"end": 6123,
											"name": "INVALID",
											"source": 18
										},
										{
											"begin": 6078,
											"end": 6080,
											"name": "tag",
											"source": 18,
											"value": "227"
										},
										{
											"begin": 6078,
											"end": 6080,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6162,
											"end": 6166,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 6150,
											"end": 6167,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6169,
											"end": 6235,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0"
										},
										{
											"begin": 6146,
											"end": 6236,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6238,
											"end": 6242,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6142,
											"end": 6243,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6142,
											"end": 6243,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6068,
											"end": 6249,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6254,
											"end": 6512,
											"name": "tag",
											"source": 18,
											"value": "210"
										},
										{
											"begin": 6254,
											"end": 6512,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6326,
											"end": 6327,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "tag",
											"source": 18,
											"value": "229"
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6350,
											"end": 6356,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6347,
											"end": 6348,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6344,
											"end": 6357,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "231"
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6426,
											"end": 6437,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6426,
											"end": 6437,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6426,
											"end": 6437,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6420,
											"end": 6438,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 6407,
											"end": 6418,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6407,
											"end": 6418,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6407,
											"end": 6418,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6400,
											"end": 6439,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6372,
											"end": 6374,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6365,
											"end": 6375,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "229"
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "tag",
											"source": 18,
											"value": "231"
										},
										{
											"begin": 6336,
											"end": 6449,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6467,
											"end": 6473,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6464,
											"end": 6465,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6461,
											"end": 6474,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 6458,
											"end": 6460,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 6458,
											"end": 6460,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "232"
										},
										{
											"begin": 6458,
											"end": 6460,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6502,
											"end": 6503,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6493,
											"end": 6499,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 6488,
											"end": 6491,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 6484,
											"end": 6500,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6477,
											"end": 6504,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6458,
											"end": 6460,
											"name": "tag",
											"source": 18,
											"value": "232"
										},
										{
											"begin": 6458,
											"end": 6460,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6458,
											"end": 6460,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6307,
											"end": 6512,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6307,
											"end": 6512,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6307,
											"end": 6512,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6307,
											"end": 6512,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6517,
											"end": 6673,
											"name": "tag",
											"source": 18,
											"value": "188"
										},
										{
											"begin": 6517,
											"end": 6673,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6605,
											"end": 6647,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6598,
											"end": 6603,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6594,
											"end": 6648,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6587,
											"end": 6592,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6584,
											"end": 6649,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 6574,
											"end": 6576,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "234"
										},
										{
											"begin": 6574,
											"end": 6576,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6663,
											"end": 6664,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6660,
											"end": 6661,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 6653,
											"end": 6665,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 6574,
											"end": 6576,
											"name": "tag",
											"source": 18,
											"value": "234"
										},
										{
											"begin": 6574,
											"end": 6576,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6564,
											"end": 6673,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6564,
											"end": 6673,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155",
							"quoteExactInput(bytes,uint256)": "cdca1753",
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "f7729d43",
							"quoteExactOutput(bytes,uint256)": "2f80bb1d",
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "30d07f21",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute the swap and check the amounts in the callback.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountIn\":\"The desired input amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\"}},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountOut\":\"The desired output amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"stateVariables\":{\"amountOutCached\":{\"details\":\"Transient storage variable used to check a safety condition in exact output swaps.\"}},\"title\":\"Provides quotes for swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Allows getting the expected amount out or amount in for a given swap without executing the swap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/Quoter.sol\":\"Quoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/BytesLib.sol\":{\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://370e31ceab1a7504f98dec122f65d9b8c6fc6420fd8cdd171b3dd57c4d5d21fc\",\"dweb:/ipfs/QmcquKATbnopgs92RdM5bKewt7GdCpgGhVY4hxmv1KjnnH\"]},\"contracts/Quoter/CallbackValidation.sol\":{\"keccak256\":\"0x1e5aad4fae80f588e31d55a691ad677ddb65dfbd3a0753e02c7b3f722e33b1d6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a5aa11a1c307f5b8b0264e890808c36c41f303ec7441a22e9f2aaee046f44bce\",\"dweb:/ipfs/QmbsGgFNqQPwQo5hXEey7P9Uq8JYvHnVtrmsHSmWQiDMLR\"]},\"contracts/Quoter/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"contracts/Quoter/IQuoter.sol\":{\"keccak256\":\"0xabe1e7831b0e4c3fe78ab89b5dd46d75d05e74d21ebd19b898f3605f455b39d8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7bace6abd0dd8fe9038ea95336107b7f40adefed93f347a1d726eefe46a27c85\",\"dweb:/ipfs/QmYsCNTJPU87a8todV5NCvZyMzzx8EaJCrEKKeywSnPBDd\"]},\"contracts/Quoter/IUniswapV3Pool.sol\":{\"keccak256\":\"0xa3fb68245ed4df4df4d47f9111243a7f7476e1b61649198b8874e0257dae1308\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://56a7cb26aab70bf78ecbc3e170a794964ebd74d14f64c36831e2b8efc65e40ec\",\"dweb:/ipfs/QmbyWRfTkRCtB9zyQsLY2kWp6HSPR9zdS45ZzXSn539LQi\"]},\"contracts/Quoter/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"contracts/Quoter/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"contracts/Quoter/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"contracts/Quoter/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"contracts/Quoter/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"contracts/Quoter/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"contracts/Quoter/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"contracts/Quoter/Path.sol\":{\"keccak256\":\"0xd18f02aff3aa26f895ba187bedfbe10d9f8be2b198dcd8a2284c4d89f4743005\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5833c03271b577f9fd01eb1ac606864352deeef8c2ff6a119f5e0e8e6b8d9fcb\",\"dweb:/ipfs/QmcNj8LwgdkcyQKSr8VUDnFcW2yaV6wbqYnE5xrw3rVGFk\"]},\"contracts/Quoter/PeripheryImmutableState.sol\":{\"keccak256\":\"0xf139c1e7a8d09eca8fdcc55b2df1b0c4202e0ebd9048da959e971d180d2fb1a8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8c96a41c7934e90f9d807e2b5847e60a6c80c30c782bcff442997143fe88cddd\",\"dweb:/ipfs/QmSyt8SZgz2LUUKNCz1hfpNbeFwqe5YVsmWH1swPeNsaMK\"]},\"contracts/Quoter/PoolAddress.sol\":{\"keccak256\":\"0x03817bb8cedc281e26ca28124adda283c6e011896223f7828f1160d0fb01bc8d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4701272f168a3a67af0f22cfd01dd81e8288f05ccb6bdc48bad75f6a494eb2ce\",\"dweb:/ipfs/QmcYTo3UQ8QAJ435h82zAYK7gWZXHAvFQHpE7aqqVKqiPZ\"]},\"contracts/Quoter/Quoter.sol\":{\"keccak256\":\"0x54a75cdb51c3ed0a1e70afe1d22acf7f3e30cfe5adbdab6a78c50a989727aab5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7d33081d70bf08a2d697d2c11b493eadada770d9dc59d8439e6b81c8fb3c1f69\",\"dweb:/ipfs/QmX2zytRibiRHvQ1xjJA5Dz1Kx51MyTf3NujuGZi33gt6A\"]},\"contracts/Quoter/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]},\"contracts/Quoter/TickMath.sol\":{\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a\",\"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 974,
								"contract": "contracts/Quoter/Quoter.sol:Quoter",
								"label": "amountOutCached",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"notice": "Returns the amount out received for a given exact input swap without executing the swap"
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
							},
							"quoteExactOutput(bytes,uint256)": {
								"notice": "Returns the amount in required for a given exact output swap without executing the swap"
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Allows getting the expected amount out or amount in for a given swap without executing the swap",
						"version": 1
					}
				}
			},
			"contracts/Quoter/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/SafeCast.sol\":165:1047  library SafeCast {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/SafeCast.sol\":165:1047  library SafeCast {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220215f6974243831f17f163fa1e0af0c9df0e96fa6052a80b020f91e8d8a50182b64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220215f6974243831f17f163fa1e0af0c9df0e96fa6052a80b020f91e8d8a50182b64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0x5F PUSH10 0x74243831F17F163FA1E0 0xAF 0xC SWAP14 CREATE 0xE9 PUSH16 0xA6052A80B020F91E8D8A50182B64736F PUSH13 0x63430007060033000000000000 ",
							"sourceMap": "165:882:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220215f6974243831f17f163fa1e0af0c9df0e96fa6052a80b020f91e8d8a50182b64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0x5F PUSH10 0x74243831F17F163FA1E0 0xAF 0xC SWAP14 CREATE 0xE9 PUSH16 0xA6052A80B020F91E8D8A50182B64736F PUSH13 0x63430007060033000000000000 ",
							"sourceMap": "165:882:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(int256)": "infinite",
								"toInt256(uint256)": "infinite",
								"toUint160(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "INVALID",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220215f6974243831f17f163fa1e0af0c9df0e96fa6052a80b020f91e8d8a50182b64736f6c63430007060033",
									".code": [
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			},
			"contracts/Quoter/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Quoter/TickMath.sol\":306:8637  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Quoter/TickMath.sol\":306:8637  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220de82a5689964f8b0d66205e9635da65568015c345411be35d21fe391ea7b32b264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de82a5689964f8b0d66205e9635da65568015c345411be35d21fe391ea7b32b264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE DUP3 0xA5 PUSH9 0x9964F8B0D66205E963 0x5D 0xA6 SSTORE PUSH9 0x15C345411BE35D21F 0xE3 SWAP2 0xEA PUSH28 0x32B264736F6C63430007060033000000000000000000000000000000 ",
							"sourceMap": "306:8331:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de82a5689964f8b0d66205e9635da65568015c345411be35d21fe391ea7b32b264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE DUP3 0xA5 PUSH9 0x9964F8B0D66205E963 0x5D 0xA6 SSTORE PUSH9 0x15C345411BE35D21F 0xE3 SWAP2 0xEA PUSH28 0x32B264736F6C63430007060033000000000000000000000000000000 ",
							"sourceMap": "306:8331:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "INVALID",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220de82a5689964f8b0d66205e9635da65568015c345411be35d21fe391ea7b32b264736f6c63430007060033",
									".code": [
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/Quoter/TickMath.sol\":{\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a\",\"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Quoter/BytesLib.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/BytesLib.sol",
					"exportedSymbols": {
						"BytesLib": [
							118
						]
					},
					"id": 119,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "343:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 118,
							"linearizedBaseContracts": [
								118
							],
							"name": "BytesLib",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 46,
										"nodeType": "Block",
										"src": "535:2871:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 17,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 15,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 13,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "553:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3331",
																	"id": 14,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "563:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_31_by_1",
																		"typeString": "int_const 31"
																	},
																	"value": "31"
																},
																"src": "553:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 16,
																"name": "_length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "569:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "553:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "578:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 12,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "545:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "545:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 20,
												"nodeType": "ExpressionStatement",
												"src": "545:50:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 26,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 22,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5,
																	"src": "613:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 23,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "622:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "613:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 25,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "633:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "613:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 27,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "641:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 21,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "605:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "605:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 29,
												"nodeType": "ExpressionStatement",
												"src": "605:53:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 31,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3,
																	"src": "676:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "676:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 33,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5,
																	"src": "693:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 34,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "702:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "693:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "676:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f75744f66426f756e6473",
															"id": 37,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "711:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															},
															"value": "slice_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															}
														],
														"id": 30,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "668:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "668:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 39,
												"nodeType": "ExpressionStatement",
												"src": "668:63:0"
											},
											{
												"assignments": [
													41
												],
												"declarations": [
													{
														"constant": false,
														"id": 41,
														"mutability": "mutable",
														"name": "tempBytes",
														"nodeType": "VariableDeclaration",
														"scope": 46,
														"src": "742:22:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 40,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "742:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 42,
												"nodeType": "VariableDeclarationStatement",
												"src": "742:22:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "784:2589:0",
													"statements": [
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "844:2092:0",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "1012:24:0",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1031:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1025:5:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1025:11:0"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "1012:9:0"
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1696:33:0",
																				"value": {
																					"arguments": [
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "1717:7:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1726:2:0",
																							"type": "",
																							"value": "31"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1713:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1713:16:0"
																				},
																				"variables": [
																					{
																						"name": "lengthmod",
																						"nodeType": "YulTypedName",
																						"src": "1700:9:0",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2070:70:0",
																				"value": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "2088:9:0"
																								},
																								{
																									"name": "lengthmod",
																									"nodeType": "YulIdentifier",
																									"src": "2099:9:0"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2084:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2084:25:0"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2115:4:0",
																									"type": "",
																									"value": "0x20"
																								},
																								{
																									"arguments": [
																										{
																											"name": "lengthmod",
																											"nodeType": "YulIdentifier",
																											"src": "2128:9:0"
																										}
																									],
																									"functionName": {
																										"name": "iszero",
																										"nodeType": "YulIdentifier",
																										"src": "2121:6:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2121:17:0"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nodeType": "YulIdentifier",
																								"src": "2111:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2111:28:0"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2080:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2080:60:0"
																				},
																				"variables": [
																					{
																						"name": "mc",
																						"nodeType": "YulTypedName",
																						"src": "2074:2:0",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2161:27:0",
																				"value": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "2176:2:0"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "2180:7:0"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2172:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2172:16:0"
																				},
																				"variables": [
																					{
																						"name": "end",
																						"nodeType": "YulTypedName",
																						"src": "2165:3:0",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2602:69:0",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "2635:2:0"
																									},
																									{
																										"arguments": [
																											{
																												"name": "cc",
																												"nodeType": "YulIdentifier",
																												"src": "2645:2:0"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "2639:5:0"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2639:9:0"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "2628:6:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2628:21:0"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2628:21:0"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "2481:2:0"
																						},
																						{
																							"name": "end",
																							"nodeType": "YulIdentifier",
																							"src": "2485:3:0"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "2478:2:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2478:11:0"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "2490:111:0",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "2516:19:0",
																							"value": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "2526:2:0"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2530:4:0",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2522:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2522:13:0"
																							},
																							"variableNames": [
																								{
																									"name": "mc",
																									"nodeType": "YulIdentifier",
																									"src": "2516:2:0"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2560:19:0",
																							"value": {
																								"arguments": [
																									{
																										"name": "cc",
																										"nodeType": "YulIdentifier",
																										"src": "2570:2:0"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2574:4:0",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2566:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2566:13:0"
																							},
																							"variableNames": [
																								{
																									"name": "cc",
																									"nodeType": "YulIdentifier",
																									"src": "2560:2:0"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "2214:263:0",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "2375:80:0",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "_bytes",
																														"nodeType": "YulIdentifier",
																														"src": "2397:6:0"
																													},
																													{
																														"name": "lengthmod",
																														"nodeType": "YulIdentifier",
																														"src": "2405:9:0"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "2393:3:0"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2393:22:0"
																											},
																											{
																												"arguments": [
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "2421:4:0",
																														"type": "",
																														"value": "0x20"
																													},
																													{
																														"arguments": [
																															{
																																"name": "lengthmod",
																																"nodeType": "YulIdentifier",
																																"src": "2434:9:0"
																															}
																														],
																														"functionName": {
																															"name": "iszero",
																															"nodeType": "YulIdentifier",
																															"src": "2427:6:0"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "2427:17:0"
																													}
																												],
																												"functionName": {
																													"name": "mul",
																													"nodeType": "YulIdentifier",
																													"src": "2417:3:0"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2417:28:0"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2389:3:0"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2389:57:0"
																									},
																									{
																										"name": "_start",
																										"nodeType": "YulIdentifier",
																										"src": "2448:6:0"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2385:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2385:70:0"
																							},
																							"variables": [
																								{
																									"name": "cc",
																									"nodeType": "YulTypedName",
																									"src": "2379:2:0",
																									"type": ""
																								}
																							]
																						}
																					]
																				},
																				"src": "2210:461:0"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "2700:9:0"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "2711:7:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "2693:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2693:26:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2693:26:0"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2886:4:0",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "mc",
																											"nodeType": "YulIdentifier",
																											"src": "2900:2:0"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2904:2:0",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2896:3:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2896:11:0"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2913:2:0",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "2909:3:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2909:7:0"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "2892:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2892:25:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "2879:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2879:39:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2879:39:0"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "837:2099:0",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "842:1:0",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3048:315:0",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "3070:24:0",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3089:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "3083:5:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3083:11:0"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "3070:9:0"
																					}
																				]
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "3276:9:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3287:1:0",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "3269:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3269:20:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3269:20:0"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3318:4:0",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "3328:9:0"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3339:4:0",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3324:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3324:20:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "3311:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3311:34:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3311:34:0"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3040:323:0",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "_length",
																		"nodeType": "YulIdentifier",
																		"src": "812:7:0"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "805:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "805:15:0"
															},
															"nodeType": "YulSwitch",
															"src": "798:2565:0"
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 3,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:6:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "1717:7:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "2180:7:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "2711:7:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "812:7:0",
														"valueSize": 1
													},
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "2448:6:0",
														"valueSize": 1
													},
													{
														"declaration": 41,
														"isOffset": false,
														"isSlot": false,
														"src": "1012:9:0",
														"valueSize": 1
													},
													{
														"declaration": 41,
														"isOffset": false,
														"isSlot": false,
														"src": "2088:9:0",
														"valueSize": 1
													},
													{
														"declaration": 41,
														"isOffset": false,
														"isSlot": false,
														"src": "2700:9:0",
														"valueSize": 1
													},
													{
														"declaration": 41,
														"isOffset": false,
														"isSlot": false,
														"src": "3070:9:0",
														"valueSize": 1
													},
													{
														"declaration": 41,
														"isOffset": false,
														"isSlot": false,
														"src": "3276:9:0",
														"valueSize": 1
													},
													{
														"declaration": 41,
														"isOffset": false,
														"isSlot": false,
														"src": "3328:9:0",
														"valueSize": 1
													}
												],
												"id": 43,
												"nodeType": "InlineAssembly",
												"src": "775:2598:0"
											},
											{
												"expression": {
													"id": 44,
													"name": "tempBytes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 41,
													"src": "3390:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 11,
												"id": 45,
												"nodeType": "Return",
												"src": "3383:16:0"
											}
										]
									},
									"id": 47,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "slice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "423:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "423:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "452:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "452:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "_length",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "476:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "476:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:84:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "521:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 9,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "521:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "520:14:0"
									},
									"scope": 118,
									"src": "399:3007:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "3500:328:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 61,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 59,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 57,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 51,
																	"src": "3518:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 58,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3527:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "3518:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 60,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 51,
																"src": "3533:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3518:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f766572666c6f77",
															"id": 62,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3541:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															},
															"value": "toAddress_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															}
														],
														"id": 56,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3510:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 63,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 64,
												"nodeType": "ExpressionStatement",
												"src": "3510:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 71,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 66,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 49,
																	"src": "3580:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3580:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 70,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 68,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 51,
																	"src": "3597:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3606:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "3597:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3580:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f75744f66426f756e6473",
															"id": 72,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															},
															"value": "toAddress_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															}
														],
														"id": 65,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3572:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 73,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:62:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 74,
												"nodeType": "ExpressionStatement",
												"src": "3572:62:0"
											},
											{
												"assignments": [
													76
												],
												"declarations": [
													{
														"constant": false,
														"id": 76,
														"mutability": "mutable",
														"name": "tempAddress",
														"nodeType": "VariableDeclaration",
														"scope": 81,
														"src": "3644:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 75,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3644:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 77,
												"nodeType": "VariableDeclarationStatement",
												"src": "3644:19:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3683:110:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3697:86:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_bytes",
																								"nodeType": "YulIdentifier",
																								"src": "3730:6:0"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3738:4:0",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3726:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3726:17:0"
																					},
																					{
																						"name": "_start",
																						"nodeType": "YulIdentifier",
																						"src": "3745:6:0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3722:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3722:30:0"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3716:5:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3716:37:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3755:27:0",
																		"type": "",
																		"value": "0x1000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3712:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "3712:71:0"
															},
															"variableNames": [
																{
																	"name": "tempAddress",
																	"nodeType": "YulIdentifier",
																	"src": "3697:11:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 49,
														"isOffset": false,
														"isSlot": false,
														"src": "3730:6:0",
														"valueSize": 1
													},
													{
														"declaration": 51,
														"isOffset": false,
														"isSlot": false,
														"src": "3745:6:0",
														"valueSize": 1
													},
													{
														"declaration": 76,
														"isOffset": false,
														"isSlot": false,
														"src": "3697:11:0",
														"valueSize": 1
													}
												],
												"id": 78,
												"nodeType": "InlineAssembly",
												"src": "3674:119:0"
											},
											{
												"expression": {
													"id": 79,
													"name": "tempAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 76,
													"src": "3810:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 55,
												"id": 80,
												"nodeType": "Return",
												"src": "3803:18:0"
											}
										]
									},
									"id": 82,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "3431:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 48,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3431:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "3452:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3452:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3430:37:0"
									},
									"returnParameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "3491:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 53,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3491:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3490:9:0"
									},
									"scope": 118,
									"src": "3412:416:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "3920:279:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 94,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 92,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 86,
																	"src": "3938:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3947:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "3938:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 95,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 86,
																"src": "3952:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3938:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f766572666c6f77",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3960:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															},
															"value": "toUint24_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															}
														],
														"id": 91,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3930:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3930:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "3930:50:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 101,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 84,
																	"src": "3998:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3998:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 103,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 86,
																	"src": "4015:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 104,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4024:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "4015:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3998:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f75744f66426f756e6473",
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4027:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															},
															"value": "toUint24_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															}
														],
														"id": 100,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3990:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3990:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "ExpressionStatement",
												"src": "3990:60:0"
											},
											{
												"assignments": [
													111
												],
												"declarations": [
													{
														"constant": false,
														"id": 111,
														"mutability": "mutable",
														"name": "tempUint",
														"nodeType": "VariableDeclaration",
														"scope": 116,
														"src": "4060:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 110,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "4060:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 112,
												"nodeType": "VariableDeclarationStatement",
												"src": "4060:15:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4095:72:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4109:48:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_bytes",
																						"nodeType": "YulIdentifier",
																						"src": "4135:6:0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4143:3:0",
																						"type": "",
																						"value": "0x3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4131:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4131:16:0"
																			},
																			{
																				"name": "_start",
																				"nodeType": "YulIdentifier",
																				"src": "4149:6:0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4127:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4127:29:0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4121:5:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "4121:36:0"
															},
															"variableNames": [
																{
																	"name": "tempUint",
																	"nodeType": "YulIdentifier",
																	"src": "4109:8:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 84,
														"isOffset": false,
														"isSlot": false,
														"src": "4135:6:0",
														"valueSize": 1
													},
													{
														"declaration": 86,
														"isOffset": false,
														"isSlot": false,
														"src": "4149:6:0",
														"valueSize": 1
													},
													{
														"declaration": 111,
														"isOffset": false,
														"isSlot": false,
														"src": "4109:8:0",
														"valueSize": 1
													}
												],
												"id": 113,
												"nodeType": "InlineAssembly",
												"src": "4086:81:0"
											},
											{
												"expression": {
													"id": 114,
													"name": "tempUint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 111,
													"src": "4184:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"functionReturnParameters": 90,
												"id": 115,
												"nodeType": "Return",
												"src": "4177:15:0"
											}
										]
									},
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "3852:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 83,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3852:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "3873:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 85,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3873:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3851:37:0"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "3912:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 88,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3912:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3911:8:0"
									},
									"scope": 118,
									"src": "3834:365:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 119,
							"src": "376:3825:0"
						}
					],
					"src": "343:3859:0"
				},
				"id": 0
			},
			"contracts/Quoter/CallbackValidation.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/CallbackValidation.sol",
					"exportedSymbols": {
						"CallbackValidation": [
							180
						],
						"IUniswapV3Pool": [
							275
						],
						"IUniswapV3PoolActions": [
							371
						],
						"IUniswapV3PoolDerivedState": [
							402
						],
						"IUniswapV3PoolEvents": [
							521
						],
						"IUniswapV3PoolImmutables": [
							561
						],
						"IUniswapV3PoolOwnerActions": [
							587
						],
						"IUniswapV3PoolState": [
							695
						],
						"PoolAddress": [
							947
						]
					},
					"id": 181,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 120,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:1"
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3Pool.sol",
							"file": "./IUniswapV3Pool.sol",
							"id": 121,
							"nodeType": "ImportDirective",
							"scope": 181,
							"sourceUnit": 276,
							"src": "70:30:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/PoolAddress.sol",
							"file": "./PoolAddress.sol",
							"id": 122,
							"nodeType": "ImportDirective",
							"scope": 181,
							"sourceUnit": 948,
							"src": "101:27:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 123,
								"nodeType": "StructuredDocumentation",
								"src": "130:68:1",
								"text": "@notice Provides validation for callbacks from Uniswap V3 Pools"
							},
							"fullyImplemented": true,
							"id": 180,
							"linearizedBaseContracts": [
								180
							],
							"name": "CallbackValidation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 147,
										"nodeType": "Block",
										"src": "814:92:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 138,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "846:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 141,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "878:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 142,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "886:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 143,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 132,
																	"src": "894:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"expression": {
																	"id": 139,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 947,
																	"src": "855:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$947_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 140,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getPoolKey",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 899,
																"src": "855:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$868_memory_ptr_$",
																	"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																}
															},
															"id": 144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "855:43:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														],
														"id": 137,
														"name": "verifyCallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															148,
															179
														],
														"referencedDeclaration": 179,
														"src": "831:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_struct$_PoolKey_$868_memory_ptr_$returns$_t_contract$_IUniswapV3Pool_$275_$",
															"typeString": "function (address,struct PoolAddress.PoolKey memory) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "831:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 136,
												"id": 146,
												"nodeType": "Return",
												"src": "824:75:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "231:411:1",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The V3 pool contract address"
									},
									"id": 148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "680:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "680:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "705:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "729:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "729:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "753:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 131,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "753:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "670:99:1"
									},
									"returnParameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "793:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 134,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 275,
													"src": "793:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:21:1"
									},
									"scope": 180,
									"src": "647:259:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "1302:130:1",
										"statements": [
											{
												"expression": {
													"id": 166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 158,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "1312:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 162,
																		"name": "factory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 151,
																		"src": "1361:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 163,
																		"name": "poolKey",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 153,
																		"src": "1370:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	],
																	"expression": {
																		"id": 160,
																		"name": "PoolAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 947,
																		"src": "1334:11:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_PoolAddress_$947_$",
																			"typeString": "type(library PoolAddress)"
																		}
																	},
																	"id": 161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "computeAddress",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 946,
																	"src": "1334:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$868_memory_ptr_$returns$_t_address_$",
																		"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																	}
																},
																"id": 164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1334:44:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 159,
															"name": "IUniswapV3Pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "1319:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$275_$",
																"typeString": "type(contract IUniswapV3Pool)"
															}
														},
														"id": 165,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1319:60:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"src": "1312:67:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 167,
												"nodeType": "ExpressionStatement",
												"src": "1312:67:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 169,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1397:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1397:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 173,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 156,
																		"src": "1419:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	],
																	"id": 172,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1411:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 171,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1411:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1411:13:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1397:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 168,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1389:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1389:36:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "1389:36:1"
											}
										]
									},
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "912:236:1",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param poolKey The identifying key of the V3 pool\n @return pool The V3 pool contract address"
									},
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "1177:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1177:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "poolKey",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "1194:34:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 152,
													"name": "PoolAddress.PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 868,
													"src": "1194:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$868_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1176:53:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "1277:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 155,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 275,
													"src": "1277:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1276:21:1"
									},
									"scope": 180,
									"src": "1153:279:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 181,
							"src": "198:1236:1"
						}
					],
					"src": "45:1390:1"
				},
				"id": 1
			},
			"contracts/Quoter/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							196
						]
					},
					"id": 197,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 182,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 183,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:2",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 196,
							"linearizedBaseContracts": [
								196
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:2",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:2"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "307:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:2"
									},
									"scope": 196,
									"src": "265:51:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:2",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 195,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:2"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "407:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:2"
									},
									"scope": 196,
									"src": "367:49:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 197,
							"src": "162:256:2"
						}
					],
					"src": "45:374:2"
				},
				"id": 2
			},
			"contracts/Quoter/IQuoter.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IQuoter.sol",
					"exportedSymbols": {
						"IQuoter": [
							253
						]
					},
					"id": 254,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 198,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"id": 199,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 200,
								"nodeType": "StructuredDocumentation",
								"src": "91:320:3",
								"text": "@title Quoter Interface\n @notice Supports quoting the calculated amounts from exact input or exact output swaps\n @dev These functions are not marked view because they rely on calling non-view functions and reverting\n to compute the result. They are also not gas efficient and should not be called on-chain."
							},
							"fullyImplemented": false,
							"id": 253,
							"linearizedBaseContracts": [
								253
							],
							"name": "IQuoter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "435:319:3",
										"text": "@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received"
									},
									"functionSelector": "cdca1753",
									"id": 210,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "784:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 202,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "784:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "803:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "783:37:3"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "839:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "839:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "838:19:3"
									},
									"scope": 253,
									"src": "759:99:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 211,
										"nodeType": "StructuredDocumentation",
										"src": "864:491:3",
										"text": "@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param tokenIn The token being swapped in\n @param tokenOut The token being swapped out\n @param fee The fee of the token pool to consider for the pair\n @param amountIn The desired input amount\n @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received"
									},
									"functionSelector": "f7729d43",
									"id": 226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "1400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "1425:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "1451:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 216,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1451:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "1471:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "1497:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 220,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1390:138:3"
									},
									"returnParameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "1547:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1546:19:3"
									},
									"scope": 253,
									"src": "1360:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "1572:315:3",
										"text": "@notice Returns the amount in required for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountOut The amount of the last token to receive\n @return amountIn The amount of first token required to be paid"
									},
									"functionSelector": "2f80bb1d",
									"id": 236,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1918:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 228,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1918:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1937:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1937:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1917:38:3"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "1974:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1974:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1973:18:3"
									},
									"scope": 253,
									"src": "1892:100:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "1998:538:3",
										"text": "@notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n @param tokenIn The token being swapped in\n @param tokenOut The token being swapped out\n @param fee The fee of the token pool to consider for the pair\n @param amountOut The desired output amount\n @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount required as the input for the swap in order to receive `amountOut`"
									},
									"functionSelector": "30d07f21",
									"id": 252,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "2582:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2582:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "2607:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2607:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "2633:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 242,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2633:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "2653:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "2680:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 246,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2680:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2572:139:3"
									},
									"returnParameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "2730:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2730:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2729:18:3"
									},
									"scope": 253,
									"src": "2541:207:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 254,
							"src": "411:2339:3"
						}
					],
					"src": "45:2706:3"
				},
				"id": 3
			},
			"contracts/Quoter/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							275
						],
						"IUniswapV3PoolActions": [
							371
						],
						"IUniswapV3PoolDerivedState": [
							402
						],
						"IUniswapV3PoolEvents": [
							521
						],
						"IUniswapV3PoolImmutables": [
							561
						],
						"IUniswapV3PoolOwnerActions": [
							587
						],
						"IUniswapV3PoolState": [
							695
						]
					},
					"id": 276,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 255,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3PoolImmutables.sol",
							"file": "./IUniswapV3PoolImmutables.sol",
							"id": 256,
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 562,
							"src": "71:40:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3PoolState.sol",
							"file": "./IUniswapV3PoolState.sol",
							"id": 257,
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 696,
							"src": "112:35:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3PoolDerivedState.sol",
							"file": "./IUniswapV3PoolDerivedState.sol",
							"id": 258,
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 403,
							"src": "148:42:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3PoolActions.sol",
							"file": "./IUniswapV3PoolActions.sol",
							"id": 259,
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 372,
							"src": "191:37:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3PoolOwnerActions.sol",
							"file": "./IUniswapV3PoolOwnerActions.sol",
							"id": 260,
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 588,
							"src": "229:42:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3PoolEvents.sol",
							"file": "./IUniswapV3PoolEvents.sol",
							"id": 261,
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 522,
							"src": "272:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 263,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 561,
										"src": "607:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$561",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 264,
									"nodeType": "InheritanceSpecifier",
									"src": "607:24:4"
								},
								{
									"baseName": {
										"id": 265,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 695,
										"src": "637:19:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$695",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 266,
									"nodeType": "InheritanceSpecifier",
									"src": "637:19:4"
								},
								{
									"baseName": {
										"id": 267,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 402,
										"src": "662:26:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$402",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 268,
									"nodeType": "InheritanceSpecifier",
									"src": "662:26:4"
								},
								{
									"baseName": {
										"id": 269,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 371,
										"src": "694:21:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$371",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 270,
									"nodeType": "InheritanceSpecifier",
									"src": "694:21:4"
								},
								{
									"baseName": {
										"id": 271,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 587,
										"src": "721:26:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$587",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 272,
									"nodeType": "InheritanceSpecifier",
									"src": "721:26:4"
								},
								{
									"baseName": {
										"id": 273,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 521,
										"src": "753:20:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$521",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 274,
									"nodeType": "InheritanceSpecifier",
									"src": "753:20:4"
								}
							],
							"contractDependencies": [
								371,
								402,
								521,
								561,
								587,
								695
							],
							"contractKind": "interface",
							"documentation": {
								"id": 262,
								"nodeType": "StructuredDocumentation",
								"src": "310:265:4",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 275,
							"linearizedBaseContracts": [
								275,
								521,
								587,
								371,
								402,
								695,
								561
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 276,
							"src": "575:203:4"
						}
					],
					"src": "45:734:4"
				},
				"id": 4
			},
			"contracts/Quoter/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							371
						]
					},
					"id": 372,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 277,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 278,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:5",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 371,
							"linearizedBaseContracts": [
								371
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:5",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 284,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "442:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 280,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:5"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:5"
									},
									"scope": 371,
									"src": "422:51:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:5",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1536:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1563:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 288,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1588:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 290,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1613:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 292,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1637:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 294,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:5"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1681:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "1698:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:5"
									},
									"scope": 371,
									"src": "1513:202:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:5",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 320,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2805:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2832:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 306,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2857:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 308,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2882:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 310,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2916:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 312,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:5"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2965:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 315,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "2982:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 317,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:5"
									},
									"scope": 371,
									"src": "2779:220:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:5",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3664:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 322,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3689:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 324,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3714:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 326,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:5"
									},
									"returnParameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3753:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3770:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:5"
									},
									"scope": 371,
									"src": "3641:146:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:5",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 352,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "4836:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "4863:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 338,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "4888:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 340,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "4920:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 342,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "4955:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 344,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:5"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "4999:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 347,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 352,
												"src": "5015:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 349,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:5"
									},
									"scope": 371,
									"src": "4813:218:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 353,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:5",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 364,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "5723:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "5750:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "5775:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "5800:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 360,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:5"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:5"
									},
									"scope": 371,
									"src": "5699:136:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 365,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:5",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 370,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "6257:33:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 366,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:5"
									},
									"returnParameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:5"
									},
									"scope": 371,
									"src": "6213:88:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 372,
							"src": "173:6130:5"
						}
					],
					"src": "45:6259:5"
				},
				"id": 5
			},
			"contracts/Quoter/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							402
						]
					},
					"id": 403,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 373,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 374,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:6",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 402,
							"linearizedBaseContracts": [
								402
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:6",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 387,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1403:29:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 376,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 377,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:6"
									},
									"returnParameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1481:30:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 380,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 381,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1513:51:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 383,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 384,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:6"
									},
									"scope": 402,
									"src": "1386:180:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:6",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 401,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "2383:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 389,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "2400:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 391,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:6"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "2477:26:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 394,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "2517:37:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 396,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "2568:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 398,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:6"
									},
									"scope": 402,
									"src": "2348:251:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 403,
							"src": "293:2308:6"
						}
					],
					"src": "45:2557:6"
				},
				"id": 6
			},
			"contracts/Quoter/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							521
						]
					},
					"id": 522,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 404,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 405,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:7",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 521,
							"linearizedBaseContracts": [
								521
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:7",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 412,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "562:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 407,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "584:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 409,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:7"
									},
									"src": "545:51:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:7",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 429,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1178:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1202:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1233:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 418,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1266:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 420,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1299:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 422,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1323:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "1348:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:7"
									},
									"src": "1158:212:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 430,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:7",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 444,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "1897:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "1928:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "1955:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 435,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "1988:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 437,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "2021:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 439,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "2046:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 441,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:7"
									},
									"src": "1874:194:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:7",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 459,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "2622:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 449,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "2653:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 448,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "2686:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 450,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 453,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "2719:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 452,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "2743:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "2768:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:7"
									},
									"src": "2602:188:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 460,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:7",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 476,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3421:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3453:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 466,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3488:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 465,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3512:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 467,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3536:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 469,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 472,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3566:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 471,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "3593:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 473,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:7"
									},
									"src": "3401:209:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:7",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 491,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "4204:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "4236:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "4271:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 485,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "4296:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "4321:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "4344:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:7"
									},
									"src": "4183:181:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:7",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 498,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "4876:36:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 493,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "4922:36:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 495,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:7"
									},
									"src": "4826:139:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:7",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 509,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5367:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 500,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5390:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 502,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5413:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 504,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "5436:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 506,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:7"
									},
									"src": "5346:113:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 510,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:7",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 520,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5876:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5900:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5927:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 515,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "5944:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 517,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:7"
									},
									"src": "5854:107:7"
								}
							],
							"scope": 522,
							"src": "159:5804:7"
						}
					],
					"src": "45:5919:7"
				},
				"id": 7
			},
			"contracts/Quoter/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							561
						]
					},
					"id": 562,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 523,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 524,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:8",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 561,
							"linearizedBaseContracts": [
								561
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:8",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 530,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:8"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "450:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:8"
									},
									"scope": 561,
									"src": "408:51:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:8",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:8"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "624:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:8"
									},
									"scope": 561,
									"src": "583:50:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 537,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:8",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 542,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:8"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "799:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:8"
									},
									"scope": 561,
									"src": "758:50:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:8",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:8"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "941:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 545,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:8"
									},
									"scope": 561,
									"src": "903:46:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:8",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 554,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:8"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "1364:5:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 551,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:8"
									},
									"scope": 561,
									"src": "1318:53:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:8",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 560,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:8"
									},
									"returnParameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "1799:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 557,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:8"
									},
									"scope": 561,
									"src": "1745:63:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 562,
							"src": "224:1586:8"
						}
					],
					"src": "45:1766:8"
				},
				"id": 8
			},
			"contracts/Quoter/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							587
						]
					},
					"id": 588,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 563,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 564,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:9",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 587,
							"linearizedBaseContracts": [
								587
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:9",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 572,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "464:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 566,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "484:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 568,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:9"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:9"
									},
									"scope": 587,
									"src": "440:73:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 573,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:9",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 586,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "1041:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "1068:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 576,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "1102:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 578,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:9"
									},
									"returnParameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "1151:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 581,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "1168:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 583,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:9"
									},
									"scope": 587,
									"src": "1007:178:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 588,
							"src": "187:1000:9"
						}
					],
					"src": "45:1143:9"
				},
				"id": 9
			},
			"contracts/Quoter/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							695
						]
					},
					"id": 696,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 589,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 590,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:10",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 695,
							"linearizedBaseContracts": [
								695
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 591,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:10",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 608,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:10"
									},
									"returnParameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1498:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 593,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1532:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 595,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1556:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 597,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1593:29:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 599,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1636:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 601,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1683:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 603,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "1714:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 605,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:10"
									},
									"scope": 695,
									"src": "1421:317:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 609,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:10",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 614,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:10"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 614,
												"src": "1972:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:10"
									},
									"scope": 695,
									"src": "1917:64:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 615,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:10",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:10"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "2215:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:10"
									},
									"scope": 695,
									"src": "2160:64:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:10",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 628,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:10"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "2429:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 623,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "2445:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 625,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:10"
									},
									"scope": 695,
									"src": "2382:79:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 629,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:10",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 634,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:10"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 634,
												"src": "2666:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 631,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:10"
									},
									"scope": 695,
									"src": "2622:53:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 635,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:10",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 656,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "3945:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 636,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:10"
									},
									"returnParameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4017:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 639,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4053:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 641,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4086:29:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4129:29:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4172:27:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 647,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4213:38:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 649,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4265:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 651,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 656,
												"src": "4300:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 653,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:10"
									},
									"scope": 695,
									"src": "3930:397:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 657,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:10",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 664,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "4457:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 658,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:10"
									},
									"returnParameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "4500:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:10"
									},
									"scope": 695,
									"src": "4437:72:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:10",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 680,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "5239:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 666,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:10"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "5312:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 669,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "5344:32:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "5390:32:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "5436:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 675,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "5469:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 677,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:10"
									},
									"scope": 695,
									"src": "5220:279:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 681,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:10",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 694,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "6281:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:10"
									},
									"returnParameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "6356:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 685,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "6391:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 687,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "6425:41:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 689,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "6480:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 691,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:10"
									},
									"scope": 695,
									"src": "6259:248:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 696,
							"src": "240:6269:10"
						}
					],
					"src": "45:6465:10"
				},
				"id": 10
			},
			"contracts/Quoter/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							709
						]
					},
					"id": 710,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 697,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 698,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:11",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 709,
							"linearizedBaseContracts": [
								709
							],
							"name": "IUniswapV3SwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 699,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:11",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 708,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 708,
												"src": "1197:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 700,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 708,
												"src": "1226:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 702,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 708,
												"src": "1255:19:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 704,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:11"
									},
									"returnParameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:11"
									},
									"scope": 709,
									"src": "1157:133:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 710,
							"src": "215:1077:11"
						}
					],
					"src": "45:1248:11"
				},
				"id": 11
			},
			"contracts/Quoter/Path.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/Path.sol",
					"exportedSymbols": {
						"BytesLib": [
							118
						],
						"Path": [
							824
						]
					},
					"id": 825,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 711,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"absolutePath": "contracts/Quoter/BytesLib.sol",
							"file": "./BytesLib.sol",
							"id": 712,
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 119,
							"src": "71:24:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 713,
								"nodeType": "StructuredDocumentation",
								"src": "97:67:12",
								"text": "@title Functions for manipulating path data for multihop swaps"
							},
							"fullyImplemented": true,
							"id": 824,
							"linearizedBaseContracts": [
								824
							],
							"name": "Path",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 716,
									"libraryName": {
										"id": 714,
										"name": "BytesLib",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 118,
										"src": "189:8:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_BytesLib_$118",
											"typeString": "library BytesLib"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "183:25:12",
									"typeName": {
										"id": 715,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "202:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"constant": true,
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "214:48:12",
										"text": "@dev The length of the bytes encoded address"
									},
									"id": 720,
									"mutability": "constant",
									"name": "ADDR_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "267:39:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 718,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "267:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 719,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "304:2:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 721,
										"nodeType": "StructuredDocumentation",
										"src": "312:44:12",
										"text": "@dev The length of the bytes encoded fee"
									},
									"id": 724,
									"mutability": "constant",
									"name": "FEE_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "361:37:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 722,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "361:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 723,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "397:1:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "405:58:12",
										"text": "@dev The offset of a single token address and pool fee"
									},
									"id": 730,
									"mutability": "constant",
									"name": "NEXT_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "468:59:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 726,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "468:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 729,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 727,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 720,
											"src": "507:9:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 728,
											"name": "FEE_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 724,
											"src": "519:8:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "507:20:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 731,
										"nodeType": "StructuredDocumentation",
										"src": "533:42:12",
										"text": "@dev The offset of an encoded pool key"
									},
									"id": 736,
									"mutability": "constant",
									"name": "POP_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "580:61:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 732,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "580:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 735,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 733,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 730,
											"src": "618:11:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 734,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 720,
											"src": "632:9:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "618:23:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "647:72:12",
										"text": "@dev The minimum length of an encoding that contains 2 or more pools"
									},
									"id": 742,
									"mutability": "constant",
									"name": "MULTIPLE_POOLS_MIN_LENGTH",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "724:77:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 738,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "724:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 741,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 739,
											"name": "POP_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 736,
											"src": "777:10:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 740,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 730,
											"src": "790:11:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "777:24:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "1066:64:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 750,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "1083:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 751,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1083:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 752,
														"name": "MULTIPLE_POOLS_MIN_LENGTH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "1098:25:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1083:40:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 749,
												"id": 754,
												"nodeType": "Return",
												"src": "1076:47:12"
											}
										]
									},
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "808:179:12",
										"text": "@notice Returns true iff the path contains two or more pools\n @param path The encoded swap path\n @return True if path contains two or more pools, otherwise false"
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasMultiplePools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1018:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 744,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1018:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:19:12"
									},
									"returnParameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1060:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 747,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1060:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:6:12"
									},
									"scope": 824,
									"src": "992:138:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 789,
										"nodeType": "Block",
										"src": "1577:129:12",
										"statements": [
											{
												"expression": {
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 768,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 762,
														"src": "1587:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 771,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1611:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"expression": {
																"id": 769,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "1596:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 82,
															"src": "1596:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1596:17:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1587:26:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 774,
												"nodeType": "ExpressionStatement",
												"src": "1587:26:12"
											},
											{
												"expression": {
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 775,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 766,
														"src": "1623:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 778,
																"name": "ADDR_SIZE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 720,
																"src": "1643:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 776,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "1629:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toUint24",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 117,
															"src": "1629:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (uint24)"
															}
														},
														"id": 779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1629:24:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "1623:30:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"id": 781,
												"nodeType": "ExpressionStatement",
												"src": "1623:30:12"
											},
											{
												"expression": {
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 782,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 764,
														"src": "1663:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 785,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 730,
																"src": "1687:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 783,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "1672:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 82,
															"src": "1672:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 786,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1672:27:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1663:36:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "1663:36:12"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "1136:251:12",
										"text": "@notice Decodes the first pool in path\n @param path The bytes encoded swap path\n @return tokenA The first token of the given pool\n @return tokenB The second token of the given pool\n @return fee The fee level of the pool"
									},
									"id": 790,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1417:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 758,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1417:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1416:19:12"
									},
									"returnParameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1496:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 761,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1524:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1524:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "1552:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 765,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1552:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:90:12"
									},
									"scope": 824,
									"src": "1392:314:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 804,
										"nodeType": "Block",
										"src": "2010:49:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2038:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 801,
															"name": "POP_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 736,
															"src": "2041:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 798,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "2027:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 799,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 47,
														"src": "2027:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 802,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2027:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 797,
												"id": 803,
												"nodeType": "Return",
												"src": "2020:32:12"
											}
										]
									},
									"documentation": {
										"id": 791,
										"nodeType": "StructuredDocumentation",
										"src": "1712:215:12",
										"text": "@notice Gets the segment corresponding to the first pool in the path\n @param path The bytes encoded swap path\n @return The segment containing all data necessary to target the first pool in the path"
									},
									"id": 805,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 805,
												"src": "1954:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 792,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1954:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1953:19:12"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 805,
												"src": "1996:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 795,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1996:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:14:12"
									},
									"scope": 824,
									"src": "1932:127:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "2323:74:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 815,
															"name": "NEXT_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "2351:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 819,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 816,
																	"name": "path",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 808,
																	"src": "2364:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 817,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2364:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 818,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 730,
																"src": "2378:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2364:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 813,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "2340:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 814,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 47,
														"src": "2340:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2340:50:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 812,
												"id": 821,
												"nodeType": "Return",
												"src": "2333:57:12"
											}
										]
									},
									"documentation": {
										"id": 806,
										"nodeType": "StructuredDocumentation",
										"src": "2065:178:12",
										"text": "@notice Skips a token + fee element from the buffer and returns the remainder\n @param path The swap path\n @return The remaining token + fee elements in the path"
									},
									"id": 823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "skipToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "2267:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 807,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2267:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2266:19:12"
									},
									"returnParameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "2309:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 810,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2309:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2308:14:12"
									},
									"scope": 824,
									"src": "2248:149:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 825,
							"src": "164:2235:12"
						}
					],
					"src": "45:2355:12"
				},
				"id": 12
			},
			"contracts/Quoter/PeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/PeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							196
						],
						"PeripheryImmutableState": [
							855
						]
					},
					"id": 856,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 826,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:13"
						},
						{
							"absolutePath": "contracts/Quoter/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 827,
							"nodeType": "ImportDirective",
							"scope": 856,
							"sourceUnit": 197,
							"src": "70:40:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 829,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 196,
										"src": "240:24:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$196",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 830,
									"nodeType": "InheritanceSpecifier",
									"src": "240:24:13"
								}
							],
							"contractDependencies": [
								196
							],
							"contractKind": "contract",
							"documentation": {
								"id": 828,
								"nodeType": "StructuredDocumentation",
								"src": "112:83:13",
								"text": "@title Immutable state\n @notice Immutable state used by periphery contracts"
							},
							"fullyImplemented": true,
							"id": 855,
							"linearizedBaseContracts": [
								855,
								196
							],
							"name": "PeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										189
									],
									"constant": false,
									"documentation": {
										"id": 831,
										"nodeType": "StructuredDocumentation",
										"src": "271:40:13",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "c45a0155",
									"id": 834,
									"mutability": "immutable",
									"name": "factory",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 833,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "341:8:13"
									},
									"scope": 855,
									"src": "316:41:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 832,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "316:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										195
									],
									"constant": false,
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "363:40:13",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "4aa4a4fc",
									"id": 838,
									"mutability": "immutable",
									"name": "WETH9",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 837,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "433:8:13"
									},
									"scope": 855,
									"src": "408:39:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 836,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "408:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 853,
										"nodeType": "Block",
										"src": "500:59:13",
										"statements": [
											{
												"expression": {
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 845,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 834,
														"src": "510:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 846,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "520:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "510:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 848,
												"nodeType": "ExpressionStatement",
												"src": "510:18:13"
											},
											{
												"expression": {
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 849,
														"name": "WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "538:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 850,
														"name": "_WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 842,
														"src": "546:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "538:14:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 852,
												"nodeType": "ExpressionStatement",
												"src": "538:14:13"
											}
										]
									},
									"id": 854,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "466:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "466:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "484:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "484:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "465:34:13"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "500:0:13"
									},
									"scope": 855,
									"src": "454:105:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 856,
							"src": "195:366:13"
						}
					],
					"src": "45:517:13"
				},
				"id": 13
			},
			"contracts/Quoter/PoolAddress.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							947
						]
					},
					"id": 948,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 857,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 858,
								"nodeType": "StructuredDocumentation",
								"src": "71:96:14",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 947,
							"linearizedBaseContracts": [
								947
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 861,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 947,
									"src": "193:114:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 859,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "193:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866313830346337353263376336356363303266326565333532366636326364323066396630663662333163313630386337643735303464326331373762633233",
										"id": 860,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "241:66:14",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_109234080624579863987667491458749478006434464096225787478712566313967926361123_by_1",
											"typeString": "int_const 1092...(70 digits omitted)...1123"
										},
										"value": "0xf1804c752c7c65cc02f2ee3526f62cd20f9f0f6b31c1608c7d7504d2c177bc23"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 868,
									"members": [
										{
											"constant": false,
											"id": 863,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 868,
											"src": "387:14:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 862,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "387:7:14",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 865,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 868,
											"src": "411:14:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 864,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "411:7:14",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 867,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 868,
											"src": "435:10:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 866,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "435:6:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 947,
									"src": "362:90:14",
									"visibility": "public"
								},
								{
									"body": {
										"id": 898,
										"nodeType": "Block",
										"src": "917:141:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 880,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 871,
														"src": "931:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 881,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "940:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "931:15:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 891,
												"nodeType": "IfStatement",
												"src": "927:56:14",
												"trueBody": {
													"expression": {
														"id": 889,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 883,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 871,
																	"src": "949:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 884,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 873,
																	"src": "957:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 885,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "948:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 886,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 873,
																	"src": "968:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 887,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 871,
																	"src": "976:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 888,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "967:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "948:35:14",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 890,
													"nodeType": "ExpressionStatement",
													"src": "948:35:14"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "1017:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 894,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "1033:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 895,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "1046:3:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 892,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "1000:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$868_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1000:51:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 879,
												"id": 897,
												"nodeType": "Return",
												"src": "993:58:14"
											}
										]
									},
									"documentation": {
										"id": 869,
										"nodeType": "StructuredDocumentation",
										"src": "458:321:14",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 899,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "813:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "837:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "837:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "861:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 874,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "861:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:74:14"
									},
									"returnParameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "901:14:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 877,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 868,
													"src": "901:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$868_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "900:16:14"
									},
									"scope": 947,
									"src": "784:274:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 945,
										"nodeType": "Block",
										"src": "1403:414:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 910,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 904,
																	"src": "1421:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 911,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 863,
																"src": "1421:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 912,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 904,
																	"src": "1434:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 913,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 865,
																"src": "1434:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1421:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 909,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1413:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1413:32:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 916,
												"nodeType": "ExpressionStatement",
												"src": "1413:32:14"
											},
											{
												"expression": {
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 917,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 907,
														"src": "1455:4:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 925,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1581:7:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 926,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 902,
																						"src": "1614:7:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 930,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 904,
																											"src": "1668:3:14",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 931,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 863,
																										"src": "1668:10:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 932,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 904,
																											"src": "1680:3:14",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 933,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 865,
																										"src": "1680:10:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 934,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 904,
																											"src": "1692:3:14",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 935,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 867,
																										"src": "1692:7:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 928,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1657:3:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 929,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1657:10:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 936,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1657:43:14",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 927,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1647:9:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 937,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1647:54:14",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 938,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 861,
																						"src": "1727:19:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 923,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1539:3:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 924,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1539:16:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 939,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1539:229:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 922,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1508:9:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 940,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1508:278:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 921,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1483:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 920,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1483:7:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1483:317:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 919,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1462:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 918,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1462:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 942,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1462:348:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1455:355:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 944,
												"nodeType": "ExpressionStatement",
												"src": "1455:355:14"
											}
										]
									},
									"documentation": {
										"id": 900,
										"nodeType": "StructuredDocumentation",
										"src": "1064:236:14",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 946,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "1329:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1329:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "1346:18:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 903,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 868,
													"src": "1346:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$868_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:37:14"
									},
									"returnParameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "1389:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 906,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1388:14:14"
									},
									"scope": 947,
									"src": "1305:512:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 948,
							"src": "167:1652:14"
						}
					],
					"src": "45:1775:14"
				},
				"id": 14
			},
			"contracts/Quoter/Quoter.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/Quoter.sol",
					"exportedSymbols": {
						"BytesLib": [
							118
						],
						"CallbackValidation": [
							180
						],
						"IPeripheryImmutableState": [
							196
						],
						"IQuoter": [
							253
						],
						"IUniswapV3Pool": [
							275
						],
						"IUniswapV3PoolActions": [
							371
						],
						"IUniswapV3PoolDerivedState": [
							402
						],
						"IUniswapV3PoolEvents": [
							521
						],
						"IUniswapV3PoolImmutables": [
							561
						],
						"IUniswapV3PoolOwnerActions": [
							587
						],
						"IUniswapV3PoolState": [
							695
						],
						"IUniswapV3SwapCallback": [
							709
						],
						"Path": [
							824
						],
						"PeripheryImmutableState": [
							855
						],
						"PoolAddress": [
							947
						],
						"Quoter": [
							1417
						],
						"SafeCast": [
							1487
						],
						"TickMath": [
							2022
						]
					},
					"id": 1418,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 949,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "45:23:15"
						},
						{
							"id": 950,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "69:19:15"
						},
						{
							"absolutePath": "contracts/Quoter/SafeCast.sol",
							"file": "./SafeCast.sol",
							"id": 951,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 1488,
							"src": "90:24:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/TickMath.sol",
							"file": "./TickMath.sol",
							"id": 952,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 2023,
							"src": "115:24:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IUniswapV3SwapCallback.sol",
							"file": "./IUniswapV3SwapCallback.sol",
							"id": 953,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 710,
							"src": "140:38:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/IQuoter.sol",
							"file": "./IQuoter.sol",
							"id": 954,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 254,
							"src": "180:23:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/PeripheryImmutableState.sol",
							"file": "./PeripheryImmutableState.sol",
							"id": 955,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 856,
							"src": "204:39:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/Path.sol",
							"file": "./Path.sol",
							"id": 956,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 825,
							"src": "244:20:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/PoolAddress.sol",
							"file": "./PoolAddress.sol",
							"id": 957,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 948,
							"src": "265:27:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Quoter/CallbackValidation.sol",
							"file": "./CallbackValidation.sol",
							"id": 958,
							"nodeType": "ImportDirective",
							"scope": 1418,
							"sourceUnit": 181,
							"src": "293:34:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 960,
										"name": "IQuoter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 253,
										"src": "661:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IQuoter_$253",
											"typeString": "contract IQuoter"
										}
									},
									"id": 961,
									"nodeType": "InheritanceSpecifier",
									"src": "661:7:15"
								},
								{
									"baseName": {
										"id": 962,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 709,
										"src": "670:22:15",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3SwapCallback_$709",
											"typeString": "contract IUniswapV3SwapCallback"
										}
									},
									"id": 963,
									"nodeType": "InheritanceSpecifier",
									"src": "670:22:15"
								},
								{
									"baseName": {
										"id": 964,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 855,
										"src": "694:23:15",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$855",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 965,
									"nodeType": "InheritanceSpecifier",
									"src": "694:23:15"
								}
							],
							"contractDependencies": [
								196,
								253,
								709,
								855
							],
							"contractKind": "contract",
							"documentation": {
								"id": 959,
								"nodeType": "StructuredDocumentation",
								"src": "329:313:15",
								"text": "@title Provides quotes for swaps\n @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\n @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\n the swap and check the amounts in the callback."
							},
							"fullyImplemented": true,
							"id": 1417,
							"linearizedBaseContracts": [
								1417,
								855,
								196,
								709,
								253
							],
							"name": "Quoter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 968,
									"libraryName": {
										"id": 966,
										"name": "Path",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 824,
										"src": "730:4:15",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Path_$824",
											"typeString": "library Path"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "724:21:15",
									"typeName": {
										"id": 967,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "739:5:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"id": 971,
									"libraryName": {
										"id": 969,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1487,
										"src": "756:8:15",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$1487",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "750:27:15",
									"typeName": {
										"id": 970,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "769:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"documentation": {
										"id": 972,
										"nodeType": "StructuredDocumentation",
										"src": "783:91:15",
										"text": "@dev Transient storage variable used to check a safety condition in exact output swaps."
									},
									"id": 974,
									"mutability": "mutable",
									"name": "amountOutCached",
									"nodeType": "VariableDeclaration",
									"scope": 1417,
									"src": "879:31:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 973,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "879:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 985,
										"nodeType": "Block",
										"src": "1005:2:15",
										"statements": []
									},
									"id": 986,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 981,
													"name": "_factory",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 976,
													"src": "987:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 982,
													"name": "_WETH9",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 978,
													"src": "997:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 983,
											"modifierName": {
												"id": 980,
												"name": "PeripheryImmutableState",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 855,
												"src": "963:23:15",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_PeripheryImmutableState_$855_$",
													"typeString": "type(contract PeripheryImmutableState)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "963:41:15"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "929:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "929:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "947:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "947:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "928:34:15"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1005:0:15"
									},
									"scope": 1417,
									"src": "917:90:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1010,
										"nodeType": "Block",
										"src": "1142:120:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1000,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "1201:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1003,
																			"name": "tokenA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 988,
																			"src": "1233:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1004,
																			"name": "tokenB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 990,
																			"src": "1241:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1005,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 992,
																			"src": "1249:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		],
																		"expression": {
																			"id": 1001,
																			"name": "PoolAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 947,
																			"src": "1210:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_PoolAddress_$947_$",
																				"typeString": "type(library PoolAddress)"
																			}
																		},
																		"id": 1002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "getPoolKey",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 899,
																		"src": "1210:22:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$868_memory_ptr_$",
																			"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																		}
																	},
																	"id": 1006,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1210:43:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_struct$_PoolKey_$868_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																],
																"expression": {
																	"id": 998,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 947,
																	"src": "1174:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$947_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 999,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "computeAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 946,
																"src": "1174:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$868_memory_ptr_$returns$_t_address_$",
																	"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																}
															},
															"id": 1007,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1174:80:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 997,
														"name": "IUniswapV3Pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 275,
														"src": "1159:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$275_$",
															"typeString": "type(contract IUniswapV3Pool)"
														}
													},
													"id": 1008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1159:96:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 996,
												"id": 1009,
												"nodeType": "Return",
												"src": "1152:103:15"
											}
										]
									},
									"id": 1011,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1039:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1063:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1087:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 991,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1087:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1029:74:15"
									},
									"returnParameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1126:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 994,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 275,
													"src": "1126:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1125:16:15"
									},
									"scope": 1417,
									"src": "1013:249:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										708
									],
									"body": {
										"id": 1104,
										"nodeType": "Block",
										"src": "1456:1100:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1023,
																	"name": "amount0Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1014,
																	"src": "1474:12:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1489:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1474:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1028,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1026,
																	"name": "amount1Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1016,
																	"src": "1494:12:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1027,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1509:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1494:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1474:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1022,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1466:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1466:45:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1031,
												"nodeType": "ExpressionStatement",
												"src": "1466:45:15"
											},
											{
												"assignments": [
													1033,
													1035,
													1037
												],
												"declarations": [
													{
														"constant": false,
														"id": 1033,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 1104,
														"src": "1585:15:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1032,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1585:7:15",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1035,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 1104,
														"src": "1602:16:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1034,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1602:7:15",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1037,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1104,
														"src": "1620:10:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1036,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "1620:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1041,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1038,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1018,
															"src": "1634:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 790,
														"src": "1634:20:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1634:22:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1584:72:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1045,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 834,
															"src": "1700:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1046,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "1709:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1047,
															"name": "tokenOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "1718:8:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1048,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1037,
															"src": "1728:3:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"expression": {
															"id": 1042,
															"name": "CallbackValidation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "1666:18:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_CallbackValidation_$180_$",
																"typeString": "type(library CallbackValidation)"
															}
														},
														"id": 1044,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "verifyCallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 148,
														"src": "1666:33:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$275_$",
															"typeString": "function (address,address,address,uint24) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1666:66:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 1050,
												"nodeType": "ExpressionStatement",
												"src": "1666:66:15"
											},
											{
												"assignments": [
													1052,
													1054,
													1056
												],
												"declarations": [
													{
														"constant": false,
														"id": 1052,
														"mutability": "mutable",
														"name": "isExactInput",
														"nodeType": "VariableDeclaration",
														"scope": 1104,
														"src": "1744:17:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1051,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1744:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1054,
														"mutability": "mutable",
														"name": "amountToPay",
														"nodeType": "VariableDeclaration",
														"scope": 1104,
														"src": "1763:19:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1053,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1763:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1056,
														"mutability": "mutable",
														"name": "amountReceived",
														"nodeType": "VariableDeclaration",
														"scope": 1104,
														"src": "1784:22:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1055,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1784:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1087,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1059,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1057,
															"name": "amount0Delta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1014,
															"src": "1822:12:15",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1837:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1822:16:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1075,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1073,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "1944:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1074,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "1955:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1944:18:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1078,
																		"name": "amount1Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1016,
																		"src": "1972:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1964:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1076,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1964:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1079,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1964:21:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1083,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1995:13:15",
																		"subExpression": {
																			"id": 1082,
																			"name": "amount0Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1014,
																			"src": "1996:12:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1081,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1987:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1080,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1987:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1084,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1987:22:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1085,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1943:67:15",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(bool,uint256,uint256)"
														}
													},
													"id": 1086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1822:188:15",
													"trueExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1062,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1060,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "1858:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1061,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "1868:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1858:18:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1065,
																		"name": "amount0Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1014,
																		"src": "1886:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1878:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1063,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1878:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1066,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1878:21:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1070,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1909:13:15",
																		"subExpression": {
																			"id": 1069,
																			"name": "amount1Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1016,
																			"src": "1910:12:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1901:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1067,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1901:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1071,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:22:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1072,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1857:67:15",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(bool,uint256,uint256)"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(bool,uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1743:267:15"
											},
											{
												"condition": {
													"id": 1088,
													"name": "isExactInput",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1052,
													"src": "2024:12:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1102,
													"nodeType": "Block",
													"src": "2207:343:15",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1093,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1091,
																	"name": "amountOutCached",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 974,
																	"src": "2326:15:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1092,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2345:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2326:20:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1100,
															"nodeType": "IfStatement",
															"src": "2322:68:15",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1097,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1095,
																				"name": "amountReceived",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1056,
																				"src": "2356:14:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"id": 1096,
																				"name": "amountOutCached",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 974,
																				"src": "2374:15:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2356:33:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1094,
																		"name": "require",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967278,
																			4294967278
																		],
																		"referencedDeclaration": 4294967278,
																		"src": "2348:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																			"typeString": "function (bool) pure"
																		}
																	},
																	"id": 1098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2348:42:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1099,
																"nodeType": "ExpressionStatement",
																"src": "2348:42:15"
															}
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2413:127:15",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2431:22:15",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2448:4:15",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2442:5:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2442:11:15"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nodeType": "YulTypedName",
																				"src": "2435:3:15",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2477:3:15"
																				},
																				{
																					"name": "amountToPay",
																					"nodeType": "YulIdentifier",
																					"src": "2482:11:15"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2470:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2470:24:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2470:24:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2518:3:15"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2523:2:15",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2511:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2511:15:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2511:15:15"
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1054,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2482:11:15",
																	"valueSize": 1
																}
															],
															"id": 1101,
															"nodeType": "InlineAssembly",
															"src": "2404:136:15"
														}
													]
												},
												"id": 1103,
												"nodeType": "IfStatement",
												"src": "2020:530:15",
												"trueBody": {
													"id": 1090,
													"nodeType": "Block",
													"src": "2038:163:15",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2061:130:15",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2079:22:15",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2096:4:15",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2090:5:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2090:11:15"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nodeType": "YulTypedName",
																				"src": "2083:3:15",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2125:3:15"
																				},
																				{
																					"name": "amountReceived",
																					"nodeType": "YulIdentifier",
																					"src": "2130:14:15"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2118:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2118:27:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2118:27:15"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2169:3:15"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2174:2:15",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2162:6:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2162:15:15"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2162:15:15"
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1056,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2130:14:15",
																	"valueSize": 1
																}
															],
															"id": 1089,
															"nodeType": "InlineAssembly",
															"src": "2052:139:15"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "1268:38:15",
										"text": "@inheritdoc IUniswapV3SwapCallback"
									},
									"functionSelector": "fa461e33",
									"id": 1105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1020,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1447:8:15"
									},
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1014,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "1351:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1013,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "1380:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1015,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1380:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "1409:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1017,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1409:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:91:15"
									},
									"returnParameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1456:0:15"
									},
									"scope": 1417,
									"src": "1311:1245:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1147,
										"nodeType": "Block",
										"src": "2715:293:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1113,
															"name": "reason",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "2729:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2729:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1115,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2746:2:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "2729:19:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1138,
												"nodeType": "IfStatement",
												"src": "2725:231:15",
												"trueBody": {
													"id": 1137,
													"nodeType": "Block",
													"src": "2750:206:15",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1117,
																		"name": "reason",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1108,
																		"src": "2768:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1118,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2768:13:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "3638",
																	"id": 1119,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2784:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_68_by_1",
																		"typeString": "int_const 68"
																	},
																	"value": "68"
																},
																"src": "2768:18:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1125,
															"nodeType": "IfStatement",
															"src": "2764:50:15",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "556e6578706563746564206572726f72",
																			"id": 1122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2795:18:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_9b951eb3fb3742579e39d15610bb1800acf108358e69a1cabf56fc48cbe86cff",
																				"typeString": "literal_string \"Unexpected error\""
																			},
																			"value": "Unexpected error"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_9b951eb3fb3742579e39d15610bb1800acf108358e69a1cabf56fc48cbe86cff",
																				"typeString": "literal_string \"Unexpected error\""
																			}
																		],
																		"id": 1121,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "2788:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1123,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2788:26:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1124,
																"nodeType": "ExpressionStatement",
																"src": "2788:26:15"
															}
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2837:59:15",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2855:27:15",
																		"value": {
																			"arguments": [
																				{
																					"name": "reason",
																					"nodeType": "YulIdentifier",
																					"src": "2869:6:15"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2877:4:15",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2865:3:15"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2865:17:15"
																		},
																		"variableNames": [
																			{
																				"name": "reason",
																				"nodeType": "YulIdentifier",
																				"src": "2855:6:15"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1108,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2855:6:15",
																	"valueSize": 1
																},
																{
																	"declaration": 1108,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2869:6:15",
																	"valueSize": 1
																}
															],
															"id": 1126,
															"nodeType": "InlineAssembly",
															"src": "2828:68:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1130,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1108,
																				"src": "2927:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1132,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2936:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																							"typeString": "type(string storage pointer)"
																						},
																						"typeName": {
																							"id": 1131,
																							"name": "string",
																							"nodeType": "ElementaryTypeName",
																							"src": "2936:6:15",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1133,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "2935:8:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																					"typeString": "type(string storage pointer)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																					"typeString": "type(string storage pointer)"
																				}
																			],
																			"expression": {
																				"id": 1128,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "2916:3:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1129,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "2916:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2916:28:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1127,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "2909:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2909:36:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1136,
															"nodeType": "ExpressionStatement",
															"src": "2909:36:15"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1141,
															"name": "reason",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "2983:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 1143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2992:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1142,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2992:7:15",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1144,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2991:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														],
														"expression": {
															"id": 1139,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "2972:3:15",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1140,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "2972:10:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2972:29:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1112,
												"id": 1146,
												"nodeType": "Return",
												"src": "2965:36:15"
											}
										]
									},
									"documentation": {
										"id": 1106,
										"nodeType": "StructuredDocumentation",
										"src": "2562:69:15",
										"text": "@dev Parses a revert reason that should contain the numeric quote"
									},
									"id": 1148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseRevertReason",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "reason",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "2663:19:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1107,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2663:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2662:21:15"
									},
									"returnParameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "2706:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2706:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2705:9:15"
									},
									"scope": 1417,
									"src": "2636:372:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										226
									],
									"body": {
										"id": 1220,
										"nodeType": "Block",
										"src": "3255:605:15",
										"statements": [
											{
												"assignments": [
													1166
												],
												"declarations": [
													{
														"constant": false,
														"id": 1166,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 1220,
														"src": "3265:15:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1165,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3265:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1170,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1167,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1151,
														"src": "3283:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1168,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1153,
														"src": "3293:8:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3283:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3265:36:15"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 1208,
															"nodeType": "Block",
															"src": "3766:2:15",
															"statements": []
														},
														"errorName": "",
														"id": 1209,
														"nodeType": "TryCatchClause",
														"src": "3766:2:15"
													},
													{
														"block": {
															"id": 1217,
															"nodeType": "Block",
															"src": "3797:57:15",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1214,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1211,
																				"src": "3836:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 1213,
																			"name": "parseRevertReason",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1148,
																			"src": "3818:17:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$",
																				"typeString": "function (bytes memory) pure returns (uint256)"
																			}
																		},
																		"id": 1215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3818:25:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1164,
																	"id": 1216,
																	"nodeType": "Return",
																	"src": "3811:32:15"
																}
															]
														},
														"errorName": "",
														"id": 1218,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 1212,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 1211,
																	"mutability": "mutable",
																	"name": "reason",
																	"nodeType": "VariableDeclaration",
																	"scope": 1218,
																	"src": "3776:19:15",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 1210,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3776:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "3775:21:15"
														},
														"src": "3769:85:15"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1179,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3390:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Quoter_$1417",
																		"typeString": "contract Quoter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Quoter_$1417",
																		"typeString": "contract Quoter"
																	}
																],
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3382:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1177,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3382:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3382:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1181,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1166,
															"src": "3463:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 1182,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1157,
																	"src": "3491:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1486,
																"src": "3491:17:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 1184,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3491:19:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1185,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1159,
																	"src": "3528:17:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1186,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3549:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3528:22:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1199,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1159,
																"src": "3668:17:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "3528:157:15",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1188,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1166,
																			"src": "3574:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1193,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2022,
																					"src": "3617:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2022_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1194,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1508,
																				"src": "3617:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1195,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3643:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3617:27:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 1197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "3574:70:15",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1192,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1189,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2022,
																					"src": "3587:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2022_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1190,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1504,
																				"src": "3587:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1191,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3613:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3587:27:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1198,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3573:72:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 1203,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1151,
																	"src": "3720:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1204,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1155,
																	"src": "3729:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																},
																{
																	"id": 1205,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1153,
																	"src": "3734:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1201,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3703:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "3703:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3703:40:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1172,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1151,
																	"src": "3336:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1173,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1153,
																	"src": "3345:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1174,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1155,
																	"src": "3355:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 1171,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1011,
																"src": "3328:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$275_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 1175,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3328:31:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1176,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 352,
														"src": "3328:36:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3328:429:15",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 1219,
												"nodeType": "TryStatement",
												"src": "3312:542:15"
											}
										]
									},
									"documentation": {
										"id": 1149,
										"nodeType": "StructuredDocumentation",
										"src": "3014:23:15",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "f7729d43",
									"id": 1221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1161,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3218:8:15"
									},
									"parameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3082:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3107:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3107:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3133:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1154,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3133:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3153:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3153:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3179:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1158,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3179:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3072:138:15"
									},
									"returnParameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3236:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3236:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:19:15"
									},
									"scope": 1417,
									"src": "3042:818:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										210
									],
									"body": {
										"id": 1273,
										"nodeType": "Block",
										"src": "4002:552:15",
										"statements": [
											{
												"body": {
													"id": 1271,
													"nodeType": "Block",
													"src": "4025:523:15",
													"statements": [
														{
															"assignments": [
																1234
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1234,
																	"mutability": "mutable",
																	"name": "hasMultiplePools",
																	"nodeType": "VariableDeclaration",
																	"scope": 1271,
																	"src": "4039:21:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1233,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "4039:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1238,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1235,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1224,
																		"src": "4063:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 756,
																	"src": "4063:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 1237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4063:23:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4039:47:15"
														},
														{
															"assignments": [
																1240,
																1242,
																1244
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1240,
																	"mutability": "mutable",
																	"name": "tokenIn",
																	"nodeType": "VariableDeclaration",
																	"scope": 1271,
																	"src": "4102:15:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1239,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4102:7:15",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1242,
																	"mutability": "mutable",
																	"name": "tokenOut",
																	"nodeType": "VariableDeclaration",
																	"scope": 1271,
																	"src": "4119:16:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1241,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4119:7:15",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1244,
																	"mutability": "mutable",
																	"name": "fee",
																	"nodeType": "VariableDeclaration",
																	"scope": 1271,
																	"src": "4137:10:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	"typeName": {
																		"id": 1243,
																		"name": "uint24",
																		"nodeType": "ElementaryTypeName",
																		"src": "4137:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint24",
																			"typeString": "uint24"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1248,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1245,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1224,
																		"src": "4151:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decodeFirstPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 790,
																	"src": "4151:20:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (address,address,uint24)"
																	}
																},
																"id": 1247,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4151:22:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
																	"typeString": "tuple(address,address,uint24)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4101:72:15"
														},
														{
															"expression": {
																"id": 1257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1249,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "4267:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1251,
																			"name": "tokenIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1240,
																			"src": "4300:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1252,
																			"name": "tokenOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1242,
																			"src": "4309:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1253,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1244,
																			"src": "4319:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		},
																		{
																			"id": 1254,
																			"name": "amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1226,
																			"src": "4324:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "30",
																			"id": 1255,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4334:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1250,
																		"name": "quoteExactInputSingle",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1221,
																		"src": "4278:21:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$_t_uint160_$returns$_t_uint256_$",
																			"typeString": "function (address,address,uint24,uint256,uint160) returns (uint256)"
																		}
																	},
																	"id": 1256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4278:58:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4267:69:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1258,
															"nodeType": "ExpressionStatement",
															"src": "4267:69:15"
														},
														{
															"condition": {
																"id": 1259,
																"name": "hasMultiplePools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1234,
																"src": "4410:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1269,
																"nodeType": "Block",
																"src": "4490:48:15",
																"statements": [
																	{
																		"expression": {
																			"id": 1267,
																			"name": "amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1226,
																			"src": "4515:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"functionReturnParameters": 1231,
																		"id": 1268,
																		"nodeType": "Return",
																		"src": "4508:15:15"
																	}
																]
															},
															"id": 1270,
															"nodeType": "IfStatement",
															"src": "4406:132:15",
															"trueBody": {
																"id": 1266,
																"nodeType": "Block",
																"src": "4428:56:15",
																"statements": [
																	{
																		"expression": {
																			"id": 1264,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1260,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1224,
																				"src": "4446:4:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"id": 1261,
																						"name": "path",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1224,
																						"src": "4453:4:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 1262,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 823,
																					"src": "4453:14:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 1263,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4453:16:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "4446:23:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1265,
																		"nodeType": "ExpressionStatement",
																		"src": "4446:23:15"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"hexValue": "74727565",
													"id": 1232,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4019:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"id": 1272,
												"nodeType": "WhileStatement",
												"src": "4012:536:15"
											}
										]
									},
									"documentation": {
										"id": 1222,
										"nodeType": "StructuredDocumentation",
										"src": "3866:23:15",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "cdca1753",
									"id": 1274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1228,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3965:8:15"
									},
									"parameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1224,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "3919:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1223,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3919:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "3938:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3938:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3918:37:15"
									},
									"returnParameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "3983:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3983:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3982:19:15"
									},
									"scope": 1417,
									"src": "3894:660:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										252
									],
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "4802:860:15",
										"statements": [
											{
												"assignments": [
													1292
												],
												"declarations": [
													{
														"constant": false,
														"id": 1292,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 1362,
														"src": "4812:15:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1291,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4812:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1296,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1293,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1277,
														"src": "4830:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1294,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "4840:8:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4830:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4812:36:15"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1297,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1285,
														"src": "4972:17:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1298,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4993:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4972:22:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1304,
												"nodeType": "IfStatement",
												"src": "4968:55:15",
												"trueBody": {
													"expression": {
														"id": 1302,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1300,
															"name": "amountOutCached",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 974,
															"src": "4996:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"id": 1301,
															"name": "amountOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1283,
															"src": "5014:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4996:27:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1303,
													"nodeType": "ExpressionStatement",
													"src": "4996:27:15"
												}
											},
											{
												"clauses": [
													{
														"block": {
															"id": 1343,
															"nodeType": "Block",
															"src": "5489:2:15",
															"statements": []
														},
														"errorName": "",
														"id": 1344,
														"nodeType": "TryCatchClause",
														"src": "5489:2:15"
													},
													{
														"block": {
															"id": 1359,
															"nodeType": "Block",
															"src": "5520:136:15",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		"id": 1350,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1348,
																			"name": "sqrtPriceLimitX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1285,
																			"src": "5538:17:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1349,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5559:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5538:22:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1354,
																	"nodeType": "IfStatement",
																	"src": "5534:50:15",
																	"trueBody": {
																		"expression": {
																			"id": 1352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "delete",
																			"prefix": true,
																			"src": "5562:22:15",
																			"subExpression": {
																				"id": 1351,
																				"name": "amountOutCached",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 974,
																				"src": "5569:15:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1353,
																		"nodeType": "ExpressionStatement",
																		"src": "5562:22:15"
																	}
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1356,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1346,
																				"src": "5638:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 1355,
																			"name": "parseRevertReason",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1148,
																			"src": "5620:17:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$",
																				"typeString": "function (bytes memory) pure returns (uint256)"
																			}
																		},
																		"id": 1357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5620:25:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1290,
																	"id": 1358,
																	"nodeType": "Return",
																	"src": "5613:32:15"
																}
															]
														},
														"errorName": "",
														"id": 1360,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 1347,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 1346,
																	"mutability": "mutable",
																	"name": "reason",
																	"nodeType": "VariableDeclaration",
																	"scope": 1360,
																	"src": "5499:19:15",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 1345,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "5499:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "5498:21:15"
														},
														"src": "5492:164:15"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1313,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5111:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Quoter_$1417",
																		"typeString": "contract Quoter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Quoter_$1417",
																		"typeString": "contract Quoter"
																	}
																],
																"id": 1312,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5103:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1311,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5103:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 1314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5103:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1315,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1292,
															"src": "5184:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "-",
															"prefix": true,
															"src": "5212:21:15",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1316,
																		"name": "amountOut",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1283,
																		"src": "5213:9:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toInt256",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1486,
																	"src": "5213:18:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (int256)"
																	}
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5213:20:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1322,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1320,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1285,
																	"src": "5251:17:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5272:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5251:22:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1334,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1285,
																"src": "5391:17:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "5251:157:15",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1323,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "5297:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1331,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1328,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2022,
																					"src": "5340:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2022_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1329,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1508,
																				"src": "5340:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1330,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5366:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5340:27:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 1332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "5297:70:15",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1327,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1324,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2022,
																					"src": "5310:8:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2022_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1325,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1504,
																				"src": "5310:23:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1326,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5336:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5310:27:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1333,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5296:72:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 1338,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "5443:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1339,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1281,
																	"src": "5453:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																},
																{
																	"id": 1340,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1277,
																	"src": "5458:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1336,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "5426:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "5426:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5426:40:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1306,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1277,
																	"src": "5057:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1307,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "5066:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1308,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1281,
																	"src": "5076:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 1305,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1011,
																"src": "5049:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$275_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 1309,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5049:31:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$275",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1310,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 352,
														"src": "5049:36:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5049:431:15",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 1361,
												"nodeType": "TryStatement",
												"src": "5033:623:15"
											}
										]
									},
									"documentation": {
										"id": 1275,
										"nodeType": "StructuredDocumentation",
										"src": "4560:23:15",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "30d07f21",
									"id": 1363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1287,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4766:8:15"
									},
									"parameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1277,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "4629:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4629:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "4654:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4654:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "4680:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1280,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "4680:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "4700:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4700:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "4727:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1284,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4727:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4619:139:15"
									},
									"returnParameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1289,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "4784:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4784:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4783:18:15"
									},
									"scope": 1417,
									"src": "4588:1074:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										236
									],
									"body": {
										"id": 1415,
										"nodeType": "Block",
										"src": "5805:556:15",
										"statements": [
											{
												"body": {
													"id": 1413,
													"nodeType": "Block",
													"src": "5828:527:15",
													"statements": [
														{
															"assignments": [
																1376
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1376,
																	"mutability": "mutable",
																	"name": "hasMultiplePools",
																	"nodeType": "VariableDeclaration",
																	"scope": 1413,
																	"src": "5842:21:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1375,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "5842:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1380,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1377,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1366,
																		"src": "5866:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 756,
																	"src": "5866:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 1379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5866:23:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5842:47:15"
														},
														{
															"assignments": [
																1382,
																1384,
																1386
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1382,
																	"mutability": "mutable",
																	"name": "tokenOut",
																	"nodeType": "VariableDeclaration",
																	"scope": 1413,
																	"src": "5905:16:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1381,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5905:7:15",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1384,
																	"mutability": "mutable",
																	"name": "tokenIn",
																	"nodeType": "VariableDeclaration",
																	"scope": 1413,
																	"src": "5923:15:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1383,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5923:7:15",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1386,
																	"mutability": "mutable",
																	"name": "fee",
																	"nodeType": "VariableDeclaration",
																	"scope": 1413,
																	"src": "5940:10:15",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	"typeName": {
																		"id": 1385,
																		"name": "uint24",
																		"nodeType": "ElementaryTypeName",
																		"src": "5940:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint24",
																			"typeString": "uint24"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1390,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1387,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1366,
																		"src": "5954:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decodeFirstPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 790,
																	"src": "5954:20:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (address,address,uint24)"
																	}
																},
																"id": 1389,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5954:22:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
																	"typeString": "tuple(address,address,uint24)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5904:72:15"
														},
														{
															"expression": {
																"id": 1399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1391,
																	"name": "amountOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1368,
																	"src": "6070:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1393,
																			"name": "tokenIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1384,
																			"src": "6105:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1394,
																			"name": "tokenOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1382,
																			"src": "6114:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1395,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1386,
																			"src": "6124:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		},
																		{
																			"id": 1396,
																			"name": "amountOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1368,
																			"src": "6129:9:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "30",
																			"id": 1397,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6140:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1392,
																		"name": "quoteExactOutputSingle",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1363,
																		"src": "6082:22:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$_t_uint160_$returns$_t_uint256_$",
																			"typeString": "function (address,address,uint24,uint256,uint160) returns (uint256)"
																		}
																	},
																	"id": 1398,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6082:60:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6070:72:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1400,
															"nodeType": "ExpressionStatement",
															"src": "6070:72:15"
														},
														{
															"condition": {
																"id": 1401,
																"name": "hasMultiplePools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1376,
																"src": "6216:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1411,
																"nodeType": "Block",
																"src": "6296:49:15",
																"statements": [
																	{
																		"expression": {
																			"id": 1409,
																			"name": "amountOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1368,
																			"src": "6321:9:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"functionReturnParameters": 1373,
																		"id": 1410,
																		"nodeType": "Return",
																		"src": "6314:16:15"
																	}
																]
															},
															"id": 1412,
															"nodeType": "IfStatement",
															"src": "6212:133:15",
															"trueBody": {
																"id": 1408,
																"nodeType": "Block",
																"src": "6234:56:15",
																"statements": [
																	{
																		"expression": {
																			"id": 1406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1402,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1366,
																				"src": "6252:4:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"id": 1403,
																						"name": "path",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1366,
																						"src": "6259:4:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 1404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 823,
																					"src": "6259:14:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 1405,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6259:16:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "6252:23:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1407,
																		"nodeType": "ExpressionStatement",
																		"src": "6252:23:15"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"hexValue": "74727565",
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5822:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"id": 1414,
												"nodeType": "WhileStatement",
												"src": "5815:540:15"
											}
										]
									},
									"documentation": {
										"id": 1364,
										"nodeType": "StructuredDocumentation",
										"src": "5668:23:15",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "2f80bb1d",
									"id": 1416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1370,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5769:8:15"
									},
									"parameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "5722:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1365,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5722:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "5741:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5741:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5721:38:15"
									},
									"returnParameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1416,
												"src": "5787:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5786:18:15"
									},
									"scope": 1417,
									"src": "5696:665:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1418,
							"src": "642:5721:15"
						}
					],
					"src": "45:6319:15"
				},
				"id": 15
			},
			"contracts/Quoter/SafeCast.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/SafeCast.sol",
					"exportedSymbols": {
						"SafeCast": [
							1487
						]
					},
					"id": 1488,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1419,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1420,
								"nodeType": "StructuredDocumentation",
								"src": "71:94:16",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 1487,
							"linearizedBaseContracts": [
								1487
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1440,
										"nodeType": "Block",
										"src": "421:47:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 1434,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1429,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1426,
																			"src": "440:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 1432,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1423,
																					"src": "452:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1431,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "444:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1430,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "444:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "444:10:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "440:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1435,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "439:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1436,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1423,
																"src": "459:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "439:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1428,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "431:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "431:30:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1439,
												"nodeType": "ExpressionStatement",
												"src": "431:30:16"
											}
										]
									},
									"documentation": {
										"id": 1421,
										"nodeType": "StructuredDocumentation",
										"src": "188:164:16",
										"text": "@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"
									},
									"id": 1441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint160",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "376:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "375:11:16"
									},
									"returnParameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "410:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1425,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:11:16"
									},
									"scope": 1487,
									"src": "357:111:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1461,
										"nodeType": "Block",
										"src": "713:46:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 1455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1450,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1447,
																			"src": "732:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 1453,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1444,
																					"src": "743:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"id": 1452,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "736:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int128_$",
																					"typeString": "type(int128)"
																				},
																				"typeName": {
																					"id": 1451,
																					"name": "int128",
																					"nodeType": "ElementaryTypeName",
																					"src": "736:6:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1454,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "736:9:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"src": "732:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int128",
																			"typeString": "int128"
																		}
																	}
																],
																"id": 1456,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "731:15:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int128",
																	"typeString": "int128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1457,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1444,
																"src": "750:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"src": "731:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1449,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "723:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "723:29:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1460,
												"nodeType": "ExpressionStatement",
												"src": "723:29:16"
											}
										]
									},
									"documentation": {
										"id": 1442,
										"nodeType": "StructuredDocumentation",
										"src": "474:173:16",
										"text": "@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"
									},
									"id": 1462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "670:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1443,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "670:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:10:16"
									},
									"returnParameters": {
										"id": 1448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "703:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1446,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "703:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:10:16"
									},
									"scope": 1487,
									"src": "652:107:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1485,
										"nodeType": "Block",
										"src": "986:59:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1471,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1465,
																"src": "1004:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																},
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1008:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "323535",
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1011:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_255_by_1",
																		"typeString": "int_const 255"
																	},
																	"value": "255"
																},
																"src": "1008:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																}
															},
															"src": "1004:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1470,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "996:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "996:19:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1477,
												"nodeType": "ExpressionStatement",
												"src": "996:19:16"
											},
											{
												"expression": {
													"id": 1483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1478,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1468,
														"src": "1025:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1481,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1465,
																"src": "1036:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1029:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 1479,
																"name": "int256",
																"nodeType": "ElementaryTypeName",
																"src": "1029:6:16",
																"typeDescriptions": {}
															}
														},
														"id": 1482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1029:9:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "1025:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 1484,
												"nodeType": "ExpressionStatement",
												"src": "1025:13:16"
											}
										]
									},
									"documentation": {
										"id": 1463,
										"nodeType": "StructuredDocumentation",
										"src": "765:154:16",
										"text": "@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"
									},
									"id": 1486,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "942:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:11:16"
									},
									"returnParameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "976:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1467,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:10:16"
									},
									"scope": 1487,
									"src": "924:121:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1488,
							"src": "165:882:16"
						}
					],
					"src": "45:1003:16"
				},
				"id": 16
			},
			"contracts/Quoter/TickMath.sol": {
				"ast": {
					"absolutePath": "contracts/Quoter/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							2022
						]
					},
					"id": 2023,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1489,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1490,
								"nodeType": "StructuredDocumentation",
								"src": "71:235:17",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 2022,
							"linearizedBaseContracts": [
								2022
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 1491,
										"nodeType": "StructuredDocumentation",
										"src": "329:108:17",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 1495,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 2022,
									"src": "442:42:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 1492,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "442:5:17",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 1494,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "477:7:17",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 1493,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "478:6:17",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1496,
										"nodeType": "StructuredDocumentation",
										"src": "490:107:17",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 1500,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 2022,
									"src": "602:44:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 1497,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "602:5:17",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 1499,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "637:9:17",
										"subExpression": {
											"id": 1498,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1495,
											"src": "638:8:17",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1501,
										"nodeType": "StructuredDocumentation",
										"src": "653:116:17",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 1504,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 2022,
									"src": "774:53:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 1502,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "774:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 1503,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "817:10:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1505,
										"nodeType": "StructuredDocumentation",
										"src": "833:116:17",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 1508,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 2022,
									"src": "954:92:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 1506,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "954:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 1507,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "997:49:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1881,
										"nodeType": "Block",
										"src": "1440:2495:17",
										"statements": [
											{
												"assignments": [
													1517
												],
												"declarations": [
													{
														"constant": false,
														"id": 1517,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1881,
														"src": "1450:15:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1516,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1450:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1537,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 1520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1518,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1511,
															"src": "1468:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1475:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1468:8:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1533,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1511,
																		"src": "1519:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 1532,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1512:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1531,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1512:6:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 1534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1512:12:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1504:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1529,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1504:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 1535,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1504:21:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1468:57:17",
													"trueExpression": {
														"arguments": [
															{
																"id": 1527,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1487:13:17",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 1525,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1511,
																			"src": "1495:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1488:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1523,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1488:6:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1526,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1488:12:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1479:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1521,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1479:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 1528,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1479:22:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1450:75:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1539,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1517,
																"src": "1543:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1542,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1500,
																		"src": "1562:8:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 1541,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1554:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1540,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1554:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 1543,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1554:17:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1543:28:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 1545,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1573:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 1538,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1535:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1535:42:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1547,
												"nodeType": "ExpressionStatement",
												"src": "1535:42:17"
											},
											{
												"assignments": [
													1549
												],
												"declarations": [
													{
														"constant": false,
														"id": 1549,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1881,
														"src": "1588:13:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1548,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1588:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1558,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1554,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1550,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1517,
																"src": "1604:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 1551,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1614:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1604:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1553,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1621:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1604:18:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 1556,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1662:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 1557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1604:93:17",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 1555,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1625:34:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1588:109:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1561,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1559,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "1711:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 1560,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1721:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1711:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1562,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1728:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1711:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1573,
												"nodeType": "IfStatement",
												"src": "1707:83:17",
												"trueBody": {
													"expression": {
														"id": 1571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1564,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "1731:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1565,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "1740:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 1566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1748:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1740:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1568,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1739:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1569,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1787:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1739:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1731:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1572,
													"nodeType": "ExpressionStatement",
													"src": "1731:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1574,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "1804:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 1575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1814:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1804:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1577,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1821:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1804:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1588,
												"nodeType": "IfStatement",
												"src": "1800:83:17",
												"trueBody": {
													"expression": {
														"id": 1586,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1579,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "1824:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1582,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1580,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "1833:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 1581,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1841:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1833:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1583,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1832:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1584,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1880:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1832:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1824:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1587,
													"nodeType": "ExpressionStatement",
													"src": "1824:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1591,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1589,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "1897:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 1590,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1907:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1897:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1592,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1914:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1897:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1603,
												"nodeType": "IfStatement",
												"src": "1893:83:17",
												"trueBody": {
													"expression": {
														"id": 1601,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1594,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "1917:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1600,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1597,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1595,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "1926:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 1596,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1934:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1926:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1598,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1925:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1599,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1973:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1925:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1917:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1602,
													"nodeType": "ExpressionStatement",
													"src": "1917:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1606,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1604,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "1990:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 1605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2000:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1990:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1607,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2008:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1990:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1618,
												"nodeType": "IfStatement",
												"src": "1986:84:17",
												"trueBody": {
													"expression": {
														"id": 1616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1609,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2011:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1610,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2020:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 1611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2028:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2020:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1613,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2019:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2067:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2019:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2011:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1617,
													"nodeType": "ExpressionStatement",
													"src": "2011:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1619,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2084:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 1620,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2094:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2084:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1622,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2102:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2084:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1633,
												"nodeType": "IfStatement",
												"src": "2080:84:17",
												"trueBody": {
													"expression": {
														"id": 1631,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1624,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2105:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1627,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1625,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2114:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 1626,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2122:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2114:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1628,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2113:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2161:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2113:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2105:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1632,
													"nodeType": "ExpressionStatement",
													"src": "2105:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1636,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1634,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2178:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 1635,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2188:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2178:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1637,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2196:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2178:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1648,
												"nodeType": "IfStatement",
												"src": "2174:84:17",
												"trueBody": {
													"expression": {
														"id": 1646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1639,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2199:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1642,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1640,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2208:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 1641,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2216:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2208:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1643,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2207:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1644,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2255:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2207:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2199:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1647,
													"nodeType": "ExpressionStatement",
													"src": "2199:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1649,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2272:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 1650,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2282:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2272:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1652,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2290:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2272:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1663,
												"nodeType": "IfStatement",
												"src": "2268:84:17",
												"trueBody": {
													"expression": {
														"id": 1661,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1654,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2293:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1660,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1655,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2302:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 1656,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2310:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2302:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1658,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2301:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1659,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2349:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2301:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2293:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1662,
													"nodeType": "ExpressionStatement",
													"src": "2293:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1666,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1664,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2366:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 1665,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2376:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2366:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1667,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2385:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2366:20:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1678,
												"nodeType": "IfStatement",
												"src": "2362:85:17",
												"trueBody": {
													"expression": {
														"id": 1676,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1669,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2388:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1672,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1670,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2397:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 1671,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2405:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2397:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1673,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2396:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1674,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2444:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2396:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2388:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1677,
													"nodeType": "ExpressionStatement",
													"src": "2388:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1681,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1679,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2461:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 1680,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2471:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2461:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1682,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2480:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2461:20:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1693,
												"nodeType": "IfStatement",
												"src": "2457:85:17",
												"trueBody": {
													"expression": {
														"id": 1691,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1684,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2483:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1685,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2492:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 1686,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2500:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2492:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1688,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2491:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1689,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2539:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2491:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2483:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1692,
													"nodeType": "ExpressionStatement",
													"src": "2483:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1694,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2556:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 1695,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2566:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2556:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1697,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2575:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2556:20:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1708,
												"nodeType": "IfStatement",
												"src": "2552:85:17",
												"trueBody": {
													"expression": {
														"id": 1706,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1699,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2578:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1700,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2587:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 1701,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2595:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2587:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1703,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2586:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1704,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2634:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2586:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2578:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1707,
													"nodeType": "ExpressionStatement",
													"src": "2578:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1711,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1709,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2651:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 1710,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2661:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2651:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1712,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2670:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2651:20:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1723,
												"nodeType": "IfStatement",
												"src": "2647:85:17",
												"trueBody": {
													"expression": {
														"id": 1721,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1714,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2673:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1717,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1715,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2682:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 1716,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2690:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2682:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1718,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2681:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1719,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2729:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2681:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2673:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1722,
													"nodeType": "ExpressionStatement",
													"src": "2673:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1726,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1724,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2746:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 1725,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2756:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2746:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1727,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2766:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2746:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1738,
												"nodeType": "IfStatement",
												"src": "2742:86:17",
												"trueBody": {
													"expression": {
														"id": 1736,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1729,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2769:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1732,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1730,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2778:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 1731,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2786:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2778:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1733,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2777:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1734,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2825:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2777:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2769:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1737,
													"nodeType": "ExpressionStatement",
													"src": "2769:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1741,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1739,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2842:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 1740,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2852:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2842:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1742,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2862:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2842:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1753,
												"nodeType": "IfStatement",
												"src": "2838:86:17",
												"trueBody": {
													"expression": {
														"id": 1751,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1744,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2865:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1747,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1745,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2874:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 1746,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2882:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2874:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1748,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2873:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1749,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2921:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2873:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2865:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1752,
													"nodeType": "ExpressionStatement",
													"src": "2865:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1756,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1754,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "2938:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 1755,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2948:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2938:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1757,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2958:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2938:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1768,
												"nodeType": "IfStatement",
												"src": "2934:86:17",
												"trueBody": {
													"expression": {
														"id": 1766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1759,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2961:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1765,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1762,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1760,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "2970:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 1761,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2978:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2970:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1763,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2969:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1764,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3017:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2969:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2961:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1767,
													"nodeType": "ExpressionStatement",
													"src": "2961:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1769,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "3034:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 1770,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3044:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3034:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3054:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3034:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1783,
												"nodeType": "IfStatement",
												"src": "3030:86:17",
												"trueBody": {
													"expression": {
														"id": 1781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1774,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3057:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1775,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "3066:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 1776,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3074:34:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3066:42:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1778,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3065:44:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1779,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3113:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3065:51:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3057:59:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1782,
													"nodeType": "ExpressionStatement",
													"src": "3057:59:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1786,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1784,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "3130:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 1785,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3140:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3130:17:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1787,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3151:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3130:22:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1798,
												"nodeType": "IfStatement",
												"src": "3126:86:17",
												"trueBody": {
													"expression": {
														"id": 1796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1789,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3154:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1790,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "3163:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1791,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3171:33:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3163:41:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1793,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3162:43:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3209:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3162:50:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3154:58:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1797,
													"nodeType": "ExpressionStatement",
													"src": "3154:58:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1799,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "3226:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1800,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3236:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3226:17:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1802,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3247:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3226:22:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1813,
												"nodeType": "IfStatement",
												"src": "3222:85:17",
												"trueBody": {
													"expression": {
														"id": 1811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1804,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3250:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1805,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "3259:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3267:32:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3259:40:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1808,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3258:42:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1809,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3304:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3258:49:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3250:57:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1812,
													"nodeType": "ExpressionStatement",
													"src": "3250:57:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1816,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1814,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "3321:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1815,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3331:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3321:17:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1817,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3342:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3321:22:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1828,
												"nodeType": "IfStatement",
												"src": "3317:83:17",
												"trueBody": {
													"expression": {
														"id": 1826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1819,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3345:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1822,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1820,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "3354:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1821,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3362:30:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3354:38:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1823,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3353:40:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3397:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3353:47:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3345:55:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1827,
													"nodeType": "ExpressionStatement",
													"src": "3345:55:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1829,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "3414:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1830,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3424:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3414:17:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1832,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3435:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3414:22:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1843,
												"nodeType": "IfStatement",
												"src": "3410:78:17",
												"trueBody": {
													"expression": {
														"id": 1841,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1834,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3438:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1835,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1549,
																			"src": "3447:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1836,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3455:25:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3447:33:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1838,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3446:35:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1839,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3485:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3446:42:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3438:50:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1842,
													"nodeType": "ExpressionStatement",
													"src": "3438:50:17"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1844,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1511,
														"src": "3503:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1845,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3510:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3503:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1857,
												"nodeType": "IfStatement",
												"src": "3499:47:17",
												"trueBody": {
													"expression": {
														"id": 1855,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1847,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "3513:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3526:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1849,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3526:7:17",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1848,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3521:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3521:13:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1852,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3521:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1853,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1549,
																"src": "3541:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3521:25:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3513:33:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1856,
													"nodeType": "ExpressionStatement",
													"src": "3513:33:17"
												}
											},
											{
												"expression": {
													"id": 1879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1858,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1514,
														"src": "3856:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1863,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1861,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1549,
																				"src": "3880:5:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1862,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3889:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3880:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1864,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3879:13:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1872,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1870,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1865,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1549,
																						"src": "3896:5:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1868,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1866,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3905:1:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1867,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3910:2:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3905:7:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1869,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3904:9:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3896:17:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1871,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3917:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3896:22:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1874,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3925:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1875,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3896:30:17",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1873,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3921:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1876,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3895:32:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3879:48:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1860,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3871:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1859,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3871:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 1878,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3871:57:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3856:72:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1880,
												"nodeType": "ExpressionStatement",
												"src": "3856:72:17"
											}
										]
									},
									"documentation": {
										"id": 1509,
										"nodeType": "StructuredDocumentation",
										"src": "1053:297:17",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1882,
												"src": "1383:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1510,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1383:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1382:12:17"
									},
									"returnParameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1882,
												"src": "1418:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1513,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1417:22:17"
									},
									"scope": 2022,
									"src": "1355:2580:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2020,
										"nodeType": "Block",
										"src": "4439:4196:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1893,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1891,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "4556:12:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1892,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1504,
																	"src": "4572:14:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4556:30:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1896,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1894,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "4590:12:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1895,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1508,
																	"src": "4605:14:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4590:29:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4556:63:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1898,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4621:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1890,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4548:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4548:77:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1900,
												"nodeType": "ExpressionStatement",
												"src": "4548:77:17"
											},
											{
												"assignments": [
													1902
												],
												"declarations": [
													{
														"constant": false,
														"id": 1902,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "4635:13:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1901,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4635:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1909,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1905,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1885,
																"src": "4659:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1904,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4651:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1903,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4651:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 1906,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4651:21:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1907,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4676:2:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4651:27:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4635:43:17"
											},
											{
												"assignments": [
													1911
												],
												"declarations": [
													{
														"constant": false,
														"id": 1911,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "4689:9:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1910,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4689:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1913,
												"initialValue": {
													"id": 1912,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1902,
													"src": "4701:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4689:17:17"
											},
											{
												"assignments": [
													1915
												],
												"declarations": [
													{
														"constant": false,
														"id": 1915,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "4716:11:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1914,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4716:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1917,
												"initialValue": {
													"hexValue": "30",
													"id": 1916,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4730:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4716:15:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4751:139:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4765:58:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4778:1:17",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4784:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4787:34:17",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4781:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4781:41:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4774:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4774:49:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4769:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4836:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4846:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4851:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4843:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4843:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4836:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4866:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4875:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4878:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4871:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4871:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4866:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "4836:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "4846:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "4784:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "4866:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "4878:1:17",
														"valueSize": 1
													}
												],
												"id": 1918,
												"nodeType": "InlineAssembly",
												"src": "4742:148:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4908:123:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4922:42:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4935:1:17",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4941:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4944:18:17",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4938:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4938:25:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4931:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4931:33:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4926:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4977:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4987:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4992:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4984:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "4984:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4977:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5007:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5016:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5019:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5012:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5012:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5007:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "4977:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "4987:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "4941:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5007:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5019:1:17",
														"valueSize": 1
													}
												],
												"id": 1919,
												"nodeType": "InlineAssembly",
												"src": "4899:132:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5049:115:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5063:34:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5076:1:17",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5082:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5085:10:17",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5079:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5079:17:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5072:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5072:25:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5067:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5110:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5120:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5125:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5117:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5117:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5110:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5140:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5149:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5152:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5145:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5145:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5140:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5110:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5120:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5082:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5140:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5152:1:17",
														"valueSize": 1
													}
												],
												"id": 1920,
												"nodeType": "InlineAssembly",
												"src": "5040:124:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5182:111:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5196:30:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5209:1:17",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5215:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5218:6:17",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5212:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5212:13:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5205:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5205:21:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5200:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5239:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5249:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5254:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5246:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5246:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5239:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5269:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5278:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5281:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5274:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5274:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5269:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5239:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5249:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5215:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5269:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5281:1:17",
														"valueSize": 1
													}
												],
												"id": 1921,
												"nodeType": "InlineAssembly",
												"src": "5173:120:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5311:109:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5325:28:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5338:1:17",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5344:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5347:4:17",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5341:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5341:11:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5334:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5334:19:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5329:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5366:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5376:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5381:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5373:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5373:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5366:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5396:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5405:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5408:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5401:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5401:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5396:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5366:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5376:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5344:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5396:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5408:1:17",
														"valueSize": 1
													}
												],
												"id": 1922,
												"nodeType": "InlineAssembly",
												"src": "5302:118:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5438:108:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5452:27:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5465:1:17",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5471:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5474:3:17",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5468:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5468:10:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5461:18:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5456:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5492:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5502:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5507:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5499:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5492:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5522:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5531:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5534:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5527:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5527:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5522:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5492:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5502:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5471:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5522:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5534:1:17",
														"valueSize": 1
													}
												],
												"id": 1923,
												"nodeType": "InlineAssembly",
												"src": "5429:117:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5564:108:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5578:27:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5591:1:17",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5597:1:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5600:3:17",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5594:2:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5594:10:17"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5587:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5587:18:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5582:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5618:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5628:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5633:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5625:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5625:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5618:3:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5648:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5657:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5660:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5653:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5653:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5648:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5618:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5628:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5597:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5648:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5660:1:17",
														"valueSize": 1
													}
												],
												"id": 1924,
												"nodeType": "InlineAssembly",
												"src": "5555:117:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5690:73:17",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5704:19:17",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5716:1:17"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5719:3:17",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5713:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5713:10:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5708:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5736:17:17",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5746:3:17"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5751:1:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5743:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5743:10:17"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5736:3:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5736:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1915,
														"isOffset": false,
														"isSlot": false,
														"src": "5746:3:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5716:1:17",
														"valueSize": 1
													}
												],
												"id": 1925,
												"nodeType": "InlineAssembly",
												"src": "5681:82:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1926,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1915,
														"src": "5777:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1927,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5784:3:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5777:10:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1945,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1938,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1911,
															"src": "5828:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1944,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1939,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1902,
																"src": "5832:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1942,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1940,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5842:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1941,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "5848:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5842:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1943,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5841:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5832:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5828:24:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1946,
													"nodeType": "ExpressionStatement",
													"src": "5828:24:17"
												},
												"id": 1947,
												"nodeType": "IfStatement",
												"src": "5773:79:17",
												"trueBody": {
													"expression": {
														"id": 1936,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1929,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1911,
															"src": "5789:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1930,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1902,
																"src": "5793:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1933,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1931,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "5803:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1932,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5809:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5803:9:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1934,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5802:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5793:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5789:24:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1937,
													"nodeType": "ExpressionStatement",
													"src": "5789:24:17"
												}
											},
											{
												"assignments": [
													1949
												],
												"declarations": [
													{
														"constant": false,
														"id": 1949,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "5863:12:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1948,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5863:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1959,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1955,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1952,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "5886:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1951,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5879:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1950,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5879:6:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1953,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5879:11:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1954,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5893:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5879:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1956,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5878:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1957,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5901:2:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5878:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5863:40:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5923:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5937:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5946:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5955:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5958:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5951:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5951:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5942:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5942:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5937:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5974:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5987:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5992:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5983:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "5983:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5978:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6007:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6019:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6030:2:17",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6034:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6026:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6026:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6016:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6016:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6007:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6050:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6059:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6062:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6055:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6055:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6050:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6007:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6019:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5937:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5955:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5958:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "5992:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6050:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6062:1:17",
														"valueSize": 1
													}
												],
												"id": 1960,
												"nodeType": "InlineAssembly",
												"src": "5914:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6092:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6106:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6115:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6124:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6127:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6120:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6120:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6111:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6111:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6106:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6143:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6156:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6161:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6152:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6152:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6147:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6176:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6188:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6199:2:17",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6203:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6195:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6195:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6185:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6185:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6176:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6219:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6228:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6231:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6224:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6224:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6219:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6176:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6188:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6106:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6124:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6127:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6161:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6219:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6231:1:17",
														"valueSize": 1
													}
												],
												"id": 1961,
												"nodeType": "InlineAssembly",
												"src": "6083:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6261:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6275:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6284:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6293:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6296:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6289:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6289:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6280:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6280:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6275:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6312:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6325:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6330:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6321:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6321:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6316:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6345:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6357:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6368:2:17",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6372:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6364:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6364:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6354:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6354:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6345:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6388:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6397:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6400:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6393:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6393:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6388:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6345:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6357:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6275:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6293:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6296:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6330:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6388:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6400:1:17",
														"valueSize": 1
													}
												],
												"id": 1962,
												"nodeType": "InlineAssembly",
												"src": "6252:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6430:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6444:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6453:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6462:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6465:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6458:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6458:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6449:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6449:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6444:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6481:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6494:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6499:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6490:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6490:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6485:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6514:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6526:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6537:2:17",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6541:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6533:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6533:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6523:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6523:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6514:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6557:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6566:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6569:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6562:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6562:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6557:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6514:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6526:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6444:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6462:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6465:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6499:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6557:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6569:1:17",
														"valueSize": 1
													}
												],
												"id": 1963,
												"nodeType": "InlineAssembly",
												"src": "6421:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6599:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6613:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6622:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6631:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6634:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6627:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6627:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6618:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6618:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6613:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6650:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6663:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6668:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6659:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6659:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6654:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6683:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6695:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6706:2:17",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6710:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6702:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6702:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6692:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6692:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6683:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6726:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6735:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6738:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6731:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6731:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6726:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6683:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6695:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6613:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6631:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6634:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6668:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6726:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6738:1:17",
														"valueSize": 1
													}
												],
												"id": 1964,
												"nodeType": "InlineAssembly",
												"src": "6590:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6768:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6782:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6791:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6800:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6803:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6796:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6796:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6787:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6787:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6782:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6819:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6832:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6837:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6828:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6828:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6823:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6852:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6864:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6875:2:17",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6879:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6871:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6871:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6861:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6861:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6852:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6895:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6904:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6907:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6900:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6900:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6895:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6852:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "6864:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6782:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6800:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6803:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6837:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6895:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6907:1:17",
														"valueSize": 1
													}
												],
												"id": 1965,
												"nodeType": "InlineAssembly",
												"src": "6759:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6937:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6951:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6960:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6969:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6972:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6965:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6965:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6956:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6956:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6951:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6988:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7001:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7006:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6997:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "6997:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6992:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7021:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7033:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7044:2:17",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7048:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7040:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7040:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7030:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7030:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7021:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7064:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7073:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7076:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7069:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7069:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7064:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7021:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7033:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6951:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6969:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "6972:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7006:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7064:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7076:1:17",
														"valueSize": 1
													}
												],
												"id": 1966,
												"nodeType": "InlineAssembly",
												"src": "6928:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7106:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7120:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7129:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7138:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7141:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7134:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7134:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7125:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7125:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7120:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7157:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7170:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7175:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7166:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7166:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7161:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7190:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7202:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7213:2:17",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7217:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7209:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7209:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7199:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7199:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7190:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7233:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7242:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7245:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7238:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7238:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7233:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7190:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7202:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7120:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7138:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7141:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7175:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7233:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7245:1:17",
														"valueSize": 1
													}
												],
												"id": 1967,
												"nodeType": "InlineAssembly",
												"src": "7097:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7275:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7289:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7298:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7307:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7310:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7303:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7303:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7294:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7294:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7289:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7326:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7339:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7344:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7335:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7335:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7330:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7359:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7371:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7382:2:17",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7386:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7378:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7378:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7368:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7368:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7359:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7402:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7411:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7414:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7407:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7407:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7402:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7359:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7371:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7289:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7307:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7310:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7344:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7402:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7414:1:17",
														"valueSize": 1
													}
												],
												"id": 1968,
												"nodeType": "InlineAssembly",
												"src": "7266:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7444:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7458:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7467:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7476:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7479:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7472:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7472:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7463:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7463:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7458:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7495:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7508:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7513:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7504:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7504:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7499:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7528:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7540:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7551:2:17",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7555:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7547:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7547:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7537:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7537:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7528:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7571:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7580:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7583:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7576:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7576:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7571:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7528:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7540:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7458:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7476:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7479:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7513:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7571:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7583:1:17",
														"valueSize": 1
													}
												],
												"id": 1969,
												"nodeType": "InlineAssembly",
												"src": "7435:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7613:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7627:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7636:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7645:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7648:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7641:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7641:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7632:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7632:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7627:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7664:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7677:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7682:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7673:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7673:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7668:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7697:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7709:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7720:2:17",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7724:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7716:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7716:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7706:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7706:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7697:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7740:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7749:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7752:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7745:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7745:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7740:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7697:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7709:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7627:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7645:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7648:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7682:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7740:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7752:1:17",
														"valueSize": 1
													}
												],
												"id": 1970,
												"nodeType": "InlineAssembly",
												"src": "7604:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7782:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7796:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7805:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7814:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7817:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7810:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7810:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7801:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7801:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7796:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7833:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7846:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7851:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7842:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7842:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7837:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7866:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7878:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7889:2:17",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7893:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7885:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7885:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7875:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7875:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7866:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7909:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7918:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7921:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7914:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7914:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7909:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7866:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "7878:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7796:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7814:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7817:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7851:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7909:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7921:1:17",
														"valueSize": 1
													}
												],
												"id": 1971,
												"nodeType": "InlineAssembly",
												"src": "7773:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7951:151:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7965:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7974:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7983:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7986:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7979:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7979:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7970:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "7970:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7965:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8002:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8015:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8020:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8011:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8011:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8006:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8035:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8047:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8058:2:17",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8062:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8054:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8054:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8044:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8044:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8035:5:17"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8078:14:17",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8087:1:17"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8090:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8083:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8083:9:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8078:1:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "8035:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "8047:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7965:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7983:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "7986:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8020:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8078:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8090:1:17",
														"valueSize": 1
													}
												],
												"id": 1972,
												"nodeType": "InlineAssembly",
												"src": "7942:160:17"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8120:124:17",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8134:24:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8143:3:17",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8152:1:17"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8155:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8148:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8148:9:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8139:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8139:19:17"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8134:1:17"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8171:20:17",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8184:3:17",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8189:1:17"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8180:3:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8180:11:17"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8175:1:17",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8204:30:17",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8216:5:17"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8227:2:17",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8231:1:17"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8223:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8223:10:17"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8213:2:17"
																},
																"nodeType": "YulFunctionCall",
																"src": "8213:21:17"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8204:5:17"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "8204:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1949,
														"isOffset": false,
														"isSlot": false,
														"src": "8216:5:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8134:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8152:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8155:1:17",
														"valueSize": 1
													},
													{
														"declaration": 1911,
														"isOffset": false,
														"isSlot": false,
														"src": "8189:1:17",
														"valueSize": 1
													}
												],
												"id": 1973,
												"nodeType": "InlineAssembly",
												"src": "8111:133:17"
											},
											{
												"assignments": [
													1975
												],
												"declarations": [
													{
														"constant": false,
														"id": 1975,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "8254:20:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1974,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8254:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1979,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1976,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1949,
														"src": "8277:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1977,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8285:24:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8277:32:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8254:55:17"
											},
											{
												"assignments": [
													1981
												],
												"declarations": [
													{
														"constant": false,
														"id": 1981,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "8338:13:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1980,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8338:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1991,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1989,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1986,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1984,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1975,
																			"src": "8361:13:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1985,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8377:37:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8361:53:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1987,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8360:55:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1988,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8419:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8360:62:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1983,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8354:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1982,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8354:5:17",
															"typeDescriptions": {}
														}
													},
													"id": 1990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8354:69:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8338:85:17"
											},
											{
												"assignments": [
													1993
												],
												"declarations": [
													{
														"constant": false,
														"id": 1993,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 2020,
														"src": "8433:12:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1992,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8433:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2003,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1998,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1996,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1975,
																			"src": "8455:13:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1997,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8471:39:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8455:55:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1999,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8454:57:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8515:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8454:64:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1995,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8448:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1994,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8448:5:17",
															"typeDescriptions": {}
														}
													},
													"id": 2002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8448:71:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8433:86:17"
											},
											{
												"expression": {
													"id": 2018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2004,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1888,
														"src": "8530:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 2007,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2005,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1981,
																"src": "8537:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2006,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1993,
																"src": "8548:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8537:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2013,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2010,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1993,
																			"src": "8586:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 2009,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1882,
																		"src": "8567:18:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 2011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8567:26:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 2012,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "8597:12:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8567:42:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 2015,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1981,
																"src": "8621:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 2016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8567:61:17",
															"trueExpression": {
																"id": 2014,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1993,
																"src": "8612:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 2017,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8537:91:17",
														"trueExpression": {
															"id": 2008,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1981,
															"src": "8557:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8530:98:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 2019,
												"nodeType": "ExpressionStatement",
												"src": "8530:98:17"
											}
										]
									},
									"documentation": {
										"id": 1883,
										"nodeType": "StructuredDocumentation",
										"src": "3941:408:17",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 2021,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2021,
												"src": "4382:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1884,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4382:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4381:22:17"
									},
									"returnParameters": {
										"id": 1889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2021,
												"src": "4427:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1887,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4427:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4426:12:17"
									},
									"scope": 2022,
									"src": "4354:4281:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2023,
							"src": "306:8331:17"
						}
					],
					"src": "45:8593:17"
				},
				"id": 17
			}
		}
	}
}